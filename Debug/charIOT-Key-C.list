
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001240c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d380  080125a0  080125a0  000225a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f920  0801f920  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801f920  0801f920  0002f920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f928  0801f928  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f928  0801f928  0002f928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f92c  0801f92c  0002f92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0801f930  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009244  200000f0  0801fa20  000300f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009334  0801fa20  00039334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006ffee  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073b1  00000000  00000000  000a010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004ad0  00000000  00000000  000a74c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004798  00000000  00000000  000abf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275cd  00000000  00000000  000b0728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038dd3  00000000  00000000  000d7cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001064a2  00000000  00000000  00110ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00216f6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015128  00000000  00000000  00216fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012584 	.word	0x08012584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08012584 	.word	0x08012584

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	817b      	strh	r3, [r7, #10]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	813b      	strh	r3, [r7, #8]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000fc6:	897a      	ldrh	r2, [r7, #10]
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	893a      	ldrh	r2, [r7, #8]
 8000fd0:	8b3b      	ldrh	r3, [r7, #24]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	893a      	ldrh	r2, [r7, #8]
 8000fd8:	8979      	ldrh	r1, [r7, #10]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f001 faf0 	bl	80025c4 <u8g2_IsIntersection>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d012      	beq.n	8001010 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000fea:	e00d      	b.n	8001008 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	893a      	ldrh	r2, [r7, #8]
 8000ff0:	8979      	ldrh	r1, [r7, #10]
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	9000      	str	r0, [sp, #0]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f001 f9dd 	bl	80023b6 <u8g2_DrawHVLine>
    y++;    
 8000ffc:	893b      	ldrh	r3, [r7, #8]
 8000ffe:	3301      	adds	r3, #1
 8001000:	813b      	strh	r3, [r7, #8]
    h--;
 8001002:	8b3b      	ldrh	r3, [r7, #24]
 8001004:	3b01      	subs	r3, #1
 8001006:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001008:	8b3b      	ldrh	r3, [r7, #24]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1ee      	bne.n	8000fec <u8g2_DrawBox+0x40>
 800100e:	e000      	b.n	8001012 <u8g2_DrawBox+0x66>
    return;
 8001010:	bf00      	nop
  }
}
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	4608      	mov	r0, r1
 8001022:	4611      	mov	r1, r2
 8001024:	461a      	mov	r2, r3
 8001026:	4603      	mov	r3, r0
 8001028:	817b      	strh	r3, [r7, #10]
 800102a:	460b      	mov	r3, r1
 800102c:	813b      	strh	r3, [r7, #8]
 800102e:	4613      	mov	r3, r2
 8001030:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001032:	897b      	ldrh	r3, [r7, #10]
 8001034:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001036:	897a      	ldrh	r2, [r7, #10]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4413      	add	r3, r2
 800103c:	b298      	uxth	r0, r3
 800103e:	893a      	ldrh	r2, [r7, #8]
 8001040:	8c3b      	ldrh	r3, [r7, #32]
 8001042:	4413      	add	r3, r2
 8001044:	b29b      	uxth	r3, r3
 8001046:	893a      	ldrh	r2, [r7, #8]
 8001048:	8979      	ldrh	r1, [r7, #10]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4603      	mov	r3, r0
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f001 fab8 	bl	80025c4 <u8g2_IsIntersection>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d037      	beq.n	80010ca <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	893a      	ldrh	r2, [r7, #8]
 800105e:	8979      	ldrh	r1, [r7, #10]
 8001060:	2000      	movs	r0, #0
 8001062:	9000      	str	r0, [sp, #0]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f001 f9a6 	bl	80023b6 <u8g2_DrawHVLine>
  if (h >= 2) {
 800106a:	8c3b      	ldrh	r3, [r7, #32]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d92d      	bls.n	80010cc <u8g2_DrawFrame+0xb4>
    h-=2;
 8001070:	8c3b      	ldrh	r3, [r7, #32]
 8001072:	3b02      	subs	r3, #2
 8001074:	843b      	strh	r3, [r7, #32]
    y++;
 8001076:	893b      	ldrh	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 800107c:	8c3b      	ldrh	r3, [r7, #32]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01a      	beq.n	80010b8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001082:	8c3b      	ldrh	r3, [r7, #32]
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	8979      	ldrh	r1, [r7, #10]
 8001088:	2001      	movs	r0, #1
 800108a:	9000      	str	r0, [sp, #0]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f001 f992 	bl	80023b6 <u8g2_DrawHVLine>
      x+=w;
 8001092:	897a      	ldrh	r2, [r7, #10]
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	4413      	add	r3, r2
 8001098:	817b      	strh	r3, [r7, #10]
      x--;
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	3b01      	subs	r3, #1
 800109e:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010a0:	8c3b      	ldrh	r3, [r7, #32]
 80010a2:	893a      	ldrh	r2, [r7, #8]
 80010a4:	8979      	ldrh	r1, [r7, #10]
 80010a6:	2001      	movs	r0, #1
 80010a8:	9000      	str	r0, [sp, #0]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f001 f983 	bl	80023b6 <u8g2_DrawHVLine>
      y+=h;
 80010b0:	893a      	ldrh	r2, [r7, #8]
 80010b2:	8c3b      	ldrh	r3, [r7, #32]
 80010b4:	4413      	add	r3, r2
 80010b6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	893a      	ldrh	r2, [r7, #8]
 80010bc:	8af9      	ldrh	r1, [r7, #22]
 80010be:	2000      	movs	r0, #0
 80010c0:	9000      	str	r0, [sp, #0]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 f977 	bl	80023b6 <u8g2_DrawHVLine>
 80010c8:	e000      	b.n	80010cc <u8g2_DrawFrame+0xb4>
    return;
 80010ca:	bf00      	nop
  }
}
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	7c1b      	ldrb	r3, [r3, #16]
 80010e0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010e8:	461a      	mov	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e fe95 	bl	800fe30 <memset>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af02      	add	r7, sp, #8
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	4613      	mov	r3, r2
 800111c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7c1b      	ldrb	r3, [r3, #16]
 8001124:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	b29b      	uxth	r3, r3
 8001134:	89ba      	ldrh	r2, [r7, #12]
 8001136:	fb12 f303 	smulbb	r3, r2, r3
 800113a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800113c:	89bb      	ldrh	r3, [r7, #12]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001142:	89bb      	ldrh	r3, [r7, #12]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800114a:	7bf9      	ldrb	r1, [r7, #15]
 800114c:	78ba      	ldrb	r2, [r7, #2]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	460b      	mov	r3, r1
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f001 ff9d 	bl	8003096 <u8x8_DrawTile>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001176:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800117e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7c5b      	ldrb	r3, [r3, #17]
 8001186:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001188:	7bba      	ldrb	r2, [r7, #14]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffbd 	bl	800110e <u8g2_send_tile_row>
    src_row++;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d203      	bcs.n	80011b0 <u8g2_send_buffer+0x4c>
 80011a8:	7bba      	ldrb	r2, [r7, #14]
 80011aa:	7b3b      	ldrb	r3, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3eb      	bcc.n	8001188 <u8g2_send_buffer+0x24>
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffcf 	bl	8001164 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 ffb6 	bl	8003138 <u8x8_RefreshDisplay>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff5b 	bl	80010d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffd8 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff95 	bl	8001164 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001240:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	4413      	add	r3, r2
 800124c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	7c5b      	ldrb	r3, [r3, #17]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	429a      	cmp	r2, r3
 8001258:	d304      	bcc.n	8001264 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f001 ff6c 	bl	8003138 <u8x8_RefreshDisplay>
    return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e00d      	b.n	8001280 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff2f 	bl	80010d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffab 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	817b      	strh	r3, [r7, #10]
 800129a:	460b      	mov	r3, r1
 800129c:	813b      	strh	r3, [r7, #8]
 800129e:	4613      	mov	r3, r2
 80012a0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80012a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012a4:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80012a6:	2308      	movs	r3, #8
 80012a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80012b8:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80012c0:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80012c8:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80012d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d6:	3301      	adds	r3, #1
 80012d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80012da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80012de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80012e4:	897b      	ldrh	r3, [r7, #10]
 80012e6:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80012e8:	8b7a      	ldrh	r2, [r7, #26]
 80012ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80012f0:	8b7a      	ldrh	r2, [r7, #26]
 80012f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80012f8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	8c3b      	ldrh	r3, [r7, #32]
 8001306:	4413      	add	r3, r2
 8001308:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800130a:	893b      	ldrh	r3, [r7, #8]
 800130c:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	4798      	blx	r3
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	8afb      	ldrh	r3, [r7, #22]
 800131c:	4413      	add	r3, r2
 800131e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001320:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001324:	b29b      	uxth	r3, r3
 8001326:	8afa      	ldrh	r2, [r7, #22]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 800132c:	8afa      	ldrh	r2, [r7, #22]
 800132e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8001334:	8afa      	ldrh	r2, [r7, #22]
 8001336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 800133c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001340:	b21a      	sxth	r2, r3
 8001342:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001346:	b21b      	sxth	r3, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b21b      	sxth	r3, r3
 800134c:	b29a      	uxth	r2, r3
 800134e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001350:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001352:	440b      	add	r3, r1
 8001354:	b29b      	uxth	r3, r3
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	4413      	add	r3, r2
 800135c:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 800135e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	d067      	beq.n	8001434 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001366:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001368:	429a      	cmp	r2, r3
 800136a:	d109      	bne.n	8001380 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 800136c:	7f7b      	ldrb	r3, [r7, #29]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 f8d8 	bl	8002530 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001380:	8b38      	ldrh	r0, [r7, #24]
 8001382:	8afa      	ldrh	r2, [r7, #22]
 8001384:	8b79      	ldrh	r1, [r7, #26]
 8001386:	8abb      	ldrh	r3, [r7, #20]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4603      	mov	r3, r0
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff fe43 	bl	8001018 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001392:	7f7b      	ldrb	r3, [r7, #29]
 8001394:	4619      	mov	r1, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f001 f8ca 	bl	8002530 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	f003 0318 	and.w	r3, r3, #24
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d042      	beq.n	800142c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 80013a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d13c      	bne.n	800142c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	10db      	asrs	r3, r3, #3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 80013be:	8a7b      	ldrh	r3, [r7, #18]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 80013c4:	2300      	movs	r3, #0
 80013c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80013c8:	e02c      	b.n	8001424 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 80013ca:	8b7a      	ldrh	r2, [r7, #26]
 80013cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8a7b      	ldrh	r3, [r7, #18]
 80013d4:	4413      	add	r3, r2
 80013d6:	b299      	uxth	r1, r3
 80013d8:	8afa      	ldrh	r2, [r7, #22]
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013e2:	4413      	add	r3, r2
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8a7b      	ldrh	r3, [r7, #18]
 80013e8:	4413      	add	r3, r2
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	8b3b      	ldrh	r3, [r7, #24]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f001 f86c 	bl	80024cc <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 80013f4:	8b7a      	ldrh	r2, [r7, #26]
 80013f6:	8b3b      	ldrh	r3, [r7, #24]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013fe:	4413      	add	r3, r2
 8001400:	b29a      	uxth	r2, r3
 8001402:	8a7b      	ldrh	r3, [r7, #18]
 8001404:	4413      	add	r3, r2
 8001406:	b299      	uxth	r1, r3
 8001408:	8afa      	ldrh	r2, [r7, #22]
 800140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140c:	4413      	add	r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	8a7b      	ldrh	r3, [r7, #18]
 8001412:	4413      	add	r3, r2
 8001414:	b29a      	uxth	r2, r3
 8001416:	8abb      	ldrh	r3, [r7, #20]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f001 f870 	bl	80024fe <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 800141e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001420:	3301      	adds	r3, #1
 8001422:	847b      	strh	r3, [r7, #34]	; 0x22
 8001424:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001428:	429a      	cmp	r2, r3
 800142a:	d3ce      	bcc.n	80013ca <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 800142c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800142e:	3b01      	subs	r3, #1
 8001430:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001432:	e757      	b.n	80012e4 <u8g2_DrawButtonFrame+0x5c>
      break;
 8001434:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	2b00      	cmp	r3, #0
 800143e:	d011      	beq.n	8001464 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001440:	2102      	movs	r1, #2
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f001 f874 	bl	8002530 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001448:	8b38      	ldrh	r0, [r7, #24]
 800144a:	8afa      	ldrh	r2, [r7, #22]
 800144c:	8b79      	ldrh	r1, [r7, #26]
 800144e:	8abb      	ldrh	r3, [r7, #20]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4603      	mov	r3, r0
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff fda9 	bl	8000fac <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	4619      	mov	r1, r3
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f001 f866 	bl	8002530 <u8g2_SetDrawColor>
  }
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af04      	add	r7, sp, #16
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	817b      	strh	r3, [r7, #10]
 800147e:	460b      	mov	r3, r1
 8001480:	813b      	strh	r3, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 ff11 	bl	80022b0 <u8g2_GetUTF8Width>
 800148e:	4603      	mov	r3, r0
 8001490:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001492:	2300      	movs	r3, #0
 8001494:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	3301      	adds	r3, #1
 80014a4:	0fda      	lsrs	r2, r3, #31
 80014a6:	4413      	add	r3, r2
 80014a8:	105b      	asrs	r3, r3, #1
 80014aa:	425b      	negs	r3, r3
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	897b      	ldrh	r3, [r7, #10]
 80014b0:	4413      	add	r3, r2
 80014b2:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 80014b4:	8afa      	ldrh	r2, [r7, #22]
 80014b6:	8c3b      	ldrh	r3, [r7, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d20d      	bcs.n	80014d8 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 80014c6:	8c3a      	ldrh	r2, [r7, #32]
 80014c8:	8afb      	ldrh	r3, [r7, #22]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	0fda      	lsrs	r2, r3, #31
 80014ce:	4413      	add	r3, r2
 80014d0:	105b      	asrs	r3, r3, #1
 80014d2:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 80014d4:	8c3b      	ldrh	r3, [r7, #32]
 80014d6:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 80014d8:	2101      	movs	r1, #1
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 fcdc 	bl	8001e98 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 80014e0:	893a      	ldrh	r2, [r7, #8]
 80014e2:	8979      	ldrh	r1, [r7, #10]
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fdae 	bl	8002048 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 80014ec:	897a      	ldrh	r2, [r7, #10]
 80014ee:	8abb      	ldrh	r3, [r7, #20]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b299      	uxth	r1, r3
 80014f4:	88f8      	ldrh	r0, [r7, #6]
 80014f6:	893a      	ldrh	r2, [r7, #8]
 80014f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	8afb      	ldrh	r3, [r7, #22]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4603      	mov	r3, r0
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff febe 	bl	8001288 <u8g2_DrawButtonFrame>
  
}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe71 	bl	8001204 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fe82 	bl	800122c <u8g2_NextPage>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f9      	bne.n	8001522 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800152e:	2100      	movs	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fe4f 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2204      	movs	r2, #4
 800154c:	701a      	strb	r2, [r3, #0]
  return buf;
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	2000010c 	.word	0x2000010c

08001560 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af02      	add	r7, sp, #8
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001576:	490c      	ldr	r1, [pc, #48]	; (80015a8 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f001 fe3d 	bl	80031f8 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800157e:	f107 0313 	add.w	r3, r7, #19
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffdc 	bl	8001540 <u8g2_m_16_4_f>
 8001588:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800158a:	7cfa      	ldrb	r2, [r7, #19]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f001 f8ff 	bl	8002798 <u8g2_SetupBuffer>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08002d8d 	.word	0x08002d8d
 80015a8:	08002f4d 	.word	0x08002f4d
 80015ac:	0800261b 	.word	0x0800261b

080015b0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	81fb      	strh	r3, [r7, #14]
    font++;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3301      	adds	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	4413      	add	r3, r2
 8001604:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001606:	89fb      	ldrh	r3, [r7, #14]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7ff ffc5 	bl	80015b0 <u8g2_font_get_byte>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800162e:	2101      	movs	r1, #1
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f7ff ffbd 	bl	80015b0 <u8g2_font_get_byte>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800163e:	2102      	movs	r1, #2
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f7ff ffb5 	bl	80015b0 <u8g2_font_get_byte>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800164e:	2103      	movs	r1, #3
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f7ff ffad 	bl	80015b0 <u8g2_font_get_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800165e:	2104      	movs	r1, #4
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ffa5 	bl	80015b0 <u8g2_font_get_byte>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800166e:	2105      	movs	r1, #5
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff9d 	bl	80015b0 <u8g2_font_get_byte>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800167e:	2106      	movs	r1, #6
 8001680:	6838      	ldr	r0, [r7, #0]
 8001682:	f7ff ff95 	bl	80015b0 <u8g2_font_get_byte>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800168e:	2107      	movs	r1, #7
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7ff ff8d 	bl	80015b0 <u8g2_font_get_byte>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800169e:	2108      	movs	r1, #8
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7ff ff85 	bl	80015b0 <u8g2_font_get_byte>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80016ae:	2109      	movs	r1, #9
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f7ff ff7d 	bl	80015b0 <u8g2_font_get_byte>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80016be:	210a      	movs	r1, #10
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f7ff ff75 	bl	80015b0 <u8g2_font_get_byte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80016ce:	210b      	movs	r1, #11
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f7ff ff6d 	bl	80015b0 <u8g2_font_get_byte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80016de:	210c      	movs	r1, #12
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f7ff ff65 	bl	80015b0 <u8g2_font_get_byte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80016ee:	210d      	movs	r1, #13
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7ff ff5d 	bl	80015b0 <u8g2_font_get_byte>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80016fe:	210e      	movs	r1, #14
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f7ff ff55 	bl	80015b0 <u8g2_font_get_byte>
 8001706:	4603      	mov	r3, r0
 8001708:	b25a      	sxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800170e:	210f      	movs	r1, #15
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f7ff ff4d 	bl	80015b0 <u8g2_font_get_byte>
 8001716:	4603      	mov	r3, r0
 8001718:	b25a      	sxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800171e:	2110      	movs	r1, #16
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7ff ff45 	bl	80015b0 <u8g2_font_get_byte>
 8001726:	4603      	mov	r3, r0
 8001728:	b25a      	sxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800172e:	2111      	movs	r1, #17
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff ff4f 	bl	80015d4 <u8g2_font_get_word>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800173e:	2113      	movs	r1, #19
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff ff47 	bl	80015d4 <u8g2_font_get_word>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800174e:	2115      	movs	r1, #21
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff ff3f 	bl	80015d4 <u8g2_font_get_word>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	82da      	strh	r2, [r3, #22]
#endif
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	fa42 f303 	asr.w	r3, r2, r3
 8001788:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800178e:	7bba      	ldrb	r2, [r7, #14]
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	4413      	add	r3, r2
 8001794:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	2b07      	cmp	r3, #7
 800179a:	d91a      	bls.n	80017d2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800179c:	2308      	movs	r3, #8
 800179e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80017a0:	7b3a      	ldrb	r2, [r7, #12]
 80017a2:	7b7b      	ldrb	r3, [r7, #13]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	3b08      	subs	r3, #8
 80017d0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4013      	ands	r3, r2
 80017e6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7bba      	ldrb	r2, [r7, #14]
 80017ec:	731a      	strb	r2, [r3, #12]
  return val;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	4619      	mov	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffaa 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	3b01      	subs	r3, #1
 800181e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001820:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
  return v;
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001842:	b490      	push	{r4, r7}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4604      	mov	r4, r0
 800184a:	4608      	mov	r0, r1
 800184c:	4611      	mov	r1, r2
 800184e:	461a      	mov	r2, r3
 8001850:	4623      	mov	r3, r4
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	4603      	mov	r3, r0
 8001856:	717b      	strb	r3, [r7, #5]
 8001858:	460b      	mov	r3, r1
 800185a:	713b      	strb	r3, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d014      	beq.n	8001890 <u8g2_add_vector_y+0x4e>
 8001866:	2b02      	cmp	r3, #2
 8001868:	dc19      	bgt.n	800189e <u8g2_add_vector_y+0x5c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <u8g2_add_vector_y+0x32>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d007      	beq.n	8001882 <u8g2_add_vector_y+0x40>
 8001872:	e014      	b.n	800189e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001874:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001878:	b29a      	uxth	r2, r3
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	4413      	add	r3, r2
 800187e:	80fb      	strh	r3, [r7, #6]
      break;
 8001880:	e014      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001882:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001886:	b29a      	uxth	r2, r3
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4413      	add	r3, r2
 800188c:	80fb      	strh	r3, [r7, #6]
      break;
 800188e:	e00d      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001890:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001894:	b29b      	uxth	r3, r3
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	80fb      	strh	r3, [r7, #6]
      break;
 800189c:	e006      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800189e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	88fa      	ldrh	r2, [r7, #6]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	80fb      	strh	r3, [r7, #6]
      break;      
 80018aa:	bf00      	nop
  }
  return dy;
 80018ac:	88fb      	ldrh	r3, [r7, #6]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc90      	pop	{r4, r7}
 80018b6:	4770      	bx	lr

080018b8 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	4603      	mov	r3, r0
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	460b      	mov	r3, r1
 80018d0:	713b      	strb	r3, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d014      	beq.n	8001906 <u8g2_add_vector_x+0x4e>
 80018dc:	2b02      	cmp	r3, #2
 80018de:	dc19      	bgt.n	8001914 <u8g2_add_vector_x+0x5c>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <u8g2_add_vector_x+0x32>
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d007      	beq.n	80018f8 <u8g2_add_vector_x+0x40>
 80018e8:	e014      	b.n	8001914 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80018ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	4413      	add	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
      break;
 80018f6:	e014      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80018f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	80fb      	strh	r3, [r7, #6]
      break;
 8001904:	e00d      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001906:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800190a:	b29b      	uxth	r3, r3
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	80fb      	strh	r3, [r7, #6]
      break;
 8001912:	e006      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001914:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001918:	b29a      	uxth	r2, r3
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4413      	add	r3, r2
 800191e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001920:	bf00      	nop
  }
  return dx;
 8001922:	88fb      	ldrh	r3, [r7, #6]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bc90      	pop	{r4, r7}
 800192c:	4770      	bx	lr

0800192e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af02      	add	r7, sp, #8
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	4613      	mov	r3, r2
 800193c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3360      	adds	r3, #96	; 0x60
 8001942:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800194e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001956:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800195e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	7d7b      	ldrb	r3, [r7, #21]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800196c:	7dfa      	ldrb	r2, [r7, #23]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	429a      	cmp	r2, r3
 8001972:	d201      	bcs.n	8001978 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	889b      	ldrh	r3, [r3, #4]
 800197c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	88db      	ldrh	r3, [r3, #6]
 8001982:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001984:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001988:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	7c1b      	ldrb	r3, [r3, #16]
 8001990:	89b8      	ldrh	r0, [r7, #12]
 8001992:	f7ff ff91 	bl	80018b8 <u8g2_add_vector_x>
 8001996:	4603      	mov	r3, r0
 8001998:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800199a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800199e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	7c1b      	ldrb	r3, [r3, #16]
 80019a6:	8978      	ldrh	r0, [r7, #10]
 80019a8:	f7ff ff4b 	bl	8001842 <u8g2_add_vector_y>
 80019ac:	4603      	mov	r3, r0
 80019ae:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80019b0:	78bb      	ldrb	r3, [r7, #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d010      	beq.n	80019d8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	7b9a      	ldrb	r2, [r3, #14]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80019c0:	7dbb      	ldrb	r3, [r7, #22]
 80019c2:	b298      	uxth	r0, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	7c1b      	ldrb	r3, [r3, #16]
 80019c8:	897a      	ldrh	r2, [r7, #10]
 80019ca:	89b9      	ldrh	r1, [r7, #12]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4603      	mov	r3, r0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fcf0 	bl	80023b6 <u8g2_DrawHVLine>
 80019d6:	e013      	b.n	8001a00 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	7b5b      	ldrb	r3, [r3, #13]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	7bda      	ldrb	r2, [r3, #15]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80019ea:	7dbb      	ldrb	r3, [r7, #22]
 80019ec:	b298      	uxth	r0, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	7c1b      	ldrb	r3, [r3, #16]
 80019f2:	897a      	ldrh	r2, [r7, #10]
 80019f4:	89b9      	ldrh	r1, [r7, #12]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4603      	mov	r3, r0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fcdb 	bl	80023b6 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001a00:	7dfa      	ldrb	r2, [r7, #23]
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d309      	bcc.n	8001a1c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001a08:	7dfa      	ldrb	r2, [r7, #23]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	757b      	strb	r3, [r7, #21]
    ly++;
 8001a14:	7d3b      	ldrb	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001a1a:	e79d      	b.n	8001958 <u8g2_font_decode_len+0x2a>
      break;
 8001a1c:	bf00      	nop
  }
  lx += cnt;
 8001a1e:	7d7a      	ldrb	r2, [r7, #21]
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	4413      	add	r3, r2
 8001a24:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001a26:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001a2e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	725a      	strb	r2, [r3, #9]
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3360      	adds	r3, #96	; 0x60
 8001a4c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a60:	4619      	mov	r1, r3
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff fe7f 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001a76:	4619      	mov	r1, r3
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f7ff fe74 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b25a      	sxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	7b9b      	ldrb	r3, [r3, #14]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	73da      	strb	r2, [r3, #15]
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffbd 	bl	8001a3e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001aca:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6978      	ldr	r0, [r7, #20]
 8001ad6:	f7ff fe91 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001ada:	4603      	mov	r3, r0
 8001adc:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff fe88 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001aec:	4603      	mov	r3, r0
 8001aee:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001af6:	4619      	mov	r1, r3
 8001af8:	6978      	ldr	r0, [r7, #20]
 8001afa:	f7ff fe7f 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001afe:	4603      	mov	r3, r0
 8001b00:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f340 80d7 	ble.w	8001cbc <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	8898      	ldrh	r0, [r3, #4]
 8001b12:	7cfa      	ldrb	r2, [r7, #19]
 8001b14:	7c7b      	ldrb	r3, [r7, #17]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	7c1b      	ldrb	r3, [r3, #16]
 8001b24:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001b28:	f7ff fec6 	bl	80018b8 <u8g2_add_vector_x>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	88d8      	ldrh	r0, [r3, #6]
 8001b38:	7cfa      	ldrb	r2, [r7, #19]
 8001b3a:	7c7b      	ldrb	r3, [r7, #17]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	425b      	negs	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	7c1b      	ldrb	r3, [r3, #16]
 8001b4a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001b4e:	f7ff fe78 	bl	8001842 <u8g2_add_vector_y>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	889b      	ldrh	r3, [r3, #4]
 8001b5e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	88db      	ldrh	r3, [r3, #6]
 8001b64:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001b66:	8bfb      	ldrh	r3, [r7, #30]
 8001b68:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	7c1b      	ldrb	r3, [r3, #16]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d85a      	bhi.n	8001c2c <u8g2_font_decode_glyph+0x180>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <u8g2_font_decode_glyph+0xd0>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	08001bd1 	.word	0x08001bd1
 8001b88:	08001c05 	.word	0x08001c05
      {
	case 0:
	    x1 += decode->glyph_width;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	833b      	strh	r3, [r7, #24]
	    break;
 8001ba6:	e041      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	8bfa      	ldrh	r2, [r7, #30]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bb4:	8bfb      	ldrh	r3, [r7, #30]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001bba:	8bbb      	ldrh	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	8b3b      	ldrh	r3, [r7, #24]
 8001bca:	4413      	add	r3, r2
 8001bcc:	833b      	strh	r3, [r7, #24]
	    break;
 8001bce:	e02d      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8bfa      	ldrh	r2, [r7, #30]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bde:	8bfb      	ldrh	r3, [r7, #30]
 8001be0:	3301      	adds	r3, #1
 8001be2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001be4:	8bbb      	ldrh	r3, [r7, #28]
 8001be6:	3301      	adds	r3, #1
 8001be8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001bea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	8b7a      	ldrh	r2, [r7, #26]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bf6:	8b7b      	ldrh	r3, [r7, #26]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001bfc:	8b3b      	ldrh	r3, [r7, #24]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001c02:	e013      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001c04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	8bbb      	ldrh	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	8b7a      	ldrh	r2, [r7, #26]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c1e:	8b7b      	ldrh	r3, [r7, #26]
 8001c20:	3301      	adds	r3, #1
 8001c22:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001c24:	8b3b      	ldrh	r3, [r7, #24]
 8001c26:	3301      	adds	r3, #1
 8001c28:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001c2a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c2c:	8bb8      	ldrh	r0, [r7, #28]
 8001c2e:	8b7a      	ldrh	r2, [r7, #26]
 8001c30:	8bf9      	ldrh	r1, [r7, #30]
 8001c32:	8b3b      	ldrh	r3, [r7, #24]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4603      	mov	r3, r0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fcc3 	bl	80025c4 <u8g2_IsIntersection>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <u8g2_font_decode_glyph+0x19e>
	return d;
 8001c44:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001c48:	e03a      	b.n	8001cc0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff fd81 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6978      	ldr	r0, [r7, #20]
 8001c72:	f7ff fd78 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c76:	4603      	mov	r3, r0
 8001c78:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fe54 	bl	800192e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fe4e 	bl	800192e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c92:	2101      	movs	r1, #1
 8001c94:	6978      	ldr	r0, [r7, #20]
 8001c96:	f7ff fd66 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ec      	bne.n	8001c7a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ca6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dd00      	ble.n	8001cb0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001cae:	e7d2      	b.n	8001c56 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001cb0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	7b9a      	ldrb	r2, [r3, #14]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001cbc:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3317      	adds	r3, #23
 8001cde:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d82a      	bhi.n	8001d3c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	2b60      	cmp	r3, #96	; 0x60
 8001cea:	d907      	bls.n	8001cfc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e009      	b.n	8001d10 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d906      	bls.n	8001d10 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d08:	461a      	mov	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d04e      	beq.n	8001db8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d102      	bne.n	8001d2c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	e049      	b.n	8001dc0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d3a:	e7e9      	b.n	8001d10 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001d42:	461a      	mov	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	4413      	add	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	6938      	ldr	r0, [r7, #16]
 8001d52:	f7ff fc3f 	bl	80015d4 <u8g2_font_get_word>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001d60:	2102      	movs	r1, #2
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f7ff fc36 	bl	80015d4 <u8g2_font_get_word>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001d72:	89fa      	ldrh	r2, [r7, #14]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3e9      	bcc.n	8001d4e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001d9a:	89fa      	ldrh	r2, [r7, #14]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d102      	bne.n	8001da8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3303      	adds	r3, #3
 8001da6:	e00b      	b.n	8001dc0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3302      	adds	r3, #2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001db6:	e7e0      	b.n	8001d7a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <u8g2_font_get_glyph_data+0xf6>
	break;
 8001dbc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	897a      	ldrh	r2, [r7, #10]
 8001dea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	893a      	ldrh	r2, [r7, #8]
 8001df2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff ff64 	bl	8001cc8 <u8g2_font_get_glyph_data>
 8001e00:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff fe4e 	bl	8001aac <u8g2_font_decode_glyph>
 8001e10:	4603      	mov	r3, r0
 8001e12:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001e14:	8afb      	ldrh	r3, [r7, #22]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff4a 	bl	8001cc8 <u8g2_font_get_glyph_data>
 8001e34:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e027      	b.n	8001e90 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fdfb 	bl	8001a3e <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff fcd0 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f7ff fcc1 	bl	80017fc <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f7ff fcb7 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	817b      	strh	r3, [r7, #10]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	813b      	strh	r3, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d833      	bhi.n	8001f44 <u8g2_DrawGlyph+0x8c>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <u8g2_DrawGlyph+0x2c>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001f09 	.word	0x08001f09
 8001eec:	08001f1d 	.word	0x08001f1d
 8001ef0:	08001f31 	.word	0x08001f31
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	4798      	blx	r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	893b      	ldrh	r3, [r7, #8]
 8001f02:	4413      	add	r3, r2
 8001f04:	813b      	strh	r3, [r7, #8]
      break;
 8001f06:	e01d      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	4798      	blx	r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	817b      	strh	r3, [r7, #10]
      break;
 8001f1a:	e013      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	893b      	ldrh	r3, [r7, #8]
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	813b      	strh	r3, [r7, #8]
      break;
 8001f2e:	e009      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	4798      	blx	r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	4413      	add	r3, r2
 8001f40:	817b      	strh	r3, [r7, #10]
      break;
 8001f42:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	893a      	ldrh	r2, [r7, #8]
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff ff3c 	bl	8001dc8 <u8g2_font_draw_glyph>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fd59 	bl	8002a26 <u8x8_utf8_init>
  sum = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	4611      	mov	r1, r2
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	4798      	blx	r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001f8a:	8abb      	ldrh	r3, [r7, #20]
 8001f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d038      	beq.n	8002006 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001f9a:	8abb      	ldrh	r3, [r7, #20]
 8001f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d0e9      	beq.n	8001f78 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001fa4:	8abb      	ldrh	r3, [r7, #20]
 8001fa6:	893a      	ldrh	r2, [r7, #8]
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff ff84 	bl	8001eb8 <u8g2_DrawGlyph>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d81e      	bhi.n	8001ffc <u8g2_draw_string+0xa0>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <u8g2_draw_string+0x68>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fdf 	.word	0x08001fdf
 8001fcc:	08001fe9 	.word	0x08001fe9
 8001fd0:	08001ff3 	.word	0x08001ff3
      {
	case 0:
	  x += delta;
 8001fd4:	897a      	ldrh	r2, [r7, #10]
 8001fd6:	8a7b      	ldrh	r3, [r7, #18]
 8001fd8:	4413      	add	r3, r2
 8001fda:	817b      	strh	r3, [r7, #10]
	  break;
 8001fdc:	e00e      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001fde:	893a      	ldrh	r2, [r7, #8]
 8001fe0:	8a7b      	ldrh	r3, [r7, #18]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	813b      	strh	r3, [r7, #8]
	  break;
 8001fe6:	e009      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001fe8:	897a      	ldrh	r2, [r7, #10]
 8001fea:	8a7b      	ldrh	r3, [r7, #18]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	817b      	strh	r3, [r7, #10]
	  break;
 8001ff0:	e004      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ff2:	893a      	ldrh	r2, [r7, #8]
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	813b      	strh	r3, [r7, #8]
	  break;
 8001ffa:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	8a7b      	ldrh	r3, [r7, #18]
 8002000:	4413      	add	r3, r2
 8002002:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002004:	e7b8      	b.n	8001f78 <u8g2_draw_string+0x1c>
      break;
 8002006:	bf00      	nop
    }
  }
  return sum;
 8002008:	8afb      	ldrh	r3, [r7, #22]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop

08002014 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	4613      	mov	r3, r2
 8002024:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <u8g2_DrawStr+0x30>)
 800202a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff92 	bl	8001f5c <u8g2_draw_string>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	08002a43 	.word	0x08002a43

08002048 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	817b      	strh	r3, [r7, #10]
 8002056:	4613      	mov	r3, r2
 8002058:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <u8g2_DrawUTF8+0x30>)
 800205e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff ff78 	bl	8001f5c <u8g2_draw_string>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	08002a71 	.word	0x08002a71

0800207c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05d      	beq.n	8002148 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04d      	beq.n	800214a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d11c      	bne.n	80020f2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80020c4:	429a      	cmp	r2, r3
 80020c6:	da05      	bge.n	80020d4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dd32      	ble.n	800214a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80020f0:	e02b      	b.n	800214a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002100:	4619      	mov	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002108:	440b      	add	r3, r1
 800210a:	429a      	cmp	r2, r3
 800210c:	da0d      	bge.n	800212a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	b2db      	uxtb	r3, r3
 8002122:	b25a      	sxtb	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002136:	429a      	cmp	r2, r3
 8002138:	dd07      	ble.n	800214a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002146:	e000      	b.n	800214a <u8g2_UpdateRefHeight+0xce>
    return;
 8002148:	bf00      	nop
  }  
}
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <u8g2_SetFontPosBaseline+0x1c>)
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08002155 	.word	0x08002155

0800218c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d00b      	beq.n	80021b8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3374      	adds	r3, #116	; 0x74
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa31 	bl	8001614 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff62 	bl	800207c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	72fb      	strb	r3, [r7, #11]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fc25 	bl	8002a26 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	7812      	ldrb	r2, [r2, #0]
 80021ec:	4611      	mov	r1, r2
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	813b      	strh	r3, [r7, #8]
    if ( e == 0x0ffff )
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d01c      	beq.n	800223a <u8g2_string_width+0x7a>
      break;
    str++;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800220c:	4293      	cmp	r3, r2
 800220e:	d0e9      	beq.n	80021e4 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fe02 	bl	8001e1e <u8g2_GetGlyphWidth>
 800221a:	4603      	mov	r3, r0
 800221c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 800221e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002222:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002226:	d103      	bne.n	8002230 <u8g2_string_width+0x70>
        initial_x_offset = u8g2->glyph_x_offset;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800222e:	72fb      	strb	r3, [r7, #11]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 8002230:	89fa      	ldrh	r2, [r7, #14]
 8002232:	89bb      	ldrh	r3, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002238:	e7d4      	b.n	80021e4 <u8g2_string_width+0x24>
      break;
 800223a:	bf00      	nop
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01b      	beq.n	800227e <u8g2_string_width+0xbe>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 8002246:	89fa      	ldrh	r2, [r7, #14]
 8002248:	89bb      	ldrh	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002254:	b29a      	uxth	r2, r3
 8002256:	89fb      	ldrh	r3, [r7, #14]
 8002258:	4413      	add	r3, r2
 800225a:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8002262:	b29a      	uxth	r2, r3
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	4413      	add	r3, r2
 8002268:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 800226a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dd05      	ble.n	800227e <u8g2_string_width+0xbe>
      w+=initial_x_offset;
 8002272:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002276:	b29a      	uxth	r2, r3
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	4413      	add	r3, r2
 800227c:	81fb      	strh	r3, [r7, #14]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 800227e:	89fb      	ldrh	r3, [r7, #14]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a05      	ldr	r2, [pc, #20]	; (80022ac <u8g2_GetStrWidth+0x24>)
 8002296:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff90 	bl	80021c0 <u8g2_string_width>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08002a43 	.word	0x08002a43

080022b0 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <u8g2_GetUTF8Width+0x24>)
 80022be:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ff7c 	bl	80021c0 <u8g2_string_width>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	08002a71 	.word	0x08002a71

080022d8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	460b      	mov	r3, r1
 80022e8:	80fb      	strh	r3, [r7, #6]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	8abb      	ldrh	r3, [r7, #20]
 80022fe:	4413      	add	r3, r2
 8002300:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002302:	8afa      	ldrh	r2, [r7, #22]
 8002304:	8abb      	ldrh	r3, [r7, #20]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90b      	bls.n	8002322 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800230a:	8afa      	ldrh	r2, [r7, #22]
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d205      	bcs.n	800231e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002312:	88bb      	ldrh	r3, [r7, #4]
 8002314:	82bb      	strh	r3, [r7, #20]
      b--;
 8002316:	8abb      	ldrh	r3, [r7, #20]
 8002318:	3b01      	subs	r3, #1
 800231a:	82bb      	strh	r3, [r7, #20]
 800231c:	e001      	b.n	8002322 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002322:	8afa      	ldrh	r2, [r7, #22]
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d301      	bcc.n	800232e <u8g2_clip_intersection2+0x56>
    return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	e01c      	b.n	8002368 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800232e:	8aba      	ldrh	r2, [r7, #20]
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	429a      	cmp	r2, r3
 8002334:	d801      	bhi.n	800233a <u8g2_clip_intersection2+0x62>
    return 0;
 8002336:	2300      	movs	r3, #0
 8002338:	e016      	b.n	8002368 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800233a:	8afa      	ldrh	r2, [r7, #22]
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	429a      	cmp	r2, r3
 8002340:	d201      	bcs.n	8002346 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002346:	8aba      	ldrh	r2, [r7, #20]
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d901      	bls.n	8002352 <u8g2_clip_intersection2+0x7a>
    b = d;
 800234e:	88bb      	ldrh	r3, [r7, #4]
 8002350:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8afa      	ldrh	r2, [r7, #22]
 8002356:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002358:	8aba      	ldrh	r2, [r7, #20]
 800235a:	8afb      	ldrh	r3, [r7, #22]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	8aba      	ldrh	r2, [r7, #20]
 8002364:	801a      	strh	r2, [r3, #0]
  return 1;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b087      	sub	sp, #28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	817b      	strh	r3, [r7, #10]
 8002386:	460b      	mov	r3, r1
 8002388:	813b      	strh	r3, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002392:	893a      	ldrh	r2, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800239c:	88f8      	ldrh	r0, [r7, #6]
 800239e:	893a      	ldrh	r2, [r7, #8]
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	47a0      	blx	r4
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}

080023b6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023b6:	b590      	push	{r4, r7, lr}
 80023b8:	b087      	sub	sp, #28
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	4608      	mov	r0, r1
 80023c0:	4611      	mov	r1, r2
 80023c2:	461a      	mov	r2, r3
 80023c4:	4603      	mov	r3, r0
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	460b      	mov	r3, r1
 80023ca:	813b      	strh	r3, [r7, #8]
 80023cc:	4613      	mov	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d072      	beq.n	80024c6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d91a      	bls.n	800241c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80023e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d109      	bne.n	8002402 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80023ee:	897a      	ldrh	r2, [r7, #10]
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	817b      	strh	r3, [r7, #10]
	  x++;
 80023f8:	897b      	ldrh	r3, [r7, #10]
 80023fa:	3301      	adds	r3, #1
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	817b      	strh	r3, [r7, #10]
 8002400:	e00c      	b.n	800241c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d108      	bne.n	800241c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800240a:	893a      	ldrh	r2, [r7, #8]
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	813b      	strh	r3, [r7, #8]
	  y++;
 8002414:	893b      	ldrh	r3, [r7, #8]
 8002416:	3301      	adds	r3, #1
 8002418:	b29b      	uxth	r3, r3
 800241a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800241c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002428:	f897 3020 	ldrb.w	r3, [r7, #32]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11a      	bne.n	8002466 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002436:	893b      	ldrh	r3, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d83b      	bhi.n	80024b4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d937      	bls.n	80024b8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002454:	1db9      	adds	r1, r7, #6
 8002456:	f107 000a 	add.w	r0, r7, #10
 800245a:	f7ff ff3d 	bl	80022d8 <u8g2_clip_intersection2>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11a      	bne.n	800249a <u8g2_DrawHVLine+0xe4>
	  return;
 8002464:	e02f      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	429a      	cmp	r2, r3
 8002470:	d824      	bhi.n	80024bc <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002478:	897b      	ldrh	r3, [r7, #10]
 800247a:	429a      	cmp	r2, r3
 800247c:	d920      	bls.n	80024c0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800248a:	1db9      	adds	r1, r7, #6
 800248c:	f107 0008 	add.w	r0, r7, #8
 8002490:	f7ff ff22 	bl	80022d8 <u8g2_clip_intersection2>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d014      	beq.n	80024c4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	689c      	ldr	r4, [r3, #8]
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	893a      	ldrh	r2, [r7, #8]
 80024a4:	88f8      	ldrh	r0, [r7, #6]
 80024a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	47a0      	blx	r4
 80024b2:	e008      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024b4:	bf00      	nop
 80024b6:	e006      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024b8:	bf00      	nop
 80024ba:	e004      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024bc:	bf00      	nop
 80024be:	e002      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024c0:	bf00      	nop
 80024c2:	e000      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024c4:	bf00      	nop
    }
}
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	2000      	movs	r0, #0
 80024ee:	9000      	str	r0, [sp, #0]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff ff60 	bl	80023b6 <u8g2_DrawHVLine>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af02      	add	r7, sp, #8
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	4608      	mov	r0, r1
 8002508:	4611      	mov	r1, r2
 800250a:	461a      	mov	r2, r3
 800250c:	4603      	mov	r3, r0
 800250e:	817b      	strh	r3, [r7, #10]
 8002510:	460b      	mov	r3, r1
 8002512:	813b      	strh	r3, [r7, #8]
 8002514:	4613      	mov	r3, r2
 8002516:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	893a      	ldrh	r2, [r7, #8]
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	2001      	movs	r0, #1
 8002520:	9000      	str	r0, [sp, #0]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff ff47 	bl	80023b6 <u8g2_DrawHVLine>
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d903      	bls.n	8002552 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800255e:	b490      	push	{r4, r7}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4604      	mov	r4, r0
 8002566:	4608      	mov	r0, r1
 8002568:	4611      	mov	r1, r2
 800256a:	461a      	mov	r2, r3
 800256c:	4623      	mov	r3, r4
 800256e:	80fb      	strh	r3, [r7, #6]
 8002570:	4603      	mov	r3, r0
 8002572:	80bb      	strh	r3, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	88bb      	ldrh	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d20d      	bcs.n	80025a0 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002584:	883a      	ldrh	r2, [r7, #0]
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	429a      	cmp	r2, r3
 800258a:	d901      	bls.n	8002590 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800258c:	2301      	movs	r3, #1
 800258e:	e014      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	883b      	ldrh	r3, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d901      	bls.n	800259c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002598:	2301      	movs	r3, #1
 800259a:	e00e      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800259c:	2300      	movs	r3, #0
 800259e:	e00c      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80025a0:	883a      	ldrh	r2, [r7, #0]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d907      	bls.n	80025b8 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80025a8:	887a      	ldrh	r2, [r7, #2]
 80025aa:	883b      	ldrh	r3, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d901      	bls.n	80025b4 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e002      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80025b8:	2300      	movs	r3, #0
    }
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc90      	pop	{r4, r7}
 80025c2:	4770      	bx	lr

080025c4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80025ea:	8b3b      	ldrh	r3, [r7, #24]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	f7ff ffb6 	bl	800255e <u8g2_is_intersection_decision_tree>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <u8g2_IsIntersection+0x38>
    return 0; 
 80025f8:	2300      	movs	r3, #0
 80025fa:	e00a      	b.n	8002612 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	897a      	ldrh	r2, [r7, #10]
 800260c:	f7ff ffa7 	bl	800255e <u8g2_is_intersection_decision_tree>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800261a:	b480      	push	{r7}
 800261c:	b089      	sub	sp, #36	; 0x24
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	461a      	mov	r2, r3
 8002628:	4603      	mov	r3, r0
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	460b      	mov	r3, r1
 800262e:	813b      	strh	r3, [r7, #8]
 8002630:	4613      	mov	r3, r2
 8002632:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002638:	7efb      	ldrb	r3, [r7, #27]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002640:	2301      	movs	r3, #1
 8002642:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002644:	7e3a      	ldrb	r2, [r7, #24]
 8002646:	7efb      	ldrb	r3, [r7, #27]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800265c:	2b01      	cmp	r3, #1
 800265e:	d801      	bhi.n	8002664 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002660:	7e3b      	ldrb	r3, [r7, #24]
 8002662:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800266e:	7e3b      	ldrb	r3, [r7, #24]
 8002670:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	f023 0307 	bic.w	r3, r3, #7
 800267c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	7c1b      	ldrb	r3, [r3, #16]
 8002684:	b29b      	uxth	r3, r3
 8002686:	8afa      	ldrh	r2, [r7, #22]
 8002688:	fb12 f303 	smulbb	r3, r2, r3
 800268c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002694:	8afb      	ldrh	r3, [r7, #22]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800269c:	897b      	ldrh	r3, [r7, #10]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80026a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d117      	bne.n	80026dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	7ebb      	ldrb	r3, [r7, #26]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	7e7b      	ldrb	r3, [r7, #25]
 80026c0:	4053      	eors	r3, r2
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	701a      	strb	r2, [r3, #0]
	ptr++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
	len--;
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e8      	bne.n	80026ac <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80026da:	e038      	b.n	800274e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	7ebb      	ldrb	r3, [r7, #26]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	7e7b      	ldrb	r3, [r7, #25]
 80026f0:	4053      	eors	r3, r2
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80026f8:	7efb      	ldrb	r3, [r7, #27]
 80026fa:	3301      	adds	r3, #1
 80026fc:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80026fe:	7efb      	ldrb	r3, [r7, #27]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	76fb      	strb	r3, [r7, #27]
      len--;
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	3b01      	subs	r3, #1
 800270a:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800270c:	7efb      	ldrb	r3, [r7, #27]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d114      	bne.n	800273c <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002716:	461a      	mov	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002724:	2b01      	cmp	r3, #1
 8002726:	d801      	bhi.n	800272c <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002732:	2b01      	cmp	r3, #1
 8002734:	d008      	beq.n	8002748 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	767b      	strb	r3, [r7, #25]
 800273a:	e005      	b.n	8002748 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800273c:	7ebb      	ldrb	r3, [r7, #26]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002742:	7e7b      	ldrb	r3, [r7, #25]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1c6      	bne.n	80026dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ffa9 	bl	800275a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff fcaf 	bl	800216c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002832:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	89fa      	ldrh	r2, [r7, #14]
 800283e:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	7c1b      	ldrb	r3, [r3, #16]
 8002844:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	89fa      	ldrh	r2, [r7, #14]
 8002850:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002858:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	89fa      	ldrh	r2, [r7, #14]
 8002864:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002876:	4413      	add	r3, r2
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	7c52      	ldrb	r2, [r2, #17]
 800287c:	4293      	cmp	r3, r2
 800287e:	dd08      	ble.n	8002892 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	7c5b      	ldrb	r3, [r3, #17]
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800288c:	b29b      	uxth	r3, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	4413      	add	r3, r2
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	8a9a      	ldrh	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	8ada      	ldrh	r2, [r3, #22]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4603      	mov	r3, r0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe5d 	bl	80025c4 <u8g2_IsIntersection>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002918:	e03b      	b.n	8002992 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292e:	429a      	cmp	r2, r3
 8002930:	d205      	bcs.n	800293e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800294a:	429a      	cmp	r2, r3
 800294c:	d905      	bls.n	800295a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002966:	429a      	cmp	r2, r3
 8002968:	d205      	bcs.n	8002976 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002982:	429a      	cmp	r2, r3
 8002984:	d905      	bls.n	8002992 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff3b 	bl	800281e <u8g2_update_dimension_common>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff7b 	bl	80028e0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	4608      	mov	r0, r1
 80029fc:	4611      	mov	r1, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	817b      	strh	r3, [r7, #10]
 8002a04:	460b      	mov	r3, r1
 8002a06:	813b      	strh	r3, [r7, #8]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a0c:	88f8      	ldrh	r0, [r7, #6]
 8002a0e:	893a      	ldrh	r2, [r7, #8]
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	7e3b      	ldrb	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4603      	mov	r3, r0
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fcab 	bl	8002374 <u8g2_draw_hv_line_2dir>
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <u8x8_ascii_next+0x18>
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	2b0a      	cmp	r3, #10
 8002a58:	d102      	bne.n	8002a60 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5e:	e001      	b.n	8002a64 <u8x8_ascii_next+0x22>
  return b;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	b29b      	uxth	r3, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <u8x8_utf8_next+0x18>
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	2b0a      	cmp	r3, #10
 8002a86:	d102      	bne.n	8002a8e <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8c:	e06e      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d145      	bne.n	8002b24 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2bfb      	cmp	r3, #251	; 0xfb
 8002a9c:	d908      	bls.n	8002ab0 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	70fb      	strb	r3, [r7, #3]
 8002aae:	e032      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	2bf7      	cmp	r3, #247	; 0xf7
 8002ab4:	d908      	bls.n	8002ac8 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	70fb      	strb	r3, [r7, #3]
 8002ac6:	e026      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2bef      	cmp	r3, #239	; 0xef
 8002acc:	d908      	bls.n	8002ae0 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	70fb      	strb	r3, [r7, #3]
 8002ade:	e01a      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	2bdf      	cmp	r3, #223	; 0xdf
 8002ae4:	d908      	bls.n	8002af8 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	e00e      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2bbf      	cmp	r3, #191	; 0xbf
 8002afc:	d908      	bls.n	8002b10 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	e002      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	e02a      	b.n	8002b6c <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002b1e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b22:	e023      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8c1b      	ldrh	r3, [r3, #32]
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b46:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8c1a      	ldrh	r2, [r3, #32]
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002b62:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b66:	e001      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8c1b      	ldrh	r3, [r3, #32]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	460b      	mov	r3, r1
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691c      	ldr	r4, [r3, #16]
 8002b8a:	7afa      	ldrb	r2, [r7, #11]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2117      	movs	r1, #23
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	47a0      	blx	r4
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}

08002b9e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002baa:	1cfb      	adds	r3, r7, #3
 8002bac:	461a      	mov	r2, r3
 8002bae:	2101      	movs	r1, #1
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ffe1 	bl	8002b78 <u8x8_byte_SendBytes>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691c      	ldr	r4, [r3, #16]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2118      	movs	r1, #24
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	47a0      	blx	r4
 8002bd6:	4603      	mov	r3, r0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691c      	ldr	r4, [r3, #16]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2119      	movs	r1, #25
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	47a0      	blx	r4
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68dc      	ldr	r4, [r3, #12]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2115      	movs	r1, #21
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	47a0      	blx	r4
 8002c1a:	4603      	mov	r3, r0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68dc      	ldr	r4, [r3, #12]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	2300      	movs	r3, #0
 8002c38:	2116      	movs	r1, #22
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	47a0      	blx	r4
 8002c3e:	4603      	mov	r3, r0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}

08002c48 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	460b      	mov	r3, r1
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68dc      	ldr	r4, [r3, #12]
 8002c5a:	7afa      	ldrb	r2, [r7, #11]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2117      	movs	r1, #23
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	47a0      	blx	r4
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}

08002c6e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68dc      	ldr	r4, [r3, #12]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2118      	movs	r1, #24
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	47a0      	blx	r4
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68dc      	ldr	r4, [r3, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2119      	movs	r1, #25
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	47a0      	blx	r4
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd90      	pop	{r4, r7, pc}

08002cae <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	73fb      	strb	r3, [r7, #15]
    data++;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2bfe      	cmp	r3, #254	; 0xfe
 8002cc8:	d031      	beq.n	8002d2e <u8x8_cad_SendSequence+0x80>
 8002cca:	2bfe      	cmp	r3, #254	; 0xfe
 8002ccc:	dc3d      	bgt.n	8002d4a <u8x8_cad_SendSequence+0x9c>
 8002cce:	2b19      	cmp	r3, #25
 8002cd0:	dc3b      	bgt.n	8002d4a <u8x8_cad_SendSequence+0x9c>
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	da23      	bge.n	8002d1e <u8x8_cad_SendSequence+0x70>
 8002cd6:	2b16      	cmp	r3, #22
 8002cd8:	dc02      	bgt.n	8002ce0 <u8x8_cad_SendSequence+0x32>
 8002cda:	2b15      	cmp	r3, #21
 8002cdc:	da03      	bge.n	8002ce6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002cde:	e034      	b.n	8002d4a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002ce0:	2b17      	cmp	r3, #23
 8002ce2:	d00e      	beq.n	8002d02 <u8x8_cad_SendSequence+0x54>
	return;
 8002ce4:	e031      	b.n	8002d4a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68dc      	ldr	r4, [r3, #12]
 8002cf0:	7bba      	ldrb	r2, [r7, #14]
 8002cf2:	7bf9      	ldrb	r1, [r7, #15]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	47a0      	blx	r4
	  data++;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	603b      	str	r3, [r7, #0]
	  break;
 8002d00:	e022      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d08:	f107 030e 	add.w	r3, r7, #14
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2101      	movs	r1, #1
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ff99 	bl	8002c48 <u8x8_cad_SendData>
	  data++;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	603b      	str	r3, [r7, #0]
	  break;
 8002d1c:	e014      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68dc      	ldr	r4, [r3, #12]
 8002d22:	7bf9      	ldrb	r1, [r7, #15]
 8002d24:	2300      	movs	r3, #0
 8002d26:	2200      	movs	r2, #0
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	47a0      	blx	r4
	  break;
 8002d2c:	e00c      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	461a      	mov	r2, r3
 8002d38:	2129      	movs	r1, #41	; 0x29
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa0b 	bl	8003156 <u8x8_gpio_call>
	  data++;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	603b      	str	r3, [r7, #0]
	  break;
 8002d46:	bf00      	nop
    cmd = *data;
 8002d48:	e7b6      	b.n	8002cb8 <u8x8_cad_SendSequence+0xa>
	return;
 8002d4a:	bf00      	nop
    }
  }
}
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}

08002d52 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002d52:	b590      	push	{r4, r7, lr}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff ff2d 	bl	8002bc0 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002d66:	2140      	movs	r1, #64	; 0x40
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff ff18 	bl	8002b9e <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691c      	ldr	r4, [r3, #16]
 8002d72:	7afa      	ldrb	r2, [r7, #11]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2117      	movs	r1, #23
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff ff2f 	bl	8002be0 <u8x8_byte_EndTransfer>
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
	...

08002d8c <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	72fb      	strb	r3, [r7, #11]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	3b14      	subs	r3, #20
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d848      	bhi.n	8002e38 <u8x8_cad_ssd13xx_i2c+0xac>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <u8x8_cad_ssd13xx_i2c+0x20>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002e15 	.word	0x08002e15
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002de5 	.word	0x08002de5
 8002dbc:	08002e3d 	.word	0x08002e3d
 8002dc0:	08002e3d 	.word	0x08002e3d
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fefb 	bl	8002bc0 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002dca:	2100      	movs	r1, #0
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fee6 	bl	8002b9e <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002dd2:	7abb      	ldrb	r3, [r7, #10]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff fee1 	bl	8002b9e <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff feff 	bl	8002be0 <u8x8_byte_EndTransfer>
      break;
 8002de2:	e02c      	b.n	8002e3e <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002de8:	e00a      	b.n	8002e00 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	2118      	movs	r1, #24
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff ffaf 	bl	8002d52 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002df4:	7abb      	ldrb	r3, [r7, #10]
 8002df6:	3b18      	subs	r3, #24
 8002df8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002e00:	7abb      	ldrb	r3, [r7, #10]
 8002e02:	2b18      	cmp	r3, #24
 8002e04:	d8f1      	bhi.n	8002dea <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002e06:	7abb      	ldrb	r3, [r7, #10]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ffa0 	bl	8002d52 <u8x8_i2c_data_transfer>
      break;
 8002e12:	e014      	b.n	8002e3e <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e1a:	2bff      	cmp	r3, #255	; 0xff
 8002e1c:	d103      	bne.n	8002e26 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2278      	movs	r2, #120	; 0x78
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691c      	ldr	r4, [r3, #16]
 8002e2a:	7aba      	ldrb	r2, [r7, #10]
 8002e2c:	7af9      	ldrb	r1, [r7, #11]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	47a0      	blx	r4
 8002e34:	4603      	mov	r3, r0
 8002e36:	e003      	b.n	8002e40 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e001      	b.n	8002e40 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8002e3c:	bf00      	nop
  }
  return 1;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	72fb      	strb	r3, [r7, #11]
 8002e56:	4613      	mov	r3, r2
 8002e58:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d006      	beq.n	8002e6e <u8x8_d_ssd1305_generic+0x26>
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	dc67      	bgt.n	8002f34 <u8x8_d_ssd1305_generic+0xec>
 8002e64:	2b0b      	cmp	r3, #11
 8002e66:	d048      	beq.n	8002efa <u8x8_d_ssd1305_generic+0xb2>
 8002e68:	2b0e      	cmp	r3, #14
 8002e6a:	d053      	beq.n	8002f14 <u8x8_d_ssd1305_generic+0xcc>
 8002e6c:	e062      	b.n	8002f34 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff fefd 	bl	8002c6e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	795b      	ldrb	r3, [r3, #5]
 8002e78:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	4413      	add	r3, r2
 8002e8a:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff feb6 	bl	8002c00 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f7ff feac 	bl	8002c00 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff feb6 	bl	8002c24 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	799b      	ldrb	r3, [r3, #6]
 8002ebc:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fead 	bl	8002c24 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002ed6:	7dbb      	ldrb	r3, [r7, #22]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff feb1 	bl	8002c48 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002ee6:	7abb      	ldrb	r3, [r7, #10]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002eec:	7abb      	ldrb	r3, [r7, #10]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1eb      	bne.n	8002eca <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fecb 	bl	8002c8e <u8x8_cad_EndTransfer>
      break;
 8002ef8:	e01e      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002efa:	7abb      	ldrb	r3, [r7, #10]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 8002f00:	4910      	ldr	r1, [pc, #64]	; (8002f44 <u8x8_d_ssd1305_generic+0xfc>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fed3 	bl	8002cae <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002f08:	e016      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002f0a:	490f      	ldr	r1, [pc, #60]	; (8002f48 <u8x8_d_ssd1305_generic+0x100>)
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fece 	bl	8002cae <u8x8_cad_SendSequence>
      break;
 8002f12:	e011      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff feaa 	bl	8002c6e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f1a:	2181      	movs	r1, #129	; 0x81
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff fe6f 	bl	8002c00 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 8002f22:	7abb      	ldrb	r3, [r7, #10]
 8002f24:	4619      	mov	r1, r3
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff fe7c 	bl	8002c24 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff feae 	bl	8002c8e <u8x8_cad_EndTransfer>
      break;
 8002f32:	e001      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	0801f488 	.word	0x0801f488
 8002f48:	0801f490 	.word	0x0801f490

08002f4c <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	72fb      	strb	r3, [r7, #11]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002f5e:	7aba      	ldrb	r2, [r7, #10]
 8002f60:	7af9      	ldrb	r1, [r7, #11]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff ff6f 	bl	8002e48 <u8x8_d_ssd1305_generic>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e032      	b.n	8002fda <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	2b0d      	cmp	r3, #13
 8002f78:	d006      	beq.n	8002f88 <u8x8_d_ssd1305_128x32_noname+0x3c>
 8002f7a:	2b0d      	cmp	r3, #13
 8002f7c:	dc2a      	bgt.n	8002fd4 <u8x8_d_ssd1305_128x32_noname+0x88>
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d023      	beq.n	8002fca <u8x8_d_ssd1305_128x32_noname+0x7e>
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	d019      	beq.n	8002fba <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002f86:	e025      	b.n	8002fd4 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002f88:	7abb      	ldrb	r3, [r7, #10]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 8002f8e:	4915      	ldr	r1, [pc, #84]	; (8002fe4 <u8x8_d_ssd1305_128x32_noname+0x98>)
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fe8c 	bl	8002cae <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	7c9a      	ldrb	r2, [r3, #18]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002fa2:	e019      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002fa4:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fe81 	bl	8002cae <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	7cda      	ldrb	r2, [r3, #19]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002fb8:	e00e      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f82e 	bl	800301c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 8002fc0:	490a      	ldr	r1, [pc, #40]	; (8002fec <u8x8_d_ssd1305_128x32_noname+0xa0>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fe73 	bl	8002cae <u8x8_cad_SendSequence>
      break;
 8002fc8:	e006      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002fca:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f811 	bl	8002ff4 <u8x8_d_helper_display_setup_memory>
      break;
 8002fd2:	e001      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	0801f498 	.word	0x0801f498
 8002fe8:	0801f4a4 	.word	0x0801f4a4
 8002fec:	0801f4c8 	.word	0x0801f4c8
 8002ff0:	0801f4b0 	.word	0x0801f4b0

08002ff4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	7c9a      	ldrb	r2, [r3, #18]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695c      	ldr	r4, [r3, #20]
 8003028:	2300      	movs	r3, #0
 800302a:	2200      	movs	r2, #0
 800302c:	2128      	movs	r1, #40	; 0x28
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68dc      	ldr	r4, [r3, #12]
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	2114      	movs	r1, #20
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003040:	2201      	movs	r2, #1
 8003042:	214b      	movs	r1, #75	; 0x4b
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f886 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	791b      	ldrb	r3, [r3, #4]
 8003050:	461a      	mov	r2, r3
 8003052:	2129      	movs	r1, #41	; 0x29
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f87e 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	214b      	movs	r1, #75	; 0x4b
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f879 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	791b      	ldrb	r3, [r3, #4]
 800306a:	461a      	mov	r2, r3
 800306c:	2129      	movs	r1, #41	; 0x29
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f871 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003074:	2201      	movs	r2, #1
 8003076:	214b      	movs	r1, #75	; 0x4b
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f86c 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	795b      	ldrb	r3, [r3, #5]
 8003084:	461a      	mov	r2, r3
 8003086:	2129      	movs	r1, #41	; 0x29
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f864 	bl	8003156 <u8x8_gpio_call>
}    
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}

08003096 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003096:	b590      	push	{r4, r7, lr}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	4608      	mov	r0, r1
 80030a0:	4611      	mov	r1, r2
 80030a2:	461a      	mov	r2, r3
 80030a4:	4603      	mov	r3, r0
 80030a6:	70fb      	strb	r3, [r7, #3]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70bb      	strb	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030b4:	78bb      	ldrb	r3, [r7, #2]
 80030b6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689c      	ldr	r4, [r3, #8]
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	2201      	movs	r2, #1
 80030ca:	210f      	movs	r1, #15
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	47a0      	blx	r4
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}

080030da <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80030da:	b590      	push	{r4, r7, lr}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689c      	ldr	r4, [r3, #8]
 80030e6:	2300      	movs	r3, #0
 80030e8:	2200      	movs	r2, #0
 80030ea:	2109      	movs	r1, #9
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	47a0      	blx	r4
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689c      	ldr	r4, [r3, #8]
 8003104:	2300      	movs	r3, #0
 8003106:	2200      	movs	r2, #0
 8003108:	210a      	movs	r1, #10
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}

08003116 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003116:	b590      	push	{r4, r7, lr}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689c      	ldr	r4, [r3, #8]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	2300      	movs	r3, #0
 800312a:	210b      	movs	r1, #11
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	47a0      	blx	r4
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}

08003138 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689c      	ldr	r4, [r3, #8]
 8003144:	2300      	movs	r3, #0
 8003146:	2200      	movs	r2, #0
 8003148:	2110      	movs	r1, #16
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	47a0      	blx	r4
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003156:	b590      	push	{r4, r7, lr}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
 8003162:	4613      	mov	r3, r2
 8003164:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695c      	ldr	r4, [r3, #20]
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	78f9      	ldrb	r1, [r7, #3]
 800316e:	2300      	movs	r3, #0
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	47a0      	blx	r4
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	72fb      	strb	r3, [r7, #11]
 800318a:	4613      	mov	r3, r2
 800318c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031ae:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031b4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031ba:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031c0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	22ff      	movs	r2, #255	; 0xff
 80031e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	0800317d 	.word	0x0800317d

080031f8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff ffc8 	bl	800319c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ff58 	bl	80030da <u8x8_SetupMemory>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <decode>:

volatile bool HKIW = false;
volatile bool HKIE = false;

void decode(void *argument)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    CanMsg_t RX;

    for (;;)
    {
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 800323c:	4b23      	ldr	r3, [pc, #140]	; (80032cc <decode+0x98>)
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	f107 0108 	add.w	r1, r7, #8
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	2200      	movs	r2, #0
 800324a:	f009 f88b 	bl	800c364 <osMessageQueueGet>

#ifdef TIMING_TEST
        htim15.Instance->CNT = 0;
#endif

        switch (RX.Message[0])
 800324e:	7a3b      	ldrb	r3, [r7, #8]
 8003250:	2b4f      	cmp	r3, #79	; 0x4f
 8003252:	d01a      	beq.n	800328a <decode+0x56>
 8003254:	2b4f      	cmp	r3, #79	; 0x4f
 8003256:	dcf1      	bgt.n	800323c <decode+0x8>
 8003258:	2b48      	cmp	r3, #72	; 0x48
 800325a:	d002      	beq.n	8003262 <decode+0x2e>
 800325c:	2b4b      	cmp	r3, #75	; 0x4b
 800325e:	d023      	beq.n	80032a8 <decode+0x74>
 8003260:	e032      	b.n	80032c8 <decode+0x94>
        {
        case HANDSHAKE: {
            keyboard_count += 1;
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <decode+0x9c>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3301      	adds	r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <decode+0x9c>)
 800326e:	701a      	strb	r2, [r3, #0]

            // termination (UNTESTED)
            if (RX.Message[1] == TERMINATE)
 8003270:	7a7b      	ldrb	r3, [r7, #9]
 8003272:	2b58      	cmp	r3, #88	; 0x58
 8003274:	d127      	bne.n	80032c6 <decode+0x92>
            {

                handshakeRequest = 0; // or osEventFlagsClear
 8003276:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <decode+0xa0>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
                //                osMutexAcquire(readMutexHandle, osWaitForever);
                //                setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
                //                setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
                //                osMutexRelease(readMutexHandle);

                outbits[5] = 1;
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <decode+0xa4>)
 800327e:	2201      	movs	r2, #1
 8003280:	715a      	strb	r2, [r3, #5]
                outbits[6] = 1;
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <decode+0xa4>)
 8003284:	2201      	movs	r2, #1
 8003286:	719a      	strb	r2, [r3, #6]

                // HERE, insert code to (re)start everything else
            }
        }
        break;
 8003288:	e01d      	b.n	80032c6 <decode+0x92>
        case OCTAVE_CHANGE: {
            octave = RX.Message[2] + keyboard_position - RX.Message[1];
 800328a:	7abb      	ldrb	r3, [r7, #10]
 800328c:	b29a      	uxth	r2, r3
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <decode+0xa8>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	b29b      	uxth	r3, r3
 8003296:	4413      	add	r3, r2
 8003298:	b29a      	uxth	r2, r3
 800329a:	7a7b      	ldrb	r3, [r7, #9]
 800329c:	b29b      	uxth	r3, r3
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <decode+0xac>)
 80032a4:	801a      	strh	r2, [r3, #0]
        }
        break;
 80032a6:	e00f      	b.n	80032c8 <decode+0x94>
        case KEYS: {
            uint16_t localKeys = (uint16_t)RX.Message[2] << 8 | RX.Message[1];
 80032a8:	7abb      	ldrb	r3, [r7, #10]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	b21a      	sxth	r2, r3
 80032ae:	7a7b      	ldrb	r3, [r7, #9]
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	82fb      	strh	r3, [r7, #22]
            allKeys[RX.Message[3]] = localKeys;
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <decode+0xb0>)
 80032be:	8afb      	ldrh	r3, [r7, #22]
 80032c0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        }
        break;
 80032c4:	e000      	b.n	80032c8 <decode+0x94>
        break;
 80032c6:	bf00      	nop
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 80032c8:	e7b8      	b.n	800323c <decode+0x8>
 80032ca:	bf00      	nop
 80032cc:	20000310 	.word	0x20000310
 80032d0:	20000001 	.word	0x20000001
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000004 	.word	0x20000004
 80032dc:	2000031c 	.word	0x2000031c
 80032e0:	20000014 	.word	0x20000014
 80032e4:	200006ac 	.word	0x200006ac

080032e8 <CAN_Transmit>:

    }
}

void CAN_Transmit(void *argument)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

    	osMessageQueuePut(msgOutQHandle, &TX, 0, 0);

#endif

        osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <CAN_Transmit+0x38>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	f107 010c 	add.w	r1, r7, #12
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	2200      	movs	r2, #0
 80032fe:	f009 f831 	bl	800c364 <osMessageQueueGet>

#ifdef TIMING_TEST
        htim15.Instance->CNT = 0;
#endif

        osSemaphoreAcquire(CAN_TX_SemaphoreHandle, osWaitForever);
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <CAN_Transmit+0x3c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f04f 31ff 	mov.w	r1, #4294967295
 800330a:	4618      	mov	r0, r3
 800330c:	f008 fec0 	bl	800c090 <osSemaphoreAcquire>
        CAN_TX(TX.ID, TX.Message);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f107 020c 	add.w	r2, r7, #12
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f8c3 	bl	80034a4 <CAN_TX>
        osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 800331e:	e7e7      	b.n	80032f0 <CAN_Transmit+0x8>
 8003320:	20000314 	.word	0x20000314
 8003324:	2000030c 	.word	0x2000030c

08003328 <handshake>:
    }
}


void handshake(void *argument)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

    if (handshakeRequest)
 8003330:	4b38      	ldr	r3, [pc, #224]	; (8003414 <handshake+0xec>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d048      	beq.n	80033ca <handshake+0xa2>
        // this could replaced with a flag ?
        // maybe something like osEventFlagsWait ?
        // osEventFlagsSet could be called from the task reading user inputs

        // write the outgoing handshaking signals to high
        outbits[5] = 1;
 8003338:	4b37      	ldr	r3, [pc, #220]	; (8003418 <handshake+0xf0>)
 800333a:	2201      	movs	r2, #1
 800333c:	715a      	strb	r2, [r3, #5]
        outbits[6] = 1;
 800333e:	4b36      	ldr	r3, [pc, #216]	; (8003418 <handshake+0xf0>)
 8003340:	2201      	movs	r2, #1
 8003342:	719a      	strb	r2, [r3, #6]

        osDelay(1000);
 8003344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003348:	f008 fc06 	bl	800bb58 <osDelay>
        // the keyboards turn off their east outgoing signal in turn
        // starting from the leftmost keyboard

        // wait for the west-side handshaking signal to go high
#ifndef TIMING_TEST
        while (!HKIW)
 800334c:	e002      	b.n	8003354 <handshake+0x2c>
        {
            osDelay(100);
 800334e:	2064      	movs	r0, #100	; 0x64
 8003350:	f008 fc02 	bl	800bb58 <osDelay>
        while (!HKIW)
 8003354:	4b31      	ldr	r3, [pc, #196]	; (800341c <handshake+0xf4>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f083 0301 	eor.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f4      	bne.n	800334e <handshake+0x26>
        }
#endif

        // keyboard_count is incremented at every received CAN message
        // -> see the decode task
        keyboard_position = keyboard_count - 1;
 8003364:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <handshake+0xf8>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <handshake+0xfc>)
 8003370:	701a      	strb	r2, [r3, #0]
        octave = keyboard_position + 4;
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <handshake+0xfc>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	b29b      	uxth	r3, r3
 800337a:	3304      	adds	r3, #4
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <handshake+0x100>)
 8003380:	801a      	strh	r2, [r3, #0]
        // inform other keyboards
        // send unique ID and position as per instructions

        CanMsg_t TX;

        TX.ID = IDout;
 8003382:	f240 1323 	movw	r3, #291	; 0x123
 8003386:	617b      	str	r3, [r7, #20]
        TX.Message[0] = 'H';
 8003388:	2348      	movs	r3, #72	; 0x48
 800338a:	733b      	strb	r3, [r7, #12]
        TX.Message[1] = (uint8_t)(UID0 & 0xF000) >> 24;
 800338c:	2300      	movs	r3, #0
 800338e:	737b      	strb	r3, [r7, #13]
        TX.Message[2] = (uint8_t)(UID0 & 0x0F00) >> 16;
 8003390:	2300      	movs	r3, #0
 8003392:	73bb      	strb	r3, [r7, #14]
        TX.Message[3] = (uint8_t)(UID0 & 0x00F0) >> 8;
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]
        TX.Message[4] = (uint8_t)(UID0 & 0x000F);
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <handshake+0x104>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	743b      	strb	r3, [r7, #16]
        TX.Message[5] = keyboard_position;
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <handshake+0xfc>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	747b      	strb	r3, [r7, #17]

        osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <handshake+0x108>)
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f107 010c 	add.w	r1, r7, #12
 80033b6:	2300      	movs	r3, #0
 80033b8:	2200      	movs	r2, #0
 80033ba:	f008 ff73 	bl	800c2a4 <osMessageQueuePut>

        //        char posText[2];
        //        sprintf(posText, "%i", keyboard_position);
        // serialPrintln(posText);

        osDelay(100);
 80033be:	2064      	movs	r0, #100	; 0x64
 80033c0:	f008 fbca 	bl	800bb58 <osDelay>

        // turn off the east outgoing signal to inform the next keyboard

        outbits[6] = 0;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <handshake+0xf0>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	719a      	strb	r2, [r3, #6]
    }

    const TickType_t xFrequency = 1000 / portTICK_PERIOD_MS;
 80033ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ce:	61fb      	str	r3, [r7, #28]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80033d0:	f00a ff4c 	bl	800e26c <xTaskGetTickCount>
 80033d4:	4603      	mov	r3, r0
 80033d6:	61bb      	str	r3, [r7, #24]
    //    prev_controller = controller;

    for (;;)
    {

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80033d8:	f107 0318 	add.w	r3, r7, #24
 80033dc:	69f9      	ldr	r1, [r7, #28]
 80033de:	4618      	mov	r0, r3
 80033e0:	f00a fd74 	bl	800decc <vTaskDelayUntil>

#ifdef TIMING_TEST
        htim15.Instance->CNT = 0;
#endif

        if (selected)
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <handshake+0x10c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f5      	beq.n	80033d8 <handshake+0xb0>
        {
            is_receiver = !is_receiver;
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <handshake+0x110>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <handshake+0x110>)
 8003408:	701a      	strb	r2, [r3, #0]

                osMessageQueuePut(msgOutQHandle, &TX, 0, 0);

                octave = 4;
            }*/
            vTaskDelay(500);
 800340a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800340e:	f00a fddb 	bl	800dfc8 <vTaskDelay>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003412:	e7e1      	b.n	80033d8 <handshake+0xb0>
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004
 800341c:	2000031d 	.word	0x2000031d
 8003420:	20000001 	.word	0x20000001
 8003424:	2000031c 	.word	0x2000031c
 8003428:	20000014 	.word	0x20000014
 800342c:	20000318 	.word	0x20000318
 8003430:	20000314 	.word	0x20000314
 8003434:	2000067d 	.word	0x2000067d
 8003438:	2000067c 	.word	0x2000067c

0800343c <setCANFilter>:

    }
}

uint32_t setCANFilter(uint32_t filterID, uint32_t maskID, uint32_t filterBank)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	; 0x38
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]

    CAN_FilterTypeDef filterInfo = {0};
 8003448:	f107 0310 	add.w	r3, r7, #16
 800344c:	2228      	movs	r2, #40	; 0x28
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f00c fced 	bl	800fe30 <memset>

    filterInfo.FilterIdHigh = (filterID << 5) & 0xffe0;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	015b      	lsls	r3, r3, #5
 800345a:	b29b      	uxth	r3, r3
 800345c:	613b      	str	r3, [r7, #16]
    filterInfo.FilterIdLow = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
    filterInfo.FilterMaskIdHigh = (maskID << 5) & 0xffe0;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	015b      	lsls	r3, r3, #5
 8003466:	b29b      	uxth	r3, r3
 8003468:	61bb      	str	r3, [r7, #24]
    filterInfo.FilterMaskIdLow = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
    filterInfo.FilterFIFOAssignment = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
    filterInfo.FilterBank = filterBank & 0xf;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    filterInfo.FilterMode = CAN_FILTERMODE_IDMASK;
 800347a:	2300      	movs	r3, #0
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
    filterInfo.FilterScale = CAN_FILTERSCALE_32BIT;
 800347e:	2301      	movs	r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
    filterInfo.FilterActivation = CAN_FILTER_ENABLE;
 8003482:	2301      	movs	r3, #1
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
    filterInfo.SlaveStartFilterBank = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	; 0x34

    return (uint32_t)HAL_CAN_ConfigFilter(&hcan1, &filterInfo);
 800348a:	f107 0310 	add.w	r3, r7, #16
 800348e:	4619      	mov	r1, r3
 8003490:	4803      	ldr	r0, [pc, #12]	; (80034a0 <setCANFilter+0x64>)
 8003492:	f003 fde6 	bl	8007062 <HAL_CAN_ConfigFilter>
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3738      	adds	r7, #56	; 0x38
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000384 	.word	0x20000384

080034a4 <CAN_TX>:

uint32_t CAN_TX(uint32_t ID, uint8_t data[8])
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

    CAN_TxHeaderTypeDef txHeader = {0};
 80034ae:	f107 0308 	add.w	r3, r7, #8
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	615a      	str	r2, [r3, #20]

    txHeader.StdId = ID & 0x7ff;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c6:	60bb      	str	r3, [r7, #8]
    txHeader.ExtId = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
    txHeader.IDE = CAN_ID_STD;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
    txHeader.RTR = CAN_RTR_DATA;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
    txHeader.DLC = 8;
 80034d4:	2308      	movs	r3, #8
 80034d6:	61bb      	str	r3, [r7, #24]
    txHeader.TransmitGlobalTime = DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	773b      	strb	r3, [r7, #28]

    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 80034dc:	bf00      	nop
 80034de:	4809      	ldr	r0, [pc, #36]	; (8003504 <CAN_TX+0x60>)
 80034e0:	f003 ff9d 	bl	800741e <HAL_CAN_GetTxMailboxesFreeLevel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f9      	beq.n	80034de <CAN_TX+0x3a>
        ;

    return (uint32_t)HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, NULL);
 80034ea:	f107 0108 	add.w	r1, r7, #8
 80034ee:	2300      	movs	r3, #0
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4804      	ldr	r0, [pc, #16]	; (8003504 <CAN_TX+0x60>)
 80034f4:	f003 fec3 	bl	800727e <HAL_CAN_AddTxMessage>
 80034f8:	4603      	mov	r3, r0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000384 	.word	0x20000384

08003508 <CAN_RX>:

    return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);
}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8])
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]

    CAN_RxHeaderTypeDef rxHeader;

    while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 8003512:	bf00      	nop
 8003514:	2100      	movs	r1, #0
 8003516:	480b      	ldr	r0, [pc, #44]	; (8003544 <CAN_RX+0x3c>)
 8003518:	f004 f8c8 	bl	80076ac <HAL_CAN_GetRxFifoFillLevel>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f8      	beq.n	8003514 <CAN_RX+0xc>
        ;

    uint32_t result = (uint32_t)HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader, data);
 8003522:	f107 0208 	add.w	r2, r7, #8
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2100      	movs	r1, #0
 800352a:	4806      	ldr	r0, [pc, #24]	; (8003544 <CAN_RX+0x3c>)
 800352c:	f003 ffac 	bl	8007488 <HAL_CAN_GetRxMessage>
 8003530:	4603      	mov	r3, r0
 8003532:	627b      	str	r3, [r7, #36]	; 0x24

    *ID = rxHeader.StdId;
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]

    return result;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800353c:	4618      	mov	r0, r3
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000384 	.word	0x20000384

08003548 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    CanMsg_t RX;
    CAN_RX(&RX.ID, RX.Message);
 8003550:	f107 020c 	add.w	r2, r7, #12
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	3308      	adds	r3, #8
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ffd3 	bl	8003508 <CAN_RX>
    osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	f107 010c 	add.w	r1, r7, #12
 800356a:	2300      	movs	r3, #0
 800356c:	2200      	movs	r2, #0
 800356e:	f008 fe99 	bl	800c2a4 <osMessageQueuePut>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000310 	.word	0x20000310

08003580 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f008 fdd1 	bl	800c134 <osSemaphoreRelease>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000030c 	.word	0x2000030c

080035a0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f008 fdc1 	bl	800c134 <osSemaphoreRelease>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	2000030c 	.word	0x2000030c

080035c0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f008 fdb1 	bl	800c134 <osSemaphoreRelease>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000030c 	.word	0x2000030c

080035e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0

}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
return 0;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <MX_DMA_Init>:
UART_HandleTypeDef huart2;

DMA_HandleTypeDef hdma_memtomem_dma1_channel1;

//Enable DMA controller clock
void MX_DMA_Init(void) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <MX_DMA_Init+0xa4>)
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <MX_DMA_Init+0xa4>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6493      	str	r3, [r2, #72]	; 0x48
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <MX_DMA_Init+0xa4>)
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
	hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <MX_DMA_Init+0xac>)
 8003622:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003626:	2200      	movs	r2, #0
 8003628:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <MX_DMA_Init+0xa8>)
 800362c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003630:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003634:	2240      	movs	r2, #64	; 0x40
 8003636:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <MX_DMA_Init+0xa8>)
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment =
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003644:	615a      	str	r2, [r3, #20]
			DMA_PDATAALIGN_HALFWORD;
	hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364c:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003650:	2200      	movs	r2, #0
 8003652:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800365a:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK) {
 800365c:	4812      	ldr	r0, [pc, #72]	; (80036a8 <MX_DMA_Init+0xa8>)
 800365e:	f004 fe71 	bl	8008344 <HAL_DMA_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_DMA_Init+0x6c>
		Error_Handler();
 8003668:	f001 fa20 	bl	8004aac <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2105      	movs	r1, #5
 8003670:	200b      	movs	r0, #11
 8003672:	f004 fb33 	bl	8007cdc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003676:	200b      	movs	r0, #11
 8003678:	f004 fb4c 	bl	8007d14 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2105      	movs	r1, #5
 8003680:	200d      	movs	r0, #13
 8003682:	f004 fb2b 	bl	8007cdc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003686:	200d      	movs	r0, #13
 8003688:	f004 fb44 	bl	8007d14 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2105      	movs	r1, #5
 8003690:	200e      	movs	r0, #14
 8003692:	f004 fb23 	bl	8007cdc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003696:	200e      	movs	r0, #14
 8003698:	f004 fb3c 	bl	8007d14 <HAL_NVIC_EnableIRQ>

}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	2000060c 	.word	0x2000060c
 80036ac:	40020008 	.word	0x40020008

080036b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b096      	sub	sp, #88	; 0x58
 80036b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	2244      	movs	r2, #68	; 0x44
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f00c fbb6 	bl	800fe30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80036c4:	463b      	mov	r3, r7
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036d6:	f005 fe1f 	bl	8009318 <HAL_PWREx_ControlVoltageScaling>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80036e0:	f001 f9e4 	bl	8004aac <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80036e4:	f005 fdfa 	bl	80092dc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <SystemClock_Config+0xc0>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	4a20      	ldr	r2, [pc, #128]	; (8003770 <SystemClock_Config+0xc0>)
 80036f0:	f023 0318 	bic.w	r3, r3, #24
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80036f8:	2314      	movs	r3, #20
 80036fa:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003700:	2301      	movs	r3, #1
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003708:	2360      	movs	r3, #96	; 0x60
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800370c:	2302      	movs	r3, #2
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003710:	2301      	movs	r3, #1
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8003718:	2328      	movs	r3, #40	; 0x28
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800371c:	2307      	movs	r3, #7
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003720:	2302      	movs	r3, #2
 8003722:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003724:	2302      	movs	r3, #2
 8003726:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4618      	mov	r0, r3
 800372e:	f005 fe49 	bl	80093c4 <HAL_RCC_OscConfig>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <SystemClock_Config+0x8c>
		Error_Handler();
 8003738:	f001 f9b8 	bl	8004aac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800373c:	230f      	movs	r3, #15
 800373e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003740:	2303      	movs	r3, #3
 8003742:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003750:	463b      	mov	r3, r7
 8003752:	2104      	movs	r1, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f006 fa49 	bl	8009bec <HAL_RCC_ClockConfig>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <SystemClock_Config+0xb4>
		Error_Handler();
 8003760:	f001 f9a4 	bl	8004aac <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8003764:	f006 fe8e 	bl	800a484 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003768:	bf00      	nop
 800376a:	3758      	adds	r7, #88	; 0x58
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800377a:	463b      	mov	r3, r7
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
 8003788:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <MX_ADC1_Init+0xbc>)
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <MX_ADC1_Init+0xc0>)
 800378e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <MX_ADC1_Init+0xbc>)
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <MX_ADC1_Init+0xbc>)
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <MX_ADC1_Init+0xbc>)
 800379e:	2200      	movs	r2, #0
 80037a0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037aa:	2204      	movs	r2, #4
 80037ac:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037bc:	2201      	movs	r2, #1
 80037be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80037ea:	4811      	ldr	r0, [pc, #68]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037ec:	f002 fe16 	bl	800641c <HAL_ADC_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_ADC1_Init+0x86>
		Error_Handler();
 80037f6:	f001 f959 	bl	8004aac <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <MX_ADC1_Init+0xc4>)
 80037fc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80037fe:	2306      	movs	r3, #6
 8003800:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003806:	237f      	movs	r3, #127	; 0x7f
 8003808:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800380a:	2304      	movs	r3, #4
 800380c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003812:	463b      	mov	r3, r7
 8003814:	4619      	mov	r1, r3
 8003816:	4806      	ldr	r0, [pc, #24]	; (8003830 <MX_ADC1_Init+0xbc>)
 8003818:	f002 ff48 	bl	80066ac <HAL_ADC_ConfigChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8003822:	f001 f943 	bl	8004aac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000320 	.word	0x20000320
 8003834:	50040000 	.word	0x50040000
 8003838:	14f00020 	.word	0x14f00020

0800383c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
void MX_CAN1_Init(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003842:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <MX_CAN1_Init+0x6c>)
 8003844:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 40;
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003848:	2228      	movs	r2, #40	; 0x28
 800384a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <MX_CAN1_Init+0x68>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003858:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <MX_CAN1_Init+0x68>)
 800385c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003860:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003864:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003868:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <MX_CAN1_Init+0x68>)
 800386c:	2200      	movs	r2, #0
 800386e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003872:	2200      	movs	r2, #0
 8003874:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003878:	2201      	movs	r2, #1
 800387a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_CAN1_Init+0x68>)
 800387e:	2201      	movs	r2, #1
 8003880:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_CAN1_Init+0x68>)
 800388a:	2201      	movs	r2, #1
 800388c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003890:	f003 faec 	bl	8006e6c <HAL_CAN_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_CAN1_Init+0x62>
		Error_Handler();
 800389a:	f001 f907 	bl	8004aac <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000384 	.word	0x20000384
 80038a8:	40006400 	.word	0x40006400

080038ac <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_DAC1_Init(void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	2224      	movs	r2, #36	; 0x24
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f00c fab9 	bl	800fe30 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <MX_DAC1_Init+0x70>)
 80038c0:	4a17      	ldr	r2, [pc, #92]	; (8003920 <MX_DAC1_Init+0x74>)
 80038c2:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80038c4:	4815      	ldr	r0, [pc, #84]	; (800391c <MX_DAC1_Init+0x70>)
 80038c6:	f004 fa33 	bl	8007d30 <HAL_DAC_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_DAC1_Init+0x28>
		Error_Handler();
 80038d0:	f001 f8ec 	bl	8004aac <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80038d8:	2304      	movs	r3, #4
 80038da:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	2200      	movs	r2, #0
 80038ec:	4619      	mov	r1, r3
 80038ee:	480b      	ldr	r0, [pc, #44]	; (800391c <MX_DAC1_Init+0x70>)
 80038f0:	f004 fb7a 	bl	8007fe8 <HAL_DAC_ConfigChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_DAC1_Init+0x52>
		Error_Handler();
 80038fa:	f001 f8d7 	bl	8004aac <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	2210      	movs	r2, #16
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_DAC1_Init+0x70>)
 8003906:	f004 fb6f 	bl	8007fe8 <HAL_DAC_ConfigChannel>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_DAC1_Init+0x68>
		Error_Handler();
 8003910:	f001 f8cc 	bl	8004aac <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200003ac 	.word	0x200003ac
 8003920:	40007400 	.word	0x40007400

08003924 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void) {
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <MX_I2C1_Init+0x80>)
 800392c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F33;
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <MX_I2C1_Init+0x84>)
 8003932:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800393a:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800393c:	2201      	movs	r2, #1
 800393e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003940:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800395a:	2200      	movs	r2, #0
 800395c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800395e:	4810      	ldr	r0, [pc, #64]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003960:	f005 f882 	bl	8008a68 <HAL_I2C_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800396a:	f001 f89f 	bl	8004aac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800396e:	2100      	movs	r1, #0
 8003970:	480b      	ldr	r0, [pc, #44]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003972:	f005 fbfb 	bl	800916c <HAL_I2CEx_ConfigAnalogFilter>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800397c:	f001 f896 	bl	8004aac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003980:	2100      	movs	r1, #0
 8003982:	4807      	ldr	r0, [pc, #28]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003984:	f005 fc3d 	bl	8009202 <HAL_I2CEx_ConfigDigitalFilter>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800398e:	f001 f88d 	bl	8004aac <Error_Handler>
	}

	/** I2C Fast mode Plus enable
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003992:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003996:	f005 fc81 	bl	800929c <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000450 	.word	0x20000450
 80039a4:	40005400 	.word	0x40005400
 80039a8:	00300f33 	.word	0x00300f33

080039ac <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM6_Init(void) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <MX_TIM6_Init+0x68>)
 80039c0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1814 - 1;
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039d0:	f240 7215 	movw	r2, #1813	; 0x715
 80039d4:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80039dc:	480c      	ldr	r0, [pc, #48]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039de:	f006 fe53 	bl	800a688 <HAL_TIM_Base_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM6_Init+0x40>
		Error_Handler();
 80039e8:	f001 f860 	bl	8004aac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039ec:	2320      	movs	r3, #32
 80039ee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4805      	ldr	r0, [pc, #20]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039fa:	f007 fa4b 	bl	800ae94 <HAL_TIMEx_MasterConfigSynchronization>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003a04:	f001 f852 	bl	8004aac <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200004a4 	.word	0x200004a4
 8003a14:	40001000 	.word	0x40001000

08003a18 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM7_Init(void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <MX_TIM7_Init+0x68>)
 8003a2c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 80 - 1;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a30:	224f      	movs	r2, #79	; 0x4f
 8003a32:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a40:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003a48:	480c      	ldr	r0, [pc, #48]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a4a:	f006 fe1d 	bl	800a688 <HAL_TIM_Base_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003a54:	f001 f82a 	bl	8004aac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a66:	f007 fa15 	bl	800ae94 <HAL_TIMEx_MasterConfigSynchronization>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003a70:	f001 f81c 	bl	8004aac <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200004f0 	.word	0x200004f0
 8003a80:	40001400 	.word	0x40001400

08003a84 <MX_TIM15_Init>:
/**
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM15_Init(void) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003a8a:	f107 0310 	add.w	r3, r7, #16
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	609a      	str	r2, [r3, #8]
 8003a96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <MX_TIM15_Init+0xa0>)
 8003aa6:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 80 - 1;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003aaa:	224f      	movs	r2, #79	; 0x4f
 8003aac:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aba:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003abc:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003ac2:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003ace:	4814      	ldr	r0, [pc, #80]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003ad0:	f006 fdda 	bl	800a688 <HAL_TIM_Base_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM15_Init+0x5a>
		Error_Handler();
 8003ada:	f000 ffe7 	bl	8004aac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8003ae4:	f107 0310 	add.w	r3, r7, #16
 8003ae8:	4619      	mov	r1, r3
 8003aea:	480d      	ldr	r0, [pc, #52]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003aec:	f006 ffe3 	bl	800aab6 <HAL_TIM_ConfigClockSource>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM15_Init+0x76>
		Error_Handler();
 8003af6:	f000 ffd9 	bl	8004aac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4806      	ldr	r0, [pc, #24]	; (8003b20 <MX_TIM15_Init+0x9c>)
 8003b08:	f007 f9c4 	bl	800ae94 <HAL_TIMEx_MasterConfigSynchronization>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM15_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 8003b12:	f000 ffcb 	bl	8004aac <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000053c 	.word	0x2000053c
 8003b24:	40014000 	.word	0x40014000

08003b28 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <MX_USART2_UART_Init+0x5c>)
 8003b30:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b38:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b4e:	220c      	movs	r2, #12
 8003b50:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003b6a:	4805      	ldr	r0, [pc, #20]	; (8003b80 <MX_USART2_UART_Init+0x58>)
 8003b6c:	f007 fa16 	bl	800af9c <HAL_UART_Init>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8003b76:	f000 ff99 	bl	8004aac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000588 	.word	0x20000588
 8003b84:	40004400 	.word	0x40004400

08003b88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003b8e:	f107 030c 	add.w	r3, r7, #12
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	4a2e      	ldr	r2, [pc, #184]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a28      	ldr	r2, [pc, #160]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc2:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <MX_GPIO_Init+0xd4>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bee:	f004 ff23 	bl	8008a38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	213b      	movs	r1, #59	; 0x3b
 8003bf6:	481a      	ldr	r0, [pc, #104]	; (8003c60 <MX_GPIO_Init+0xd8>)
 8003bf8:	f004 ff1e 	bl	8008a38 <HAL_GPIO_WritePin>
			RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin | OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
	GPIO_InitStruct.Pin = C0_Pin | C2_Pin | C1_Pin | C3_Pin;
 8003bfc:	f44f 7362 	mov.w	r3, #904	; 0x388
 8003c00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c14:	f004 fd8e 	bl	8008734 <HAL_GPIO_Init>

	/*Configure GPIO pin : REN_Pin */
	GPIO_InitStruct.Pin = REN_Pin;
 8003c18:	2340      	movs	r3, #64	; 0x40
 8003c1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8003c28:	f107 030c 	add.w	r3, r7, #12
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c32:	f004 fd7f 	bl	8008734 <HAL_GPIO_Init>

	/*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
	 OUT_Pin */
	GPIO_InitStruct.Pin = RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin
 8003c36:	233b      	movs	r3, #59	; 0x3b
 8003c38:	60fb      	str	r3, [r7, #12]
			| OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c46:	f107 030c 	add.w	r3, r7, #12
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4804      	ldr	r0, [pc, #16]	; (8003c60 <MX_GPIO_Init+0xd8>)
 8003c4e:	f004 fd71 	bl	8008734 <HAL_GPIO_Init>

}
 8003c52:	bf00      	nop
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	48000400 	.word	0x48000400

08003c64 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	72fb      	strb	r3, [r7, #11]
 8003c72:	4613      	mov	r3, r2
 8003c74:	72bb      	strb	r3, [r7, #10]
	return 1;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	72fb      	strb	r3, [r7, #11]
 8003c92:	4613      	mov	r3, r2
 8003c94:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003c96:	7afb      	ldrb	r3, [r7, #11]
 8003c98:	3b14      	subs	r3, #20
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d847      	bhi.n	8003d2e <u8x8_byte_i2c+0xaa>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <u8x8_byte_i2c+0x20>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003d33 	.word	0x08003d33
 8003ca8:	08003d2f 	.word	0x08003d2f
 8003cac:	08003d2f 	.word	0x08003d2f
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003d11 	.word	0x08003d11
 8003cbc:	08003d2f 	.word	0x08003d2f
 8003cc0:	08003d2f 	.word	0x08003d2f
 8003cc4:	08003d2f 	.word	0x08003d2f
 8003cc8:	08003d2f 	.word	0x08003d2f
 8003ccc:	08003d2f 	.word	0x08003d2f
 8003cd0:	08003d2f 	.word	0x08003d2f
 8003cd4:	08003d33 	.word	0x08003d33
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 8003cdc:	e010      	b.n	8003d00 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 8003cde:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <u8x8_byte_i2c+0xbc>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	b2d1      	uxtb	r1, r2
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <u8x8_byte_i2c+0xbc>)
 8003ce8:	7011      	strb	r1, [r2, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	7819      	ldrb	r1, [r3, #0]
 8003cf0:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <u8x8_byte_i2c+0xc0>)
 8003cf2:	5499      	strb	r1, [r3, r2]
			data++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003cfa:	7abb      	ldrb	r3, [r7, #10]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 8003d00:	7abb      	ldrb	r3, [r7, #10]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1eb      	bne.n	8003cde <u8x8_byte_i2c+0x5a>
		}
		break;
 8003d06:	e015      	b.n	8003d34 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <u8x8_byte_i2c+0xbc>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
		break;
 8003d0e:	e011      	b.n	8003d34 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d16:	b299      	uxth	r1, r3
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <u8x8_byte_i2c+0xbc>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d22:	9200      	str	r2, [sp, #0]
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <u8x8_byte_i2c+0xc0>)
 8003d26:	4808      	ldr	r0, [pc, #32]	; (8003d48 <u8x8_byte_i2c+0xc4>)
 8003d28:	f004 ff2e 	bl	8008b88 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003d2c:	e002      	b.n	8003d34 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e001      	b.n	8003d36 <u8x8_byte_i2c+0xb2>
		break;
 8003d32:	bf00      	nop
	}

	return 1;
 8003d34:	2301      	movs	r3, #1

}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000654 	.word	0x20000654
 8003d44:	20000658 	.word	0x20000658
 8003d48:	20000450 	.word	0x20000450

08003d4c <main>:
void scanKnob(uint16_t localKnobs, uint16_t prev_Knobs, uint8_t knob_index, char type);
void fill_output_first_half();
void fill_output_second_half();

int main(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b092      	sub	sp, #72	; 0x48
 8003d50:	af02      	add	r7, sp, #8
    /* MCU Configuration--------------------------------------------------------*/
    // Reset of all peripherals, Initializes the Flash interface and the Systick.
    HAL_Init();
 8003d52:	f002 f96e 	bl	8006032 <HAL_Init>
    // Configure the system clock
    SystemClock_Config();
 8003d56:	f7ff fcab 	bl	80036b0 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8003d5a:	f7ff ff15 	bl	8003b88 <MX_GPIO_Init>
    MX_DMA_Init();
 8003d5e:	f7ff fc4f 	bl	8003600 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8003d62:	f7ff fee1 	bl	8003b28 <MX_USART2_UART_Init>
    MX_CAN1_Init();
 8003d66:	f7ff fd69 	bl	800383c <MX_CAN1_Init>
    MX_I2C1_Init();
 8003d6a:	f7ff fddb 	bl	8003924 <MX_I2C1_Init>
    MX_ADC1_Init();
 8003d6e:	f7ff fd01 	bl	8003774 <MX_ADC1_Init>
    MX_DAC1_Init();
 8003d72:	f7ff fd9b 	bl	80038ac <MX_DAC1_Init>
    MX_TIM6_Init();
 8003d76:	f7ff fe19 	bl	80039ac <MX_TIM6_Init>
    MX_TIM7_Init();
 8003d7a:	f7ff fe4d 	bl	8003a18 <MX_TIM7_Init>
    MX_TIM15_Init();
 8003d7e:	f7ff fe81 	bl	8003a84 <MX_TIM15_Init>

    HAL_TIM_Base_Start(&htim7);
 8003d82:	4885      	ldr	r0, [pc, #532]	; (8003f98 <main+0x24c>)
 8003d84:	f006 fcd8 	bl	800a738 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim6);
 8003d88:	4884      	ldr	r0, [pc, #528]	; (8003f9c <main+0x250>)
 8003d8a:	f006 fcd5 	bl	800a738 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim15);
 8003d8e:	4884      	ldr	r0, [pc, #528]	; (8003fa0 <main+0x254>)
 8003d90:	f006 fcd2 	bl	800a738 <HAL_TIM_Base_Start>

    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)DDS_OUT, DDS_OUT_SAMPLES, DAC_ALIGN_12B_R);
 8003d94:	2300      	movs	r3, #0
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9c:	4a81      	ldr	r2, [pc, #516]	; (8003fa4 <main+0x258>)
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4881      	ldr	r0, [pc, #516]	; (8003fa8 <main+0x25c>)
 8003da2:	f003 ffe7 	bl	8007d74 <HAL_DAC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)DDS_OUT, DDS_OUT_SAMPLES, DAC_ALIGN_12B_R);
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dae:	4a7d      	ldr	r2, [pc, #500]	; (8003fa4 <main+0x258>)
 8003db0:	2110      	movs	r1, #16
 8003db2:	487d      	ldr	r0, [pc, #500]	; (8003fa8 <main+0x25c>)
 8003db4:	f003 ffde 	bl	8007d74 <HAL_DAC_Start_DMA>
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

    setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8003db8:	2100      	movs	r1, #0
 8003dba:	2004      	movs	r0, #4
 8003dbc:	f000 f9ec 	bl	8004198 <setOutMuxBit>
    delayMicro(2);
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	f000 f96b 	bl	800409c <delayMicro>
    setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	2004      	movs	r0, #4
 8003dca:	f000 f9e5 	bl	8004198 <setOutMuxBit>
    u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_gpio_and_delay);
 8003dce:	4b77      	ldr	r3, [pc, #476]	; (8003fac <main+0x260>)
 8003dd0:	4a77      	ldr	r2, [pc, #476]	; (8003fb0 <main+0x264>)
 8003dd2:	4978      	ldr	r1, [pc, #480]	; (8003fb4 <main+0x268>)
 8003dd4:	4878      	ldr	r0, [pc, #480]	; (8003fb8 <main+0x26c>)
 8003dd6:	f7fd fbc3 	bl	8001560 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
    u8g2_InitDisplay(&u8g2);
 8003dda:	4877      	ldr	r0, [pc, #476]	; (8003fb8 <main+0x26c>)
 8003ddc:	f7ff f98c 	bl	80030f8 <u8x8_InitDisplay>
    u8g2_ClearDisplay(&u8g2);
 8003de0:	4875      	ldr	r0, [pc, #468]	; (8003fb8 <main+0x26c>)
 8003de2:	f7fd fb97 	bl	8001514 <u8g2_ClearDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8003de6:	2100      	movs	r1, #0
 8003de8:	4873      	ldr	r0, [pc, #460]	; (8003fb8 <main+0x26c>)
 8003dea:	f7ff f994 	bl	8003116 <u8x8_SetPowerSave>
    setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8003dee:	2101      	movs	r1, #1
 8003df0:	2003      	movs	r0, #3
 8003df2:	f000 f9d1 	bl	8004198 <setOutMuxBit>

    setCANFilter(IDin, 0x7ff, 0);
 8003df6:	4b71      	ldr	r3, [pc, #452]	; (8003fbc <main+0x270>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fb1b 	bl	800343c <setCANFilter>
    HAL_CAN_Start(&hcan1);
 8003e06:	486e      	ldr	r0, [pc, #440]	; (8003fc0 <main+0x274>)
 8003e08:	f003 f9f5 	bl	80071f6 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	486c      	ldr	r0, [pc, #432]	; (8003fc0 <main+0x274>)
 8003e10:	f003 fc74 	bl	80076fc <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8003e14:	2101      	movs	r1, #1
 8003e16:	486a      	ldr	r0, [pc, #424]	; (8003fc0 <main+0x274>)
 8003e18:	f003 fc70 	bl	80076fc <HAL_CAN_ActivateNotification>

    serialPrintln("charIOT-Key-C");
 8003e1c:	4869      	ldr	r0, [pc, #420]	; (8003fc4 <main+0x278>)
 8003e1e:	f000 f91f 	bl	8004060 <serialPrintln>

    UID0 = HAL_GetUIDw0();
 8003e22:	f002 f963 	bl	80060ec <HAL_GetUIDw0>
 8003e26:	4603      	mov	r3, r0
 8003e28:	4a67      	ldr	r2, [pc, #412]	; (8003fc8 <main+0x27c>)
 8003e2a:	6013      	str	r3, [r2, #0]

    init_lookup_tables();
 8003e2c:	f001 fa04 	bl	8005238 <init_lookup_tables>
    set_output_waveform(SAWTOOTH);
 8003e30:	2000      	movs	r0, #0
 8003e32:	f001 ff57 	bl	8005ce4 <set_output_waveform>

    // Init scheduler
    osKernelInitialize();
 8003e36:	f007 fdb3 	bl	800b9a0 <osKernelInitialize>

    // Mutex creation
    keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8003e3a:	4864      	ldr	r0, [pc, #400]	; (8003fcc <main+0x280>)
 8003e3c:	f007 ff90 	bl	800bd60 <osMutexNew>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4a63      	ldr	r2, [pc, #396]	; (8003fd0 <main+0x284>)
 8003e44:	6013      	str	r3, [r2, #0]
    knobsMutexHandle = osMutexNew(&knobsMutex_attributes);
 8003e46:	4863      	ldr	r0, [pc, #396]	; (8003fd4 <main+0x288>)
 8003e48:	f007 ff8a 	bl	800bd60 <osMutexNew>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a62      	ldr	r2, [pc, #392]	; (8003fd8 <main+0x28c>)
 8003e50:	6013      	str	r3, [r2, #0]
    readMutexHandle = osMutexNew(&readMutex_attributes);
 8003e52:	4862      	ldr	r0, [pc, #392]	; (8003fdc <main+0x290>)
 8003e54:	f007 ff84 	bl	800bd60 <osMutexNew>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4a61      	ldr	r2, [pc, #388]	; (8003fe0 <main+0x294>)
 8003e5c:	6013      	str	r3, [r2, #0]

    // Add mutexes
    osMutexRelease(keysMutexHandle);
 8003e5e:	4b5c      	ldr	r3, [pc, #368]	; (8003fd0 <main+0x284>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f008 f84d 	bl	800bf02 <osMutexRelease>
    osMutexRelease(knobsMutexHandle);
 8003e68:	4b5b      	ldr	r3, [pc, #364]	; (8003fd8 <main+0x28c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f008 f848 	bl	800bf02 <osMutexRelease>
    osMutexRelease(readMutexHandle);
 8003e72:	4b5b      	ldr	r3, [pc, #364]	; (8003fe0 <main+0x294>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f008 f843 	bl	800bf02 <osMutexRelease>

    // Create semaphores
    const osSemaphoreAttr_t CAN_TX_Semaphore_attributes = {.name = "CAN_TX_Semaphore"};
 8003e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <main+0x298>)
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
    CAN_TX_SemaphoreHandle = osSemaphoreNew(3, 3, &CAN_TX_Semaphore_attributes);
 8003e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e92:	461a      	mov	r2, r3
 8003e94:	2103      	movs	r1, #3
 8003e96:	2003      	movs	r0, #3
 8003e98:	f008 f870 	bl	800bf7c <osSemaphoreNew>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <main+0x29c>)
 8003ea0:	6013      	str	r3, [r2, #0]

    // Add semaphores
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003ea2:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <main+0x29c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f008 f944 	bl	800c134 <osSemaphoreRelease>

    // Create queues
    const osMessageQueueAttr_t msgInQ_attributes = {.name = "msgInQ"};
 8003eac:	f107 0318 	add.w	r3, r7, #24
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
 8003ebc:	615a      	str	r2, [r3, #20]
 8003ebe:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <main+0x2a0>)
 8003ec0:	61bb      	str	r3, [r7, #24]
    const osMessageQueueAttr_t msgOutQ_attributes = {.name = "msgOutQ"};
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
 8003ed0:	615a      	str	r2, [r3, #20]
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <main+0x2a4>)
 8003ed4:	603b      	str	r3, [r7, #0]
    msgInQHandle = osMessageQueueNew(36, sizeof(CanMsg_t), &msgInQ_attributes);
 8003ed6:	f107 0318 	add.w	r3, r7, #24
 8003eda:	461a      	mov	r2, r3
 8003edc:	210c      	movs	r1, #12
 8003ede:	2024      	movs	r0, #36	; 0x24
 8003ee0:	f008 f96c 	bl	800c1bc <osMessageQueueNew>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4a43      	ldr	r2, [pc, #268]	; (8003ff4 <main+0x2a8>)
 8003ee8:	6013      	str	r3, [r2, #0]
    msgOutQHandle = osMessageQueueNew(36, sizeof(CanMsg_t), &msgOutQ_attributes);
 8003eea:	463b      	mov	r3, r7
 8003eec:	461a      	mov	r2, r3
 8003eee:	210c      	movs	r1, #12
 8003ef0:	2024      	movs	r0, #36	; 0x24
 8003ef2:	f008 f963 	bl	800c1bc <osMessageQueueNew>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <main+0x2ac>)
 8003efa:	6013      	str	r3, [r2, #0]

    // Create threads
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003efc:	4a3f      	ldr	r2, [pc, #252]	; (8003ffc <main+0x2b0>)
 8003efe:	2100      	movs	r1, #0
 8003f00:	483f      	ldr	r0, [pc, #252]	; (8004000 <main+0x2b4>)
 8003f02:	f007 fd97 	bl	800ba34 <osThreadNew>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a3e      	ldr	r2, [pc, #248]	; (8004004 <main+0x2b8>)
 8003f0a:	6013      	str	r3, [r2, #0]
#ifdef SCANKEYS_TEST
    scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8003f0c:	4a3e      	ldr	r2, [pc, #248]	; (8004008 <main+0x2bc>)
 8003f0e:	2100      	movs	r1, #0
 8003f10:	483e      	ldr	r0, [pc, #248]	; (800400c <main+0x2c0>)
 8003f12:	f007 fd8f 	bl	800ba34 <osThreadNew>
 8003f16:	4603      	mov	r3, r0
 8003f18:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <main+0x2c4>)
 8003f1a:	6013      	str	r3, [r2, #0]
#endif
#ifdef DISPLAY_TEST
    displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8003f1c:	4a3d      	ldr	r2, [pc, #244]	; (8004014 <main+0x2c8>)
 8003f1e:	2100      	movs	r1, #0
 8003f20:	483d      	ldr	r0, [pc, #244]	; (8004018 <main+0x2cc>)
 8003f22:	f007 fd87 	bl	800ba34 <osThreadNew>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a3c      	ldr	r2, [pc, #240]	; (800401c <main+0x2d0>)
 8003f2a:	6013      	str	r3, [r2, #0]
#endif
#ifdef DECODE_TEST
    decodeTaskHandle = osThreadNew(decode, NULL, &decodeTask_attributes);
 8003f2c:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <main+0x2d4>)
 8003f2e:	2100      	movs	r1, #0
 8003f30:	483c      	ldr	r0, [pc, #240]	; (8004024 <main+0x2d8>)
 8003f32:	f007 fd7f 	bl	800ba34 <osThreadNew>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a3b      	ldr	r2, [pc, #236]	; (8004028 <main+0x2dc>)
 8003f3a:	6013      	str	r3, [r2, #0]
#endif
#ifdef CANTX_TEST
    CAN_TX_TaskNameHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_TaskName_attributes);
 8003f3c:	4a3b      	ldr	r2, [pc, #236]	; (800402c <main+0x2e0>)
 8003f3e:	2100      	movs	r1, #0
 8003f40:	483b      	ldr	r0, [pc, #236]	; (8004030 <main+0x2e4>)
 8003f42:	f007 fd77 	bl	800ba34 <osThreadNew>
 8003f46:	4603      	mov	r3, r0
 8003f48:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <main+0x2e8>)
 8003f4a:	6013      	str	r3, [r2, #0]
#endif
#ifdef HANDSHAKE_TEST
    handshakeTaskHandle = osThreadNew(handshake, NULL, &handshakeTask_attributes);
 8003f4c:	4a3a      	ldr	r2, [pc, #232]	; (8004038 <main+0x2ec>)
 8003f4e:	2100      	movs	r1, #0
 8003f50:	483a      	ldr	r0, [pc, #232]	; (800403c <main+0x2f0>)
 8003f52:	f007 fd6f 	bl	800ba34 <osThreadNew>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a39      	ldr	r2, [pc, #228]	; (8004040 <main+0x2f4>)
 8003f5a:	6013      	str	r3, [r2, #0]
#endif
#ifdef OUTPUT_TEST
    OutputTaskFirstHalfHandle = osThreadNew(fill_output_first_half, NULL, &OutputTask_attributes);
 8003f5c:	4a39      	ldr	r2, [pc, #228]	; (8004044 <main+0x2f8>)
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4839      	ldr	r0, [pc, #228]	; (8004048 <main+0x2fc>)
 8003f62:	f007 fd67 	bl	800ba34 <osThreadNew>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4a38      	ldr	r2, [pc, #224]	; (800404c <main+0x300>)
 8003f6a:	6013      	str	r3, [r2, #0]
    OutputTaskSecondHalfHandle = osThreadNew(fill_output_second_half, NULL, &OutputTask_attributes);
 8003f6c:	4a35      	ldr	r2, [pc, #212]	; (8004044 <main+0x2f8>)
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4837      	ldr	r0, [pc, #220]	; (8004050 <main+0x304>)
 8003f72:	f007 fd5f 	bl	800ba34 <osThreadNew>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4a36      	ldr	r2, [pc, #216]	; (8004054 <main+0x308>)
 8003f7a:	6013      	str	r3, [r2, #0]
#endif

    /* creation of outputFlag */
    outputFlagHandle = osEventFlagsNew(&outputFlag_attributes);
 8003f7c:	4836      	ldr	r0, [pc, #216]	; (8004058 <main+0x30c>)
 8003f7e:	f007 fe06 	bl	800bb8e <osEventFlagsNew>
 8003f82:	4603      	mov	r3, r0
 8003f84:	4a35      	ldr	r2, [pc, #212]	; (800405c <main+0x310>)
 8003f86:	6013      	str	r3, [r2, #0]
#ifdef TIMING_TEST
    __disable_irq();
#endif

    // Start scheduler
    osKernelStart();
 8003f88:	f007 fd2e 	bl	800b9e8 <osKernelStart>
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3740      	adds	r7, #64	; 0x40
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200004f0 	.word	0x200004f0
 8003f9c:	200004a4 	.word	0x200004a4
 8003fa0:	2000053c 	.word	0x2000053c
 8003fa4:	20004800 	.word	0x20004800
 8003fa8:	200003ac 	.word	0x200003ac
 8003fac:	08003c65 	.word	0x08003c65
 8003fb0:	08003c85 	.word	0x08003c85
 8003fb4:	0801f47c 	.word	0x0801f47c
 8003fb8:	200006bc 	.word	0x200006bc
 8003fbc:	0801f4fc 	.word	0x0801f4fc
 8003fc0:	20000384 	.word	0x20000384
 8003fc4:	08012664 	.word	0x08012664
 8003fc8:	20000318 	.word	0x20000318
 8003fcc:	0801f5fc 	.word	0x0801f5fc
 8003fd0:	200006a0 	.word	0x200006a0
 8003fd4:	0801f60c 	.word	0x0801f60c
 8003fd8:	200006a4 	.word	0x200006a4
 8003fdc:	0801f61c 	.word	0x0801f61c
 8003fe0:	20000678 	.word	0x20000678
 8003fe4:	08012674 	.word	0x08012674
 8003fe8:	2000030c 	.word	0x2000030c
 8003fec:	08012688 	.word	0x08012688
 8003ff0:	08012690 	.word	0x08012690
 8003ff4:	20000310 	.word	0x20000310
 8003ff8:	20000314 	.word	0x20000314
 8003ffc:	0801f500 	.word	0x0801f500
 8004000:	080046a9 	.word	0x080046a9
 8004004:	20000680 	.word	0x20000680
 8004008:	0801f524 	.word	0x0801f524
 800400c:	080046b9 	.word	0x080046b9
 8004010:	20000684 	.word	0x20000684
 8004014:	0801f548 	.word	0x0801f548
 8004018:	080047e5 	.word	0x080047e5
 800401c:	20000688 	.word	0x20000688
 8004020:	0801f56c 	.word	0x0801f56c
 8004024:	08003235 	.word	0x08003235
 8004028:	2000068c 	.word	0x2000068c
 800402c:	0801f590 	.word	0x0801f590
 8004030:	080032e9 	.word	0x080032e9
 8004034:	20000690 	.word	0x20000690
 8004038:	0801f5b4 	.word	0x0801f5b4
 800403c:	08003329 	.word	0x08003329
 8004040:	20000694 	.word	0x20000694
 8004044:	0801f5d8 	.word	0x0801f5d8
 8004048:	080040d1 	.word	0x080040d1
 800404c:	20000698 	.word	0x20000698
 8004050:	08004115 	.word	0x08004115
 8004054:	2000069c 	.word	0x2000069c
 8004058:	0801f62c 	.word	0x0801f62c
 800405c:	200006a8 	.word	0x200006a8

08004060 <serialPrintln>:
{
    HAL_UART_Transmit(&huart2, (uint8_t *)val, strlen(val), 10);
}

void serialPrintln(char val[])
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)val, strlen(val), 10);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7fc f8b1 	bl	80001d0 <strlen>
 800406e:	4603      	mov	r3, r0
 8004070:	b29a      	uxth	r2, r3
 8004072:	230a      	movs	r3, #10
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4808      	ldr	r0, [pc, #32]	; (8004098 <serialPrintln+0x38>)
 8004078:	f006 ffde 	bl	800b038 <HAL_UART_Transmit>
    char rn[2] = "\r\n";
 800407c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8004080:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *)rn, 2, 10);
 8004082:	f107 010c 	add.w	r1, r7, #12
 8004086:	230a      	movs	r3, #10
 8004088:	2202      	movs	r2, #2
 800408a:	4803      	ldr	r0, [pc, #12]	; (8004098 <serialPrintln+0x38>)
 800408c:	f006 ffd4 	bl	800b038 <HAL_UART_Transmit>
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000588 	.word	0x20000588

0800409c <delayMicro>:

void delayMicro(uint16_t us)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]
    htim7.Instance->CNT = 0;
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <delayMicro+0x30>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim7.Instance->CNT < us)
 80040ae:	bf00      	nop
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <delayMicro+0x30>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d3f9      	bcc.n	80040b0 <delayMicro+0x14>
        ;
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	200004f0 	.word	0x200004f0

080040d0 <fill_output_first_half>:

/// Task to fill the first half of the DMA output buffer
void fill_output_first_half(void *argument)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
    {

#ifdef TIMING_TEST
        htim15.Instance->CNT = 0;
#else
        osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <fill_output_first_half+0x34>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295
 80040e0:	2200      	movs	r2, #0
 80040e2:	2101      	movs	r1, #1
 80040e4:	f007 fdd6 	bl	800bc94 <osEventFlagsWait>
#endif

        synthesize_output(__atomic_load_n(&keys, __ATOMIC_RELAXED), volume, octave, true);
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <fill_output_first_half+0x38>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b298      	uxth	r0, r3
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <fill_output_first_half+0x3c>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b2d9      	uxtb	r1, r3
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <fill_output_first_half+0x40>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	2301      	movs	r3, #1
 80040fc:	f001 fe9a 	bl	8005e34 <synthesize_output>
        osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 8004100:	e7ea      	b.n	80040d8 <fill_output_first_half+0x8>
 8004102:	bf00      	nop
 8004104:	200006a8 	.word	0x200006a8
 8004108:	2000000c 	.word	0x2000000c
 800410c:	20000012 	.word	0x20000012
 8004110:	20000014 	.word	0x20000014

08004114 <fill_output_second_half>:

    }
}

void fill_output_second_half(void *argument)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
    for (;;)
    {
//#ifdef TIMING_TEST
//        htim15.Instance->CNT = 0;
//#else
        osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <fill_output_second_half+0x34>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	2200      	movs	r2, #0
 8004126:	2101      	movs	r1, #1
 8004128:	f007 fdb4 	bl	800bc94 <osEventFlagsWait>
//#endif

        synthesize_output(__atomic_load_n(&keys, __ATOMIC_RELAXED), volume, octave, false);
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <fill_output_second_half+0x38>)
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b298      	uxth	r0, r3
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <fill_output_second_half+0x3c>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b2d9      	uxtb	r1, r3
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <fill_output_second_half+0x40>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	2300      	movs	r3, #0
 8004140:	f001 fe78 	bl	8005e34 <synthesize_output>
        osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 8004144:	e7ea      	b.n	800411c <fill_output_second_half+0x8>
 8004146:	bf00      	nop
 8004148:	200006a8 	.word	0x200006a8
 800414c:	2000000c 	.word	0x2000000c
 8004150:	20000012 	.word	0x20000012
 8004154:	20000014 	.word	0x20000014

08004158 <HAL_DAC_ConvHalfCpltCallbackCh1>:

    }
}

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    osEventFlagsSet(outputFlagHandle, 0x1);
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f007 fd50 	bl	800bc0c <osEventFlagsSet>
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	200006a8 	.word	0x200006a8

08004178 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    osEventFlagsSet(outputFlagHandle, 0x2);
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f007 fd40 	bl	800bc0c <osEventFlagsSet>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200006a8 	.word	0x200006a8

08004198 <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	460a      	mov	r2, r1
 80041a2:	71fb      	strb	r3, [r7, #7]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80041a8:	2200      	movs	r2, #0
 80041aa:	2140      	movs	r1, #64	; 0x40
 80041ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041b0:	f004 fc42 	bl	8008a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	2101      	movs	r1, #1
 80041c0:	4816      	ldr	r0, [pc, #88]	; (800421c <setOutMuxBit+0x84>)
 80041c2:	f004 fc39 	bl	8008a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	2102      	movs	r1, #2
 80041d2:	4812      	ldr	r0, [pc, #72]	; (800421c <setOutMuxBit+0x84>)
 80041d4:	f004 fc30 	bl	8008a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	2110      	movs	r1, #16
 80041e4:	480d      	ldr	r0, [pc, #52]	; (800421c <setOutMuxBit+0x84>)
 80041e6:	f004 fc27 	bl	8008a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 80041ea:	79bb      	ldrb	r3, [r7, #6]
 80041ec:	461a      	mov	r2, r3
 80041ee:	2120      	movs	r1, #32
 80041f0:	480a      	ldr	r0, [pc, #40]	; (800421c <setOutMuxBit+0x84>)
 80041f2:	f004 fc21 	bl	8008a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 80041f6:	2201      	movs	r2, #1
 80041f8:	2140      	movs	r1, #64	; 0x40
 80041fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fe:	f004 fc1b 	bl	8008a38 <HAL_GPIO_WritePin>
    delayMicro(5);
 8004202:	2005      	movs	r0, #5
 8004204:	f7ff ff4a 	bl	800409c <delayMicro>
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8004208:	2200      	movs	r2, #0
 800420a:	2140      	movs	r1, #64	; 0x40
 800420c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004210:	f004 fc12 	bl	8008a38 <HAL_GPIO_WritePin>
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	48000400 	.word	0x48000400

08004220 <selectRow>:

void selectRow(uint8_t rowIdx)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800422a:	2200      	movs	r2, #0
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004232:	f004 fc01 	bl	8008a38 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	2101      	movs	r1, #1
 8004242:	480c      	ldr	r0, [pc, #48]	; (8004274 <selectRow+0x54>)
 8004244:	f004 fbf8 	bl	8008a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	2102      	movs	r1, #2
 8004254:	4807      	ldr	r0, [pc, #28]	; (8004274 <selectRow+0x54>)
 8004256:	f004 fbef 	bl	8008a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	2110      	movs	r1, #16
 8004266:	4803      	ldr	r0, [pc, #12]	; (8004274 <selectRow+0x54>)
 8004268:	f004 fbe6 	bl	8008a38 <HAL_GPIO_WritePin>
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	48000400 	.word	0x48000400

08004278 <setMuxIO>:

void setMuxIO()
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0

    uint16_t local_keys = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	81fb      	strh	r3, [r7, #14]
    uint16_t local_knobs = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	81bb      	strh	r3, [r7, #12]
    bool local_HKIW = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	72fb      	strb	r3, [r7, #11]
    bool local_HKIE = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	72bb      	strb	r3, [r7, #10]

    for (int r = 0; r < 7; r++)
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e069      	b.n	8004368 <setMuxIO+0xf0>
    {
        selectRow(r);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ffc1 	bl	8004220 <selectRow>
        HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, outbits[r]);
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <setMuxIO+0x118>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	2120      	movs	r1, #32
 80042ac:	4839      	ldr	r0, [pc, #228]	; (8004394 <setMuxIO+0x11c>)
 80042ae:	f004 fbc3 	bl	8008a38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 80042b2:	2201      	movs	r2, #1
 80042b4:	2140      	movs	r1, #64	; 0x40
 80042b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ba:	f004 fbbd 	bl	8008a38 <HAL_GPIO_WritePin>
        delayMicro(5);
 80042be:	2005      	movs	r0, #5
 80042c0:	f7ff feec 	bl	800409c <delayMicro>
        if (r < 3)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	dc0e      	bgt.n	80042e8 <setMuxIO+0x70>
        {
            local_keys |= readCols() << (r * 4);
 80042ca:	f000 f86f 	bl	80043ac <readCols>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	b21a      	sxth	r2, r3
 80042dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b21b      	sxth	r3, r3
 80042e4:	81fb      	strh	r3, [r7, #14]
 80042e6:	e036      	b.n	8004356 <setMuxIO+0xde>
        }
        else if (r < 5)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	dc0f      	bgt.n	800430e <setMuxIO+0x96>
        {
            local_knobs |= (readCols() << ((r - 3) * 4));
 80042ee:	f000 f85d 	bl	80043ac <readCols>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3b03      	subs	r3, #3
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	b21a      	sxth	r2, r3
 8004302:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	b21b      	sxth	r3, r3
 800430a:	81bb      	strh	r3, [r7, #12]
 800430c:	e023      	b.n	8004356 <setMuxIO+0xde>
        }
        else if (r == 5)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d10a      	bne.n	800432a <setMuxIO+0xb2>
        {
            local_HKIW = readCols() >> 3;
 8004314:	f000 f84a 	bl	80043ac <readCols>
 8004318:	4603      	mov	r3, r0
 800431a:	08db      	lsrs	r3, r3, #3
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	72fb      	strb	r3, [r7, #11]
 8004328:	e015      	b.n	8004356 <setMuxIO+0xde>
        }
        else
        {
            local_HKIE = readCols() >> 3;
 800432a:	f000 f83f 	bl	80043ac <readCols>
 800432e:	4603      	mov	r3, r0
 8004330:	08db      	lsrs	r3, r3, #3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	72bb      	strb	r3, [r7, #10]
            selected = ~readCols() & 0x01;
 800433e:	f000 f835 	bl	80043ac <readCols>
 8004342:	4603      	mov	r3, r0
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b11      	ldr	r3, [pc, #68]	; (8004398 <setMuxIO+0x120>)
 8004354:	701a      	strb	r2, [r3, #0]
        }
        HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8004356:	2200      	movs	r2, #0
 8004358:	2140      	movs	r1, #64	; 0x40
 800435a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800435e:	f004 fb6b 	bl	8008a38 <HAL_GPIO_WritePin>
    for (int r = 0; r < 7; r++)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3301      	adds	r3, #1
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b06      	cmp	r3, #6
 800436c:	dd92      	ble.n	8004294 <setMuxIO+0x1c>
    }

    __atomic_store_n(&HKIW, local_HKIW, __ATOMIC_RELAXED);
 800436e:	7afa      	ldrb	r2, [r7, #11]
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <setMuxIO+0x124>)
 8004372:	701a      	strb	r2, [r3, #0]
    __atomic_store_n(&HKIE, local_HKIE, __ATOMIC_RELAXED);
 8004374:	7aba      	ldrb	r2, [r7, #10]
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <setMuxIO+0x128>)
 8004378:	701a      	strb	r2, [r3, #0]
    __atomic_store_n(&keys, local_keys, __ATOMIC_RELAXED);
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <setMuxIO+0x12c>)
 800437c:	89fb      	ldrh	r3, [r7, #14]
 800437e:	8013      	strh	r3, [r2, #0]
    __atomic_store_n(&knobs, local_knobs, __ATOMIC_RELAXED);
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <setMuxIO+0x130>)
 8004382:	89bb      	ldrh	r3, [r7, #12]
 8004384:	8013      	strh	r3, [r2, #0]
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000004 	.word	0x20000004
 8004394:	48000400 	.word	0x48000400
 8004398:	2000067d 	.word	0x2000067d
 800439c:	2000031d 	.word	0x2000031d
 80043a0:	2000031e 	.word	0x2000031e
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	2000000e 	.word	0x2000000e

080043ac <readCols>:

uint8_t readCols()
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0

    uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 80043b2:	2108      	movs	r1, #8
 80043b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043b8:	f004 fb26 	bl	8008a08 <HAL_GPIO_ReadPin>
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
    uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 80043c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043c8:	f004 fb1e 	bl	8008a08 <HAL_GPIO_ReadPin>
 80043cc:	4603      	mov	r3, r0
 80043ce:	71bb      	strb	r3, [r7, #6]
    uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 80043d0:	2180      	movs	r1, #128	; 0x80
 80043d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043d6:	f004 fb17 	bl	8008a08 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	717b      	strb	r3, [r7, #5]
    uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 80043de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043e6:	f004 fb0f 	bl	8008a08 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	713b      	strb	r3, [r7, #4]

    return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80043ee:	793b      	ldrb	r3, [r7, #4]
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	b25a      	sxtb	r2, r3
 80043f4:	797b      	ldrb	r3, [r7, #5]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b25a      	sxtb	r2, r3
 80043fe:	79bb      	ldrb	r3, [r7, #6]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	b25b      	sxtb	r3, r3
 8004404:	4313      	orrs	r3, r2
 8004406:	b25a      	sxtb	r2, r3
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	4313      	orrs	r3, r2
 800440e:	b25b      	sxtb	r3, r3
 8004410:	b2db      	uxtb	r3, r3
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <changeKnobState>:

int16_t changeKnobState(uint8_t knob_state, uint8_t previousKnobState, uint16_t knobRotation, int8_t top_limit,
                        int8_t bottom_limit)
{
 800441a:	b490      	push	{r4, r7}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	4604      	mov	r4, r0
 8004422:	4608      	mov	r0, r1
 8004424:	4611      	mov	r1, r2
 8004426:	461a      	mov	r2, r3
 8004428:	4623      	mov	r3, r4
 800442a:	71fb      	strb	r3, [r7, #7]
 800442c:	4603      	mov	r3, r0
 800442e:	71bb      	strb	r3, [r7, #6]
 8004430:	460b      	mov	r3, r1
 8004432:	80bb      	strh	r3, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	70fb      	strb	r3, [r7, #3]
    int16_t rotation = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	82fb      	strh	r3, [r7, #22]
    int current_knob = knob_state;
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	613b      	str	r3, [r7, #16]
    int prev_knob = previousKnobState;
 8004440:	79bb      	ldrb	r3, [r7, #6]
 8004442:	60fb      	str	r3, [r7, #12]

    // upper and bottom levels for knob
    if ((((prev_knob == 0b11) && (current_knob == 0b10)) || ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d102      	bne.n	8004450 <changeKnobState+0x36>
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d005      	beq.n	800445c <changeKnobState+0x42>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10e      	bne.n	8004474 <changeKnobState+0x5a>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10b      	bne.n	8004474 <changeKnobState+0x5a>
        knobRotation < top_limit)
 800445c:	88ba      	ldrh	r2, [r7, #4]
 800445e:	f997 3003 	ldrsb.w	r3, [r7, #3]
    if ((((prev_knob == 0b11) && (current_knob == 0b10)) || ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 8004462:	429a      	cmp	r2, r3
 8004464:	da06      	bge.n	8004474 <changeKnobState+0x5a>
    {
        rotation++;
 8004466:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800446a:	b29b      	uxth	r3, r3
 800446c:	3301      	adds	r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	82fb      	strh	r3, [r7, #22]
 8004472:	e016      	b.n	80044a2 <changeKnobState+0x88>
    }
    else if ((((prev_knob == 0b01) && (current_knob == 0b00)) || ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <changeKnobState+0x66>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <changeKnobState+0x72>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d10d      	bne.n	80044a2 <changeKnobState+0x88>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d10a      	bne.n	80044a2 <changeKnobState+0x88>
             knobRotation > bottom_limit)
 800448c:	88ba      	ldrh	r2, [r7, #4]
 800448e:	f997 3020 	ldrsb.w	r3, [r7, #32]
    else if ((((prev_knob == 0b01) && (current_knob == 0b00)) || ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 8004492:	429a      	cmp	r2, r3
 8004494:	dd05      	ble.n	80044a2 <changeKnobState+0x88>
    {
        rotation--;
 8004496:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	82fb      	strh	r3, [r7, #22]
    }

    return rotation;
 80044a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc90      	pop	{r4, r7}
 80044ae:	4770      	bx	lr

080044b0 <scanKnob>:

void scanKnob(uint16_t localKnobs, uint16_t prevKnobs, uint8_t knob_index, char type)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b08d      	sub	sp, #52	; 0x34
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	4604      	mov	r4, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	4623      	mov	r3, r4
 80044c0:	80fb      	strh	r3, [r7, #6]
 80044c2:	4603      	mov	r3, r0
 80044c4:	80bb      	strh	r3, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	70fb      	strb	r3, [r7, #3]
 80044ca:	4613      	mov	r3, r2
 80044cc:	70bb      	strb	r3, [r7, #2]
    uint8_t shift_row = (knob_index >= 2) ? 0 : 4;
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d901      	bls.n	80044d8 <scanKnob+0x28>
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <scanKnob+0x2a>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t row = 0xF;
 80044de:	230f      	movs	r3, #15
 80044e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t knob_on_row = 1 - knob_index % 2;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    uint8_t rowKnobStates = (localKnobs >> shift_row) & row;
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044fe:	fa42 f303 	asr.w	r3, r2, r3
 8004502:	b25a      	sxtb	r2, r3
 8004504:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004508:	4013      	ands	r3, r2
 800450a:	b25b      	sxtb	r3, r3
 800450c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t rowPrevKnobStates = (prevKnobs >> shift_row) & row;
 8004510:	88ba      	ldrh	r2, [r7, #4]
 8004512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004516:	fa42 f303 	asr.w	r3, r2, r3
 800451a:	b25a      	sxtb	r2, r3
 800451c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004520:	4013      	ands	r3, r2
 8004522:	b25b      	sxtb	r3, r3
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint8_t knobState = (rowKnobStates >> knob_on_row * 2) & 0b11;
 8004528:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800452c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa42 f303 	asr.w	r3, r2, r3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uint8_t previousKnobState = (rowPrevKnobStates >> knob_on_row * 2) & 0b11;
 8004540:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004544:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	fa42 f303 	asr.w	r3, r2, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    //	UPDATE GLOBAL VARIABLES
    osMutexAcquire(knobsMutexHandle, osWaitForever);
 8004558:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <scanKnob+0x1d4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f04f 31ff 	mov.w	r1, #4294967295
 8004560:	4618      	mov	r0, r3
 8004562:	f007 fc83 	bl	800be6c <osMutexAcquire>
    __atomic_store_n(&knobs, localKnobs, __ATOMIC_RELAXED);
 8004566:	4a48      	ldr	r2, [pc, #288]	; (8004688 <scanKnob+0x1d8>)
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	8013      	strh	r3, [r2, #0]
    osMutexRelease(knobsMutexHandle);
 800456c:	4b45      	ldr	r3, [pc, #276]	; (8004684 <scanKnob+0x1d4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f007 fcc6 	bl	800bf02 <osMutexRelease>

    if (previousKnobState != knobState)
 8004576:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800457a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800457e:	429a      	cmp	r2, r3
 8004580:	d07b      	beq.n	800467a <scanKnob+0x1ca>
    {
        osMutexAcquire(knobsMutexHandle, osWaitForever);
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <scanKnob+0x1d4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f04f 31ff 	mov.w	r1, #4294967295
 800458a:	4618      	mov	r0, r3
 800458c:	f007 fc6e 	bl	800be6c <osMutexAcquire>
        __atomic_store_n(&prev_knobs, localKnobs, __ATOMIC_RELAXED);
 8004590:	4a3e      	ldr	r2, [pc, #248]	; (800468c <scanKnob+0x1dc>)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	8013      	strh	r3, [r2, #0]
        osMutexRelease(knobsMutexHandle);
 8004596:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <scanKnob+0x1d4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f007 fcb1 	bl	800bf02 <osMutexRelease>

        if (type == 'v')
 80045a0:	78bb      	ldrb	r3, [r7, #2]
 80045a2:	2b76      	cmp	r3, #118	; 0x76
 80045a4:	d114      	bne.n	80045d0 <scanKnob+0x120>
        {
            int16_t change_volume = changeKnobState(knobState, previousKnobState, volume, 12, 0);
 80045a6:	4b3a      	ldr	r3, [pc, #232]	; (8004690 <scanKnob+0x1e0>)
 80045a8:	881a      	ldrh	r2, [r3, #0]
 80045aa:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80045ae:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 80045b2:	2300      	movs	r3, #0
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	230c      	movs	r3, #12
 80045b8:	f7ff ff2f 	bl	800441a <changeKnobState>
 80045bc:	4603      	mov	r3, r0
 80045be:	833b      	strh	r3, [r7, #24]
            volume = volume + change_volume;
 80045c0:	4b33      	ldr	r3, [pc, #204]	; (8004690 <scanKnob+0x1e0>)
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	8b3b      	ldrh	r3, [r7, #24]
 80045c6:	4413      	add	r3, r2
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <scanKnob+0x1e0>)
 80045cc:	801a      	strh	r2, [r3, #0]
            int16_t change_wave = changeKnobState(knobState, previousKnobState, output_wavetype, END_WAVETYPE - 1, 0);
            WaveType new_wavetype = (output_wavetype + change_wave) % END_WAVETYPE;
            set_output_waveform(new_wavetype);
        }
    }
}
 80045ce:	e054      	b.n	800467a <scanKnob+0x1ca>
        else if (type == 'o')
 80045d0:	78bb      	ldrb	r3, [r7, #2]
 80045d2:	2b6f      	cmp	r3, #111	; 0x6f
 80045d4:	d129      	bne.n	800462a <scanKnob+0x17a>
            int16_t change_octave = changeKnobState(knobState, previousKnobState, octave, 8,
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <scanKnob+0x1e4>)
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80045de:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 80045e2:	2302      	movs	r3, #2
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2308      	movs	r3, #8
 80045e8:	f7ff ff17 	bl	800441a <changeKnobState>
 80045ec:	4603      	mov	r3, r0
 80045ee:	837b      	strh	r3, [r7, #26]
            octave = octave + change_octave;
 80045f0:	4b28      	ldr	r3, [pc, #160]	; (8004694 <scanKnob+0x1e4>)
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	8b7b      	ldrh	r3, [r7, #26]
 80045f6:	4413      	add	r3, r2
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	4b26      	ldr	r3, [pc, #152]	; (8004694 <scanKnob+0x1e4>)
 80045fc:	801a      	strh	r2, [r3, #0]
            TX.ID = 0x123;
 80045fe:	f240 1323 	movw	r3, #291	; 0x123
 8004602:	617b      	str	r3, [r7, #20]
            TX.Message[0] = OCTAVE_CHANGE;
 8004604:	234f      	movs	r3, #79	; 0x4f
 8004606:	733b      	strb	r3, [r7, #12]
            TX.Message[1] = keyboard_position;
 8004608:	4b23      	ldr	r3, [pc, #140]	; (8004698 <scanKnob+0x1e8>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	737b      	strb	r3, [r7, #13]
            TX.Message[2] = octave;
 8004610:	4b20      	ldr	r3, [pc, #128]	; (8004694 <scanKnob+0x1e4>)
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	73bb      	strb	r3, [r7, #14]
            osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 8004618:	4b20      	ldr	r3, [pc, #128]	; (800469c <scanKnob+0x1ec>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	f107 010c 	add.w	r1, r7, #12
 8004620:	2300      	movs	r3, #0
 8004622:	2200      	movs	r2, #0
 8004624:	f007 fe3e 	bl	800c2a4 <osMessageQueuePut>
}
 8004628:	e027      	b.n	800467a <scanKnob+0x1ca>
        else if (type == 'w')
 800462a:	78bb      	ldrb	r3, [r7, #2]
 800462c:	2b77      	cmp	r3, #119	; 0x77
 800462e:	d124      	bne.n	800467a <scanKnob+0x1ca>
            int16_t change_wave = changeKnobState(knobState, previousKnobState, output_wavetype, END_WAVETYPE - 1, 0);
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <scanKnob+0x1f0>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b29a      	uxth	r2, r3
 8004636:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800463a:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2306      	movs	r3, #6
 8004644:	f7ff fee9 	bl	800441a <changeKnobState>
 8004648:	4603      	mov	r3, r0
 800464a:	83fb      	strh	r3, [r7, #30]
            WaveType new_wavetype = (output_wavetype + change_wave) % END_WAVETYPE;
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <scanKnob+0x1f0>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004656:	441a      	add	r2, r3
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <scanKnob+0x1f4>)
 800465a:	fb83 1302 	smull	r1, r3, r3, r2
 800465e:	4413      	add	r3, r2
 8004660:	1099      	asrs	r1, r3, #2
 8004662:	17d3      	asrs	r3, r2, #31
 8004664:	1ac9      	subs	r1, r1, r3
 8004666:	460b      	mov	r3, r1
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	1a5b      	subs	r3, r3, r1
 800466c:	1ad1      	subs	r1, r2, r3
 800466e:	460b      	mov	r3, r1
 8004670:	777b      	strb	r3, [r7, #29]
            set_output_waveform(new_wavetype);
 8004672:	7f7b      	ldrb	r3, [r7, #29]
 8004674:	4618      	mov	r0, r3
 8004676:	f001 fb35 	bl	8005ce4 <set_output_waveform>
}
 800467a:	bf00      	nop
 800467c:	372c      	adds	r7, #44	; 0x2c
 800467e:	46bd      	mov	sp, r7
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	bf00      	nop
 8004684:	200006a4 	.word	0x200006a4
 8004688:	2000000e 	.word	0x2000000e
 800468c:	20000010 	.word	0x20000010
 8004690:	20000012 	.word	0x20000012
 8004694:	20000014 	.word	0x20000014
 8004698:	2000031c 	.word	0x2000031c
 800469c:	20000314 	.word	0x20000314
 80046a0:	2000007c 	.word	0x2000007c
 80046a4:	92492493 	.word	0x92492493

080046a8 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        vTaskDelay(1);
 80046b0:	2001      	movs	r0, #1
 80046b2:	f009 fc89 	bl	800dfc8 <vTaskDelay>
 80046b6:	e7fb      	b.n	80046b0 <StartDefaultTask+0x8>

080046b8 <scanKeysTask>:

    }
}

void scanKeysTask(void *argument)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
    const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 80046c0:	2332      	movs	r3, #50	; 0x32
 80046c2:	623b      	str	r3, [r7, #32]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80046c4:	f009 fdd2 	bl	800e26c <xTaskGetTickCount>
 80046c8:	4603      	mov	r3, r0
 80046ca:	617b      	str	r3, [r7, #20]

    /* Infinite loop */
    for (;;)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	6a39      	ldr	r1, [r7, #32]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f009 fbfa 	bl	800decc <vTaskDelayUntil>

#ifdef TIMING_TEST
        htim15.Instance->CNT = 0;
#endif

        setMuxIO();
 80046d8:	f7ff fdce 	bl	8004278 <setMuxIO>
        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80046dc:	4b37      	ldr	r3, [pc, #220]	; (80047bc <scanKeysTask+0x104>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	83fb      	strh	r3, [r7, #30]
        uint16_t localKnobs = __atomic_load_n(&knobs, __ATOMIC_RELAXED);
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <scanKeysTask+0x108>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	83bb      	strh	r3, [r7, #28]

        allKeys[keyboard_position] = localKeys;
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <scanKeysTask+0x10c>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	4619      	mov	r1, r3
 80046f0:	4a35      	ldr	r2, [pc, #212]	; (80047c8 <scanKeysTask+0x110>)
 80046f2:	8bfb      	ldrh	r3, [r7, #30]
 80046f4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

        for (int t = 0; t < 12; t++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	e01f      	b.n	800473e <scanKeysTask+0x86>
        {
            bool pressed = ~localKeys & (1 << (t));
 80046fe:	8bfb      	ldrh	r3, [r7, #30]
 8004700:	43da      	mvns	r2, r3
 8004702:	2101      	movs	r1, #1
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	76fb      	strb	r3, [r7, #27]

            if (pressed)
 8004716:	7efb      	ldrb	r3, [r7, #27]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <scanKeysTask+0x76>
            {
                notesPressed[t] = keyNotes[t];
 800471c:	4a2b      	ldr	r2, [pc, #172]	; (80047cc <scanKeysTask+0x114>)
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004724:	492a      	ldr	r1, [pc, #168]	; (80047d0 <scanKeysTask+0x118>)
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800472c:	e004      	b.n	8004738 <scanKeysTask+0x80>
            }
            else
            {
                notesPressed[t] = '-';
 800472e:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <scanKeysTask+0x118>)
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	212d      	movs	r1, #45	; 0x2d
 8004734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int t = 0; t < 12; t++)
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	3301      	adds	r3, #1
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	2b0b      	cmp	r3, #11
 8004742:	dddc      	ble.n	80046fe <scanKeysTask+0x46>
            }
        }

        scanKnob(localKnobs, (uint16_t)prev_knobs, 3, 'v');
 8004744:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <scanKeysTask+0x11c>)
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b299      	uxth	r1, r3
 800474a:	8bb8      	ldrh	r0, [r7, #28]
 800474c:	2376      	movs	r3, #118	; 0x76
 800474e:	2203      	movs	r2, #3
 8004750:	f7ff feae 	bl	80044b0 <scanKnob>
        scanKnob(localKnobs, (uint16_t)prev_knobs, 2, 'o');
 8004754:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <scanKeysTask+0x11c>)
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b299      	uxth	r1, r3
 800475a:	8bb8      	ldrh	r0, [r7, #28]
 800475c:	236f      	movs	r3, #111	; 0x6f
 800475e:	2202      	movs	r2, #2
 8004760:	f7ff fea6 	bl	80044b0 <scanKnob>
        scanKnob(localKnobs, (uint16_t)prev_knobs, 1, 'w');
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <scanKeysTask+0x11c>)
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b299      	uxth	r1, r3
 800476a:	8bb8      	ldrh	r0, [r7, #28]
 800476c:	2377      	movs	r3, #119	; 0x77
 800476e:	2201      	movs	r2, #1
 8004770:	f7ff fe9e 	bl	80044b0 <scanKnob>

        if (!is_receiver)
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <scanKeysTask+0x120>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f083 0301 	eor.w	r3, r3, #1
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <scanKeysTask+0xd0>
        {
            volume = 0;
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <scanKeysTask+0x124>)
 8004784:	2200      	movs	r2, #0
 8004786:	801a      	strh	r2, [r3, #0]
        }

        CanMsg_t TX;

        TX.ID = 0x123;
 8004788:	f240 1323 	movw	r3, #291	; 0x123
 800478c:	613b      	str	r3, [r7, #16]
        TX.Message[0] = 'K';
 800478e:	234b      	movs	r3, #75	; 0x4b
 8004790:	723b      	strb	r3, [r7, #8]
        TX.Message[1] = (uint8_t)(localKeys & 0x00FF);
 8004792:	8bfb      	ldrh	r3, [r7, #30]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	727b      	strb	r3, [r7, #9]
        TX.Message[2] = (uint8_t)((localKeys & 0xFF00) >> 8);
 8004798:	8bfb      	ldrh	r3, [r7, #30]
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	b29b      	uxth	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	72bb      	strb	r3, [r7, #10]
        TX.Message[3] = (uint8_t)keyboard_position;
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <scanKeysTask+0x10c>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	72fb      	strb	r3, [r7, #11]

        osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <scanKeysTask+0x128>)
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	f107 0108 	add.w	r1, r7, #8
 80047b2:	2300      	movs	r3, #0
 80047b4:	2200      	movs	r2, #0
 80047b6:	f007 fd75 	bl	800c2a4 <osMessageQueuePut>
    {
 80047ba:	e787      	b.n	80046cc <scanKeysTask+0x14>
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	2000000e 	.word	0x2000000e
 80047c4:	2000031c 	.word	0x2000031c
 80047c8:	200006ac 	.word	0x200006ac
 80047cc:	20000018 	.word	0x20000018
 80047d0:	20000048 	.word	0x20000048
 80047d4:	20000010 	.word	0x20000010
 80047d8:	2000067c 	.word	0x2000067c
 80047dc:	20000012 	.word	0x20000012
 80047e0:	20000314 	.word	0x20000314

080047e4 <displayUpdateTask>:

    }
}

void displayUpdateTask(void *argument)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b098      	sub	sp, #96	; 0x60
 80047e8:	af04      	add	r7, sp, #16
 80047ea:	6078      	str	r0, [r7, #4]

    const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 80047ec:	2364      	movs	r3, #100	; 0x64
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80047f0:	f009 fd3c 	bl	800e26c <xTaskGetTickCount>
 80047f4:	4603      	mov	r3, r0
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (;;)
    {

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80047f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047fe:	4618      	mov	r0, r3
 8004800:	f009 fb64 	bl	800decc <vTaskDelayUntil>

#ifdef TIMING_TEST
        htim15.Instance->CNT = 0;
#endif

        osMutexAcquire(keysMutexHandle, osWaitForever);
 8004804:	4b88      	ldr	r3, [pc, #544]	; (8004a28 <displayUpdateTask+0x244>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f04f 31ff 	mov.w	r1, #4294967295
 800480c:	4618      	mov	r0, r3
 800480e:	f007 fb2d 	bl	800be6c <osMutexAcquire>
        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8004812:	4b86      	ldr	r3, [pc, #536]	; (8004a2c <displayUpdateTask+0x248>)
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        osMutexRelease(keysMutexHandle);
 800481a:	4b83      	ldr	r3, [pc, #524]	; (8004a28 <displayUpdateTask+0x244>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f007 fb6f 	bl	800bf02 <osMutexRelease>

        osMutexRelease(knobsMutexHandle);
 8004824:	4b82      	ldr	r3, [pc, #520]	; (8004a30 <displayUpdateTask+0x24c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f007 fb6a 	bl	800bf02 <osMutexRelease>

        u8g2_ClearBuffer(&u8g2);
 800482e:	4881      	ldr	r0, [pc, #516]	; (8004a34 <displayUpdateTask+0x250>)
 8004830:	f7fc fc4f 	bl	80010d2 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_new3x9pixelfont_tr);
 8004834:	4980      	ldr	r1, [pc, #512]	; (8004a38 <displayUpdateTask+0x254>)
 8004836:	487f      	ldr	r0, [pc, #508]	; (8004a34 <displayUpdateTask+0x250>)
 8004838:	f7fd fca8 	bl	800218c <u8g2_SetFont>

        // PRINTING THE NOTES PRESSED
        uint8_t string_size = 2;
 800483c:	2302      	movs	r3, #2
 800483e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        uint8_t space = 3;
 8004842:	2303      	movs	r3, #3
 8004844:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
        if (is_receiver)
 8004848:	4b7c      	ldr	r3, [pc, #496]	; (8004a3c <displayUpdateTask+0x258>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <displayUpdateTask+0x7e>
        {
            u8g2_DrawStr(&u8g2, string_size, 7, "|rcv|");
 8004850:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004854:	b299      	uxth	r1, r3
 8004856:	4b7a      	ldr	r3, [pc, #488]	; (8004a40 <displayUpdateTask+0x25c>)
 8004858:	2207      	movs	r2, #7
 800485a:	4876      	ldr	r0, [pc, #472]	; (8004a34 <displayUpdateTask+0x250>)
 800485c:	f7fd fbda 	bl	8002014 <u8g2_DrawStr>
 8004860:	e021      	b.n	80048a6 <displayUpdateTask+0xc2>
        }
        else
        {
            u8g2_DrawStr(&u8g2, string_size, 7, "|snd|");
 8004862:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004866:	b299      	uxth	r1, r3
 8004868:	4b76      	ldr	r3, [pc, #472]	; (8004a44 <displayUpdateTask+0x260>)
 800486a:	2207      	movs	r2, #7
 800486c:	4871      	ldr	r0, [pc, #452]	; (8004a34 <displayUpdateTask+0x250>)
 800486e:	f7fd fbd1 	bl	8002014 <u8g2_DrawStr>
            u8g2_SetDrawColor(&u8g2, 1);
 8004872:	2101      	movs	r1, #1
 8004874:	486f      	ldr	r0, [pc, #444]	; (8004a34 <displayUpdateTask+0x250>)
 8004876:	f7fd fe5b 	bl	8002530 <u8g2_SetDrawColor>
			u8g2_SetBitmapMode(&u8g2, 0);
 800487a:	2100      	movs	r1, #0
 800487c:	486d      	ldr	r0, [pc, #436]	; (8004a34 <displayUpdateTask+0x250>)
 800487e:	f7fc fb85 	bl	8000f8c <u8g2_SetBitmapMode>
			u8g2_DrawButtonUTF8(&u8g2, 35, 16, U8G2_BTN_INV, u8g2_GetDisplayWidth(&u8g2) - 35 * 2, 2, 1,
 8004882:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <displayUpdateTask+0x250>)
 8004884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004888:	3b46      	subs	r3, #70	; 0x46
 800488a:	b29b      	uxth	r3, r3
 800488c:	4a6e      	ldr	r2, [pc, #440]	; (8004a48 <displayUpdateTask+0x264>)
 800488e:	9203      	str	r2, [sp, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	9202      	str	r2, [sp, #8]
 8004894:	2202      	movs	r2, #2
 8004896:	9201      	str	r2, [sp, #4]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	2320      	movs	r3, #32
 800489c:	2210      	movs	r2, #16
 800489e:	2123      	movs	r1, #35	; 0x23
 80048a0:	4864      	ldr	r0, [pc, #400]	; (8004a34 <displayUpdateTask+0x250>)
 80048a2:	f7fc fde3 	bl	800146c <u8g2_DrawButtonUTF8>
								"Knob 0 to receive");
        }

        string_size += 19;
 80048a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048aa:	3313      	adds	r3, #19
 80048ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        for (int t = 0; t < 12; t++)
 80048b0:	2300      	movs	r3, #0
 80048b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b4:	e02a      	b.n	800490c <displayUpdateTask+0x128>
        {
            if (*notesPressed[t] != '-')
 80048b6:	4a65      	ldr	r2, [pc, #404]	; (8004a4c <displayUpdateTask+0x268>)
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b2d      	cmp	r3, #45	; 0x2d
 80048c2:	d020      	beq.n	8004906 <displayUpdateTask+0x122>
            {
                uint8_t w = u8g2_GetStrWidth(&u8g2, keyNotes[t]);
 80048c4:	4a62      	ldr	r2, [pc, #392]	; (8004a50 <displayUpdateTask+0x26c>)
 80048c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	4619      	mov	r1, r3
 80048ce:	4859      	ldr	r0, [pc, #356]	; (8004a34 <displayUpdateTask+0x250>)
 80048d0:	f7fd fcda 	bl	8002288 <u8g2_GetStrWidth>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                u8g2_DrawStr(&u8g2, string_size, 7, notesPressed[t]);
 80048da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048de:	b299      	uxth	r1, r3
 80048e0:	4a5a      	ldr	r2, [pc, #360]	; (8004a4c <displayUpdateTask+0x268>)
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e8:	2207      	movs	r2, #7
 80048ea:	4852      	ldr	r0, [pc, #328]	; (8004a34 <displayUpdateTask+0x250>)
 80048ec:	f7fd fb92 	bl	8002014 <u8g2_DrawStr>
                string_size += w + space;
 80048f0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80048f4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80048f8:	4413      	add	r3, r2
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004900:	4413      	add	r3, r2
 8004902:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        for (int t = 0; t < 12; t++)
 8004906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004908:	3301      	adds	r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	2b0b      	cmp	r3, #11
 8004910:	ddd1      	ble.n	80048b6 <displayUpdateTask+0xd2>
            }
        }

        // PRINTING VOLUME
        u8g2_DrawButtonUTF8(&u8g2, 105, 30, U8G2_BTN_BW1, 18, 4, 2, "Vol:");
 8004912:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <displayUpdateTask+0x270>)
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	2302      	movs	r3, #2
 8004918:	9302      	str	r3, [sp, #8]
 800491a:	2304      	movs	r3, #4
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	2312      	movs	r3, #18
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2301      	movs	r3, #1
 8004924:	221e      	movs	r2, #30
 8004926:	2169      	movs	r1, #105	; 0x69
 8004928:	4842      	ldr	r0, [pc, #264]	; (8004a34 <displayUpdateTask+0x250>)
 800492a:	f7fc fd9f 	bl	800146c <u8g2_DrawButtonUTF8>
        char volume_s[16];
        sprintf(volume_s, "%x", volume);
 800492e:	4b4a      	ldr	r3, [pc, #296]	; (8004a58 <displayUpdateTask+0x274>)
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004938:	4948      	ldr	r1, [pc, #288]	; (8004a5c <displayUpdateTask+0x278>)
 800493a:	4618      	mov	r0, r3
 800493c:	f00b fb8e 	bl	801005c <siprintf>
        u8g2_DrawStr(&u8g2, 118, 30, volume_s);
 8004940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004944:	221e      	movs	r2, #30
 8004946:	2176      	movs	r1, #118	; 0x76
 8004948:	483a      	ldr	r0, [pc, #232]	; (8004a34 <displayUpdateTask+0x250>)
 800494a:	f7fd fb63 	bl	8002014 <u8g2_DrawStr>

        // PRINTING Octave
        u8g2_DrawButtonUTF8(&u8g2, 75, 30, U8G2_BTN_BW1, 18, 4, 2, "Oct:");
 800494e:	4b44      	ldr	r3, [pc, #272]	; (8004a60 <displayUpdateTask+0x27c>)
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	2302      	movs	r3, #2
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	2304      	movs	r3, #4
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	2312      	movs	r3, #18
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	221e      	movs	r2, #30
 8004962:	214b      	movs	r1, #75	; 0x4b
 8004964:	4833      	ldr	r0, [pc, #204]	; (8004a34 <displayUpdateTask+0x250>)
 8004966:	f7fc fd81 	bl	800146c <u8g2_DrawButtonUTF8>
        char s[16];
        sprintf(s, "%x", octave);
 800496a:	4b3e      	ldr	r3, [pc, #248]	; (8004a64 <displayUpdateTask+0x280>)
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	f107 031c 	add.w	r3, r7, #28
 8004974:	4939      	ldr	r1, [pc, #228]	; (8004a5c <displayUpdateTask+0x278>)
 8004976:	4618      	mov	r0, r3
 8004978:	f00b fb70 	bl	801005c <siprintf>
        u8g2_DrawStr(&u8g2, 89, 30, s);
 800497c:	f107 031c 	add.w	r3, r7, #28
 8004980:	221e      	movs	r2, #30
 8004982:	2159      	movs	r1, #89	; 0x59
 8004984:	482b      	ldr	r0, [pc, #172]	; (8004a34 <displayUpdateTask+0x250>)
 8004986:	f7fd fb45 	bl	8002014 <u8g2_DrawStr>

        // PRINTING WAVE_FORM
        u8g2_DrawButtonUTF8(&u8g2, 33, 30, 0, 30, 4, 3, "Wave:");
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <displayUpdateTask+0x284>)
 800498c:	9303      	str	r3, [sp, #12]
 800498e:	2303      	movs	r3, #3
 8004990:	9302      	str	r3, [sp, #8]
 8004992:	2304      	movs	r3, #4
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	231e      	movs	r3, #30
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2300      	movs	r3, #0
 800499c:	221e      	movs	r2, #30
 800499e:	2121      	movs	r1, #33	; 0x21
 80049a0:	4824      	ldr	r0, [pc, #144]	; (8004a34 <displayUpdateTask+0x250>)
 80049a2:	f7fc fd63 	bl	800146c <u8g2_DrawButtonUTF8>
        char wave_s[16];
        sprintf(wave_s, "%x", output_wavetype);
 80049a6:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <displayUpdateTask+0x288>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f107 030c 	add.w	r3, r7, #12
 80049b0:	492a      	ldr	r1, [pc, #168]	; (8004a5c <displayUpdateTask+0x278>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f00b fb52 	bl	801005c <siprintf>
        // u8g2_DrawStr(&u8g2, 61, 30, wave_s);
        display_wave(&u8g2, 51, 30);
 80049b8:	221e      	movs	r2, #30
 80049ba:	2133      	movs	r1, #51	; 0x33
 80049bc:	481d      	ldr	r0, [pc, #116]	; (8004a34 <displayUpdateTask+0x250>)
 80049be:	f001 f9b7 	bl	8005d30 <display_wave>

        // PRINTING PET
        u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 80049c2:	492b      	ldr	r1, [pc, #172]	; (8004a70 <displayUpdateTask+0x28c>)
 80049c4:	481b      	ldr	r0, [pc, #108]	; (8004a34 <displayUpdateTask+0x250>)
 80049c6:	f7fd fbe1 	bl	800218c <u8g2_SetFont>
        if (localKeys == 0x0FFF)
 80049ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10a      	bne.n	80049ec <displayUpdateTask+0x208>
        {

            // u8g2_DrawStr(&u8g2, 70, 10, "- ^_^ -");
            u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t);
 80049d6:	4927      	ldr	r1, [pc, #156]	; (8004a74 <displayUpdateTask+0x290>)
 80049d8:	4816      	ldr	r0, [pc, #88]	; (8004a34 <displayUpdateTask+0x250>)
 80049da:	f7fd fbd7 	bl	800218c <u8g2_SetFont>
            u8g2_DrawUTF8(&u8g2, 2, 30, " \u029a");
 80049de:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <displayUpdateTask+0x294>)
 80049e0:	221e      	movs	r2, #30
 80049e2:	2102      	movs	r1, #2
 80049e4:	4813      	ldr	r0, [pc, #76]	; (8004a34 <displayUpdateTask+0x250>)
 80049e6:	f7fd fb2f 	bl	8002048 <u8g2_DrawUTF8>
 80049ea:	e019      	b.n	8004a20 <displayUpdateTask+0x23c>
        }
        else
        {
            // u8g2_DrawStr(&u8g2, 70, 10, "- ^0^ -");
            u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t); // 21x21
 80049ec:	4921      	ldr	r1, [pc, #132]	; (8004a74 <displayUpdateTask+0x290>)
 80049ee:	4811      	ldr	r0, [pc, #68]	; (8004a34 <displayUpdateTask+0x250>)
 80049f0:	f7fd fbcc 	bl	800218c <u8g2_SetFont>
            u8g2_DrawUTF8(&u8g2, 2, 30, " \u0299");
 80049f4:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <displayUpdateTask+0x298>)
 80049f6:	221e      	movs	r2, #30
 80049f8:	2102      	movs	r1, #2
 80049fa:	480e      	ldr	r0, [pc, #56]	; (8004a34 <displayUpdateTask+0x250>)
 80049fc:	f7fd fb24 	bl	8002048 <u8g2_DrawUTF8>
            u8g2_SetFont(&u8g2, u8g2_font_unifont_t_0_76); // 16x16
 8004a00:	491f      	ldr	r1, [pc, #124]	; (8004a80 <displayUpdateTask+0x29c>)
 8004a02:	480c      	ldr	r0, [pc, #48]	; (8004a34 <displayUpdateTask+0x250>)
 8004a04:	f7fd fbc2 	bl	800218c <u8g2_SetFont>
            u8g2_DrawUTF8(&u8g2, 16, 27, " \u266a");
 8004a08:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <displayUpdateTask+0x2a0>)
 8004a0a:	221b      	movs	r2, #27
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	4809      	ldr	r0, [pc, #36]	; (8004a34 <displayUpdateTask+0x250>)
 8004a10:	f7fd fb1a 	bl	8002048 <u8g2_DrawUTF8>
            u8g2_DrawUTF8(&u8g2, 13, 19, " \u266a");
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <displayUpdateTask+0x2a0>)
 8004a16:	2213      	movs	r2, #19
 8004a18:	210d      	movs	r1, #13
 8004a1a:	4806      	ldr	r0, [pc, #24]	; (8004a34 <displayUpdateTask+0x250>)
 8004a1c:	f7fd fb14 	bl	8002048 <u8g2_DrawUTF8>
        }

        u8g2_SendBuffer(&u8g2);
 8004a20:	4804      	ldr	r0, [pc, #16]	; (8004a34 <displayUpdateTask+0x250>)
 8004a22:	f7fc fbc9 	bl	80011b8 <u8g2_SendBuffer>
    {
 8004a26:	e6e7      	b.n	80047f8 <displayUpdateTask+0x14>
 8004a28:	200006a0 	.word	0x200006a0
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	200006a4 	.word	0x200006a4
 8004a34:	200006bc 	.word	0x200006bc
 8004a38:	0801dd04 	.word	0x0801dd04
 8004a3c:	2000067c 	.word	0x2000067c
 8004a40:	08012698 	.word	0x08012698
 8004a44:	080126a0 	.word	0x080126a0
 8004a48:	080126a8 	.word	0x080126a8
 8004a4c:	20000048 	.word	0x20000048
 8004a50:	20000018 	.word	0x20000018
 8004a54:	080126bc 	.word	0x080126bc
 8004a58:	20000012 	.word	0x20000012
 8004a5c:	080126c4 	.word	0x080126c4
 8004a60:	080126c8 	.word	0x080126c8
 8004a64:	20000014 	.word	0x20000014
 8004a68:	080126d0 	.word	0x080126d0
 8004a6c:	2000007c 	.word	0x2000007c
 8004a70:	0801efec 	.word	0x0801efec
 8004a74:	08013d64 	.word	0x08013d64
 8004a78:	080126d8 	.word	0x080126d8
 8004a7c:	080126dc 	.word	0x080126dc
 8004a80:	0801e010 	.word	0x0801e010
 8004a84:	080126e0 	.word	0x080126e0

08004a88 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM16)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8004a9a:	f001 fae3 	bl	8006064 <HAL_IncTick>
    }
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40014400 	.word	0x40014400

08004aac <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab0:	b672      	cpsid	i
}
 8004ab2:	bf00      	nop
    __disable_irq();
    while (1)
 8004ab4:	e7fe      	b.n	8004ab4 <Error_Handler+0x8>
	...

08004ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac2:	4a10      	ldr	r2, [pc, #64]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8004aca:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_MspInit+0x4c>)
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <HAL_MspInit+0x4c>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004aee:	2200      	movs	r2, #0
 8004af0:	210f      	movs	r1, #15
 8004af2:	f06f 0001 	mvn.w	r0, #1
 8004af6:	f003 f8f1 	bl	8007cdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000

08004b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b09e      	sub	sp, #120	; 0x78
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b20:	f107 0310 	add.w	r3, r7, #16
 8004b24:	2254      	movs	r2, #84	; 0x54
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f00b f981 	bl	800fe30 <memset>
  if(hadc->Instance==ADC1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <HAL_ADC_MspInit+0xc0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d143      	bne.n	8004bc0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004b3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b42:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004b44:	2301      	movs	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004b50:	2307      	movs	r3, #7
 8004b52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004b54:	2302      	movs	r3, #2
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b62:	f107 0310 	add.w	r3, r7, #16
 8004b66:	4618      	mov	r0, r3
 8004b68:	f005 fa96 	bl	800a098 <HAL_RCCEx_PeriphCLKConfig>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8004b72:	f7ff ff9b 	bl	8004aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <HAL_ADC_MspInit+0xc4>)
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <HAL_ADC_MspInit+0xc4>)
 8004b7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_ADC_MspInit+0xc4>)
 8004b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <HAL_ADC_MspInit+0xc4>)
 8004b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <HAL_ADC_MspInit+0xc4>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_ADC_MspInit+0xc4>)
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004baa:	230b      	movs	r3, #11
 8004bac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bbc:	f003 fdba 	bl	8008734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bc0:	bf00      	nop
 8004bc2:	3778      	adds	r7, #120	; 0x78
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	50040000 	.word	0x50040000
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	f107 0314 	add.w	r3, r7, #20
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <HAL_CAN_MspInit+0xc4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d14b      	bne.n	8004c8a <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004bf2:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_CAN_MspInit+0xc8>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <HAL_CAN_MspInit+0xc8>)
 8004bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <HAL_CAN_MspInit+0xc8>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_CAN_MspInit+0xc8>)
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <HAL_CAN_MspInit+0xc8>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_CAN_MspInit+0xc8>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c30:	2301      	movs	r3, #1
 8004c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c34:	2309      	movs	r3, #9
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c42:	f003 fd77 	bl	8008734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c54:	2301      	movs	r3, #1
 8004c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c58:	2309      	movs	r3, #9
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4619      	mov	r1, r3
 8004c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c66:	f003 fd65 	bl	8008734 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2106      	movs	r1, #6
 8004c6e:	2013      	movs	r0, #19
 8004c70:	f003 f834 	bl	8007cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004c74:	2013      	movs	r0, #19
 8004c76:	f003 f84d 	bl	8007d14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2106      	movs	r1, #6
 8004c7e:	2014      	movs	r0, #20
 8004c80:	f003 f82c 	bl	8007cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004c84:	2014      	movs	r0, #20
 8004c86:	f003 f845 	bl	8007d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004c8a:	bf00      	nop
 8004c8c:	3728      	adds	r7, #40	; 0x28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40006400 	.word	0x40006400
 8004c98:	40021000 	.word	0x40021000

08004c9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a46      	ldr	r2, [pc, #280]	; (8004dd4 <HAL_DAC_MspInit+0x138>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f040 8085 	bne.w	8004dca <HAL_DAC_MspInit+0x12e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004cc0:	4b45      	ldr	r3, [pc, #276]	; (8004dd8 <HAL_DAC_MspInit+0x13c>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4a44      	ldr	r2, [pc, #272]	; (8004dd8 <HAL_DAC_MspInit+0x13c>)
 8004cc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ccc:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <HAL_DAC_MspInit+0x13c>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd8:	4b3f      	ldr	r3, [pc, #252]	; (8004dd8 <HAL_DAC_MspInit+0x13c>)
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	4a3e      	ldr	r2, [pc, #248]	; (8004dd8 <HAL_DAC_MspInit+0x13c>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ce4:	4b3c      	ldr	r3, [pc, #240]	; (8004dd8 <HAL_DAC_MspInit+0x13c>)
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8004cf0:	2330      	movs	r3, #48	; 0x30
 8004cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4619      	mov	r1, r3
 8004d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d06:	f003 fd15 	bl	8008734 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004d0a:	4b34      	ldr	r3, [pc, #208]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d0c:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <HAL_DAC_MspInit+0x144>)
 8004d0e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8004d10:	4b32      	ldr	r3, [pc, #200]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d12:	2206      	movs	r2, #6
 8004d14:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d16:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d18:	2210      	movs	r2, #16
 8004d1a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d1c:	4b2f      	ldr	r3, [pc, #188]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004d22:	4b2e      	ldr	r3, [pc, #184]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d24:	2280      	movs	r2, #128	; 0x80
 8004d26:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d28:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d2e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d30:	4b2a      	ldr	r3, [pc, #168]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d36:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8004d38:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8004d3e:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004d46:	4825      	ldr	r0, [pc, #148]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d48:	f003 fafc 	bl	8008344 <HAL_DMA_Init>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_DAC_MspInit+0xba>
    {
      Error_Handler();
 8004d52:	f7ff feab 	bl	8004aac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <HAL_DAC_MspInit+0x140>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d64:	4a20      	ldr	r2, [pc, #128]	; (8004de8 <HAL_DAC_MspInit+0x14c>)
 8004d66:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d6a:	2205      	movs	r2, #5
 8004d6c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d6e:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d70:	2210      	movs	r2, #16
 8004d72:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d86:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d8e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8004d96:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8004d9e:	4811      	ldr	r0, [pc, #68]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004da0:	f003 fad0 	bl	8008344 <HAL_DMA_Init>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 8004daa:	f7ff fe7f 	bl	8004aac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a0c      	ldr	r2, [pc, #48]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <HAL_DAC_MspInit+0x148>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2105      	movs	r1, #5
 8004dbe:	2036      	movs	r0, #54	; 0x36
 8004dc0:	f002 ff8c 	bl	8007cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dc4:	2036      	movs	r0, #54	; 0x36
 8004dc6:	f002 ffa5 	bl	8007d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004dca:	bf00      	nop
 8004dcc:	3728      	adds	r7, #40	; 0x28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40007400 	.word	0x40007400
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	200003c0 	.word	0x200003c0
 8004de0:	40020030 	.word	0x40020030
 8004de4:	20000408 	.word	0x20000408
 8004de8:	40020044 	.word	0x40020044

08004dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b09e      	sub	sp, #120	; 0x78
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e04:	f107 0310 	add.w	r3, r7, #16
 8004e08:	2254      	movs	r2, #84	; 0x54
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f00b f80f 	bl	800fe30 <memset>
  if(hi2c->Instance==I2C1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_I2C_MspInit+0xa4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d135      	bne.n	8004e88 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004e1c:	2340      	movs	r3, #64	; 0x40
 8004e1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e24:	f107 0310 	add.w	r3, r7, #16
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f005 f935 	bl	800a098 <HAL_RCCEx_PeriphCLKConfig>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004e34:	f7ff fe3a 	bl	8004aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e38:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <HAL_I2C_MspInit+0xa8>)
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <HAL_I2C_MspInit+0xa8>)
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_I2C_MspInit+0xa8>)
 8004e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e50:	23c0      	movs	r3, #192	; 0xc0
 8004e52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e54:	2312      	movs	r3, #18
 8004e56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e60:	2304      	movs	r3, #4
 8004e62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e68:	4619      	mov	r1, r3
 8004e6a:	480b      	ldr	r0, [pc, #44]	; (8004e98 <HAL_I2C_MspInit+0xac>)
 8004e6c:	f003 fc62 	bl	8008734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <HAL_I2C_MspInit+0xa8>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <HAL_I2C_MspInit+0xa8>)
 8004e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_I2C_MspInit+0xa8>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e88:	bf00      	nop
 8004e8a:	3778      	adds	r7, #120	; 0x78
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40005400 	.word	0x40005400
 8004e94:	40021000 	.word	0x40021000
 8004e98:	48000400 	.word	0x48000400

08004e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_TIM_Base_MspInit+0x8c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d114      	bne.n	8004ed8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004eb4:	f043 0310 	orr.w	r3, r3, #16
 8004eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eba:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2105      	movs	r1, #5
 8004eca:	2036      	movs	r0, #54	; 0x36
 8004ecc:	f002 ff06 	bl	8007cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ed0:	2036      	movs	r0, #54	; 0x36
 8004ed2:	f002 ff1f 	bl	8007d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004ed6:	e022      	b.n	8004f1e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a14      	ldr	r2, [pc, #80]	; (8004f30 <HAL_TIM_Base_MspInit+0x94>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d10c      	bne.n	8004efc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	4a11      	ldr	r2, [pc, #68]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004ee8:	f043 0320 	orr.w	r3, r3, #32
 8004eec:	6593      	str	r3, [r2, #88]	; 0x58
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]
}
 8004efa:	e010      	b.n	8004f1e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <HAL_TIM_Base_MspInit+0x98>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10b      	bne.n	8004f1e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f10:	6613      	str	r3, [r2, #96]	; 0x60
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_TIM_Base_MspInit+0x90>)
 8004f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40001000 	.word	0x40001000
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40001400 	.word	0x40001400
 8004f34:	40014000 	.word	0x40014000

08004f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b09e      	sub	sp, #120	; 0x78
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	2254      	movs	r2, #84	; 0x54
 8004f56:	2100      	movs	r1, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f00a ff69 	bl	800fe30 <memset>
  if(huart->Instance==USART2)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a28      	ldr	r2, [pc, #160]	; (8005004 <HAL_UART_MspInit+0xcc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d148      	bne.n	8004ffa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f70:	f107 0310 	add.w	r3, r7, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f005 f88f 	bl	800a098 <HAL_RCCEx_PeriphCLKConfig>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f80:	f7ff fd94 	bl	8004aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f84:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_UART_MspInit+0xd0>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <HAL_UART_MspInit+0xd0>)
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_UART_MspInit+0xd0>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <HAL_UART_MspInit+0xd0>)
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	4a19      	ldr	r2, [pc, #100]	; (8005008 <HAL_UART_MspInit+0xd0>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <HAL_UART_MspInit+0xd0>)
 8004faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fc4:	2307      	movs	r3, #7
 8004fc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fd2:	f003 fbaf 	bl	8008734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff6:	f003 fb9d 	bl	8008734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ffa:	bf00      	nop
 8004ffc:	3778      	adds	r7, #120	; 0x78
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40004400 	.word	0x40004400
 8005008:	40021000 	.word	0x40021000

0800500c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08c      	sub	sp, #48	; 0x30
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_InitTick+0xc8>)
 800501c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501e:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <HAL_InitTick+0xc8>)
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	6613      	str	r3, [r2, #96]	; 0x60
 8005026:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_InitTick+0xc8>)
 8005028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005032:	f107 020c 	add.w	r2, r7, #12
 8005036:	f107 0310 	add.w	r3, r7, #16
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f004 ff99 	bl	8009f74 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005042:	f004 ff81 	bl	8009f48 <HAL_RCC_GetPCLK2Freq>
 8005046:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	4a23      	ldr	r2, [pc, #140]	; (80050d8 <HAL_InitTick+0xcc>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	0c9b      	lsrs	r3, r3, #18
 8005052:	3b01      	subs	r3, #1
 8005054:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8005056:	4b21      	ldr	r3, [pc, #132]	; (80050dc <HAL_InitTick+0xd0>)
 8005058:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <HAL_InitTick+0xd4>)
 800505a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800505c:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <HAL_InitTick+0xd0>)
 800505e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005062:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_InitTick+0xd0>)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800506a:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <HAL_InitTick+0xd0>)
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <HAL_InitTick+0xd0>)
 8005072:	2200      	movs	r2, #0
 8005074:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005076:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_InitTick+0xd0>)
 8005078:	2200      	movs	r2, #0
 800507a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800507c:	4817      	ldr	r0, [pc, #92]	; (80050dc <HAL_InitTick+0xd0>)
 800507e:	f005 fb03 	bl	800a688 <HAL_TIM_Base_Init>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800508c:	2b00      	cmp	r3, #0
 800508e:	d11b      	bne.n	80050c8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8005090:	4812      	ldr	r0, [pc, #72]	; (80050dc <HAL_InitTick+0xd0>)
 8005092:	f005 fb9d 	bl	800a7d0 <HAL_TIM_Base_Start_IT>
 8005096:	4603      	mov	r3, r0
 8005098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800509c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d111      	bne.n	80050c8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80050a4:	2019      	movs	r0, #25
 80050a6:	f002 fe35 	bl	8007d14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b0f      	cmp	r3, #15
 80050ae:	d808      	bhi.n	80050c2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80050b0:	2200      	movs	r2, #0
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	2019      	movs	r0, #25
 80050b6:	f002 fe11 	bl	8007cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050ba:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <HAL_InitTick+0xd8>)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e002      	b.n	80050c8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80050c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3730      	adds	r7, #48	; 0x30
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000
 80050d8:	431bde83 	.word	0x431bde83
 80050dc:	20000750 	.word	0x20000750
 80050e0:	40014400 	.word	0x40014400
 80050e4:	20000080 	.word	0x20000080

080050e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050ec:	e7fe      	b.n	80050ec <NMI_Handler+0x4>

080050ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050f2:	e7fe      	b.n	80050f2 <HardFault_Handler+0x4>

080050f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050f8:	e7fe      	b.n	80050f8 <MemManage_Handler+0x4>

080050fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050fa:	b480      	push	{r7}
 80050fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050fe:	e7fe      	b.n	80050fe <BusFault_Handler+0x4>

08005100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005104:	e7fe      	b.n	8005104 <UsageFault_Handler+0x4>

08005106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800510a:	bf00      	nop
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8005118:	4802      	ldr	r0, [pc, #8]	; (8005124 <DMA1_Channel1_IRQHandler+0x10>)
 800511a:	f003 fa2b 	bl	8008574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2000060c 	.word	0x2000060c

08005128 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800512c:	4802      	ldr	r0, [pc, #8]	; (8005138 <DMA1_Channel3_IRQHandler+0x10>)
 800512e:	f003 fa21 	bl	8008574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200003c0 	.word	0x200003c0

0800513c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8005140:	4802      	ldr	r0, [pc, #8]	; (800514c <DMA1_Channel4_IRQHandler+0x10>)
 8005142:	f003 fa17 	bl	8008574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000408 	.word	0x20000408

08005150 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005154:	4802      	ldr	r0, [pc, #8]	; (8005160 <CAN1_TX_IRQHandler+0x10>)
 8005156:	f002 faf7 	bl	8007748 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000384 	.word	0x20000384

08005164 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005168:	4802      	ldr	r0, [pc, #8]	; (8005174 <CAN1_RX0_IRQHandler+0x10>)
 800516a:	f002 faed 	bl	8007748 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000384 	.word	0x20000384

08005178 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800517c:	4802      	ldr	r0, [pc, #8]	; (8005188 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800517e:	f005 fb7b 	bl	800a878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005182:	bf00      	nop
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000750 	.word	0x20000750

0800518c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005190:	4803      	ldr	r0, [pc, #12]	; (80051a0 <TIM6_DAC_IRQHandler+0x14>)
 8005192:	f005 fb71 	bl	800a878 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8005196:	4803      	ldr	r0, [pc, #12]	; (80051a4 <TIM6_DAC_IRQHandler+0x18>)
 8005198:	f002 feb8 	bl	8007f0c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800519c:	bf00      	nop
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200004a4 	.word	0x200004a4
 80051a4:	200003ac 	.word	0x200003ac

080051a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <_sbrk+0x5c>)
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <_sbrk+0x60>)
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <_sbrk+0x64>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <_sbrk+0x64>)
 80051c6:	4a12      	ldr	r2, [pc, #72]	; (8005210 <_sbrk+0x68>)
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <_sbrk+0x64>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d207      	bcs.n	80051e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051d8:	f00a fdf0 	bl	800fdbc <__errno>
 80051dc:	4603      	mov	r3, r0
 80051de:	220c      	movs	r2, #12
 80051e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	e009      	b.n	80051fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051e8:	4b08      	ldr	r3, [pc, #32]	; (800520c <_sbrk+0x64>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	4a05      	ldr	r2, [pc, #20]	; (800520c <_sbrk+0x64>)
 80051f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20010000 	.word	0x20010000
 8005208:	00000400 	.word	0x00000400
 800520c:	2000079c 	.word	0x2000079c
 8005210:	20009338 	.word	0x20009338

08005214 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <SystemInit+0x20>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	4a05      	ldr	r2, [pc, #20]	; (8005234 <SystemInit+0x20>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <init_lookup_tables>:

// Initialize the contents of the all the LUTs
// This means generating the different instrument waveforms

void init_lookup_tables()
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0

    for (int t = 0; t < 12; t++)
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	e03c      	b.n	80052be <init_lookup_tables+0x86>
    {
        DDS_steps[t] = 3520.0 * pow(2, (t - 9) / 12.0) / 44100 * 65536.0;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3b09      	subs	r3, #9
 8005248:	4618      	mov	r0, r3
 800524a:	f7fb f96b 	bl	8000524 <__aeabi_i2d>
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <init_lookup_tables+0xd0>)
 8005254:	f7fb fafa 	bl	800084c <__aeabi_ddiv>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	ec43 2b17 	vmov	d7, r2, r3
 8005260:	eeb0 1a47 	vmov.f32	s2, s14
 8005264:	eef0 1a67 	vmov.f32	s3, s15
 8005268:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80052f8 <init_lookup_tables+0xc0>
 800526c:	f00b fb08 	bl	8010880 <pow>
 8005270:	ec51 0b10 	vmov	r0, r1, d0
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <init_lookup_tables+0xd4>)
 800527a:	f7fb f9bd 	bl	80005f8 <__aeabi_dmul>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	a31e      	add	r3, pc, #120	; (adr r3, 8005300 <init_lookup_tables+0xc8>)
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f7fb fade 	bl	800084c <__aeabi_ddiv>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <init_lookup_tables+0xd8>)
 800529e:	f7fb f9ab 	bl	80005f8 <__aeabi_dmul>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	f7fb fc7d 	bl	8000ba8 <__aeabi_d2uiz>
 80052ae:	4602      	mov	r2, r0
 80052b0:	4918      	ldr	r1, [pc, #96]	; (8005314 <init_lookup_tables+0xdc>)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int t = 0; t < 12; t++)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3301      	adds	r3, #1
 80052bc:	607b      	str	r3, [r7, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b0b      	cmp	r3, #11
 80052c2:	ddbf      	ble.n	8005244 <init_lookup_tables+0xc>
    }

    for (WaveType type = 0; type < END_WAVETYPE; type++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	70fb      	strb	r3, [r7, #3]
 80052c8:	e00b      	b.n	80052e2 <init_lookup_tables+0xaa>
    {
        generate_waveform(DDS_LUT[type], type);
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	02db      	lsls	r3, r3, #11
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <init_lookup_tables+0xe0>)
 80052d0:	4413      	add	r3, r2
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f822 	bl	8005320 <generate_waveform>
    for (WaveType type = 0; type < END_WAVETYPE; type++)
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	3301      	adds	r3, #1
 80052e0:	70fb      	strb	r3, [r7, #3]
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	2b06      	cmp	r3, #6
 80052e6:	d9f0      	bls.n	80052ca <init_lookup_tables+0x92>
    }
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	f3af 8000 	nop.w
 80052f8:	00000000 	.word	0x00000000
 80052fc:	40000000 	.word	0x40000000
 8005300:	00000000 	.word	0x00000000
 8005304:	40e58880 	.word	0x40e58880
 8005308:	40280000 	.word	0x40280000
 800530c:	40ab8000 	.word	0x40ab8000
 8005310:	40f00000 	.word	0x40f00000
 8005314:	200047d0 	.word	0x200047d0
 8005318:	200007a0 	.word	0x200007a0
 800531c:	00000000 	.word	0x00000000

08005320 <generate_waveform>:

void generate_waveform(int16_t lookup_table[DDS_LUT_SAMPLES], WaveType wave)
{
 8005320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005324:	b0a6      	sub	sp, #152	; 0x98
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]

    int half_samples = DDS_LUT_SAMPLES / 2;
 800532e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005332:	667b      	str	r3, [r7, #100]	; 0x64

    switch (wave)
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	2b06      	cmp	r3, #6
 8005338:	f200 83a6 	bhi.w	8005a88 <generate_waveform+0x768>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <generate_waveform+0x24>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005361 	.word	0x08005361
 8005348:	080053b7 	.word	0x080053b7
 800534c:	08005445 	.word	0x08005445
 8005350:	08005485 	.word	0x08005485
 8005354:	08005a89 	.word	0x08005a89
 8005358:	08005579 	.word	0x08005579
 800535c:	080058a1 	.word	0x080058a1
    {
    case SAWTOOTH: {
        // serialPrint("sawtoothgen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005366:	e01f      	b.n	80053a8 <generate_waveform+0x88>
        {
            lookup_table[i] = (i <= half_samples) ? 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES)
 8005368:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800536c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005378:	eddf 6acd 	vldr	s13, [pc, #820]	; 80056b0 <generate_waveform+0x390>
 800537c:	eec7 7a26 	vdiv.f32	s15, s14, s13
                                                  : 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES);
 8005380:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80056b4 <generate_waveform+0x394>
 8005384:	ee67 7a87 	vmul.f32	s15, s15, s14
            lookup_table[i] = (i <= half_samples) ? 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES)
 8005388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	4413      	add	r3, r2
 8005392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005396:	ee17 2a90 	vmov	r2, s15
 800539a:	b212      	sxth	r2, r2
 800539c:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 800539e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053a2:	3301      	adds	r3, #1
 80053a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b0:	dbda      	blt.n	8005368 <generate_waveform+0x48>
        }
    }
    break;
 80053b2:	f000 bc7a 	b.w	8005caa <generate_waveform+0x98a>
    case SINE: {
        // serialPrint("sinegen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053bc:	e03b      	b.n	8005436 <generate_waveform+0x116>
        {
            lookup_table[i] = 2048 * sin(2.0 * M_PI * (float)i / (float)DDS_LUT_SAMPLES);
 80053be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ca:	ee17 0a90 	vmov	r0, s15
 80053ce:	f7fb f8bb 	bl	8000548 <__aeabi_f2d>
 80053d2:	a3b3      	add	r3, pc, #716	; (adr r3, 80056a0 <generate_waveform+0x380>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f90e 	bl	80005f8 <__aeabi_dmul>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4610      	mov	r0, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	4bb3      	ldr	r3, [pc, #716]	; (80056b8 <generate_waveform+0x398>)
 80053ea:	f7fb fa2f 	bl	800084c <__aeabi_ddiv>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	ec43 2b17 	vmov	d7, r2, r3
 80053f6:	eeb0 0a47 	vmov.f32	s0, s14
 80053fa:	eef0 0a67 	vmov.f32	s1, s15
 80053fe:	f00b f9e7 	bl	80107d0 <sin>
 8005402:	ec51 0b10 	vmov	r0, r1, d0
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	4bac      	ldr	r3, [pc, #688]	; (80056bc <generate_waveform+0x39c>)
 800540c:	f7fb f8f4 	bl	80005f8 <__aeabi_dmul>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4610      	mov	r0, r2
 8005416:	4619      	mov	r1, r3
 8005418:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	18d4      	adds	r4, r2, r3
 8005422:	f7fb fb99 	bl	8000b58 <__aeabi_d2iz>
 8005426:	4603      	mov	r3, r0
 8005428:	b21b      	sxth	r3, r3
 800542a:	8023      	strh	r3, [r4, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 800542c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005430:	3301      	adds	r3, #1
 8005432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543e:	dbbe      	blt.n	80053be <generate_waveform+0x9e>
        }
    }
    break;
 8005440:	f000 bc33 	b.w	8005caa <generate_waveform+0x98a>
    case SQUARE: {
        // serialPrint("squaregen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800544a:	e014      	b.n	8005476 <generate_waveform+0x156>
        {
            lookup_table[i] = (i <= half_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 800544c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005452:	429a      	cmp	r2, r3
 8005454:	dc02      	bgt.n	800545c <generate_waveform+0x13c>
 8005456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800545a:	e000      	b.n	800545e <generate_waveform+0x13e>
 800545c:	4998      	ldr	r1, [pc, #608]	; (80056c0 <generate_waveform+0x3a0>)
 800545e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	460a      	mov	r2, r1
 800546a:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 800546c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005470:	3301      	adds	r3, #1
 8005472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547e:	dbe5      	blt.n	800544c <generate_waveform+0x12c>
        }
    }
    break;
 8005480:	f000 bc13 	b.w	8005caa <generate_waveform+0x98a>
    case TRIANGLE: {
        // serialPrint("trianglegen\n");
        int half_samples = DDS_LUT_SAMPLES / 2;
 8005484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005488:	61bb      	str	r3, [r7, #24]
        int first_fourth = DDS_LUT_SAMPLES / 4;
 800548a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800548e:	617b      	str	r3, [r7, #20]
        int third_fourth = half_samples + first_fourth;
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800549e:	e065      	b.n	800556c <generate_waveform+0x24c>
        {
            lookup_table[i] = (i <= first_fourth)   ? 2048 * ((float)(-i) / (float)DDS_LUT_SAMPLES)
 80054a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	dc14      	bgt.n	80054d4 <generate_waveform+0x1b4>
 80054aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054ae:	425b      	negs	r3, r3
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054b8:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80056b0 <generate_waveform+0x390>
 80054bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054c0:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80056b4 <generate_waveform+0x394>
 80054c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054cc:	ee17 3a90 	vmov	r3, s15
 80054d0:	b21b      	sxth	r3, r3
 80054d2:	e02f      	b.n	8005534 <generate_waveform+0x214>
 80054d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	dc15      	bgt.n	800550a <generate_waveform+0x1ea>
                              : (i <= third_fourth) ? 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES)
 80054de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ee:	eddf 6a70 	vldr	s13, [pc, #448]	; 80056b0 <generate_waveform+0x390>
 80054f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054f6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80056b4 <generate_waveform+0x394>
 80054fa:	ee67 7a87 	vmul.f32	s15, s15, s14
            lookup_table[i] = (i <= first_fourth)   ? 2048 * ((float)(-i) / (float)DDS_LUT_SAMPLES)
 80054fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005502:	ee17 3a90 	vmov	r3, s15
 8005506:	b21b      	sxth	r3, r3
 8005508:	e014      	b.n	8005534 <generate_waveform+0x214>
                                                    : 2048 * ((float)(DDS_LUT_SAMPLES - i) / (float)DDS_LUT_SAMPLES);
 800550a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800550e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800551a:	eddf 6a65 	vldr	s13, [pc, #404]	; 80056b0 <generate_waveform+0x390>
 800551e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005522:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80056b4 <generate_waveform+0x394>
 8005526:	ee67 7a87 	vmul.f32	s15, s15, s14
            lookup_table[i] = (i <= first_fourth)   ? 2048 * ((float)(-i) / (float)DDS_LUT_SAMPLES)
 800552a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800552e:	ee17 3a90 	vmov	r3, s15
 8005532:	b21b      	sxth	r3, r3
 8005534:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005538:	0052      	lsls	r2, r2, #1
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	440a      	add	r2, r1
 800553e:	8013      	strh	r3, [r2, #0]
            lookup_table[i] *= 4;
 8005540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800554e:	b29b      	uxth	r3, r3
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	b299      	uxth	r1, r3
 8005554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	b20a      	sxth	r2, r1
 8005560:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005566:	3301      	adds	r3, #1
 8005568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800556c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005574:	db94      	blt.n	80054a0 <generate_waveform+0x180>
        }
    }
    break;
 8005576:	e398      	b.n	8005caa <generate_waveform+0x98a>
    case RETRO1: {
        int tone1 = DDS_LUT_SAMPLES * 0.2;
 8005578:	23cc      	movs	r3, #204	; 0xcc
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
        int tone2 = DDS_LUT_SAMPLES * 0.4;
 800557c:	f240 1399 	movw	r3, #409	; 0x199
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
        int tone3 = DDS_LUT_SAMPLES * 0.3;
 8005582:	f240 1333 	movw	r3, #307	; 0x133
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
        uint32_t curr_samples = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	637b      	str	r3, [r7, #52]	; 0x34
        uint32_t step_samples = curr_samples + tone1;
 800558c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005590:	4413      	add	r3, r2
 8005592:	633b      	str	r3, [r7, #48]	; 0x30
        uint32_t half_step_samples = step_samples / 2;
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c

        for (int i = curr_samples; i < step_samples; i++)
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055a0:	e067      	b.n	8005672 <generate_waveform+0x352>
        {
            float wave = 2048 * sin(2.0 * M_PI * (float)i * 5 / ((float)tone1)) / 5;
 80055a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ae:	ee17 0a90 	vmov	r0, s15
 80055b2:	f7fa ffc9 	bl	8000548 <__aeabi_f2d>
 80055b6:	a33a      	add	r3, pc, #232	; (adr r3, 80056a0 <generate_waveform+0x380>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f7fb f81c 	bl	80005f8 <__aeabi_dmul>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	4b3d      	ldr	r3, [pc, #244]	; (80056c4 <generate_waveform+0x3a4>)
 80055ce:	f7fb f813 	bl	80005f8 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4614      	mov	r4, r2
 80055d8:	461d      	mov	r5, r3
 80055da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e4:	ee17 0a90 	vmov	r0, s15
 80055e8:	f7fa ffae 	bl	8000548 <__aeabi_f2d>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4620      	mov	r0, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	f7fb f92a 	bl	800084c <__aeabi_ddiv>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	ec43 2b17 	vmov	d7, r2, r3
 8005600:	eeb0 0a47 	vmov.f32	s0, s14
 8005604:	eef0 0a67 	vmov.f32	s1, s15
 8005608:	f00b f8e2 	bl	80107d0 <sin>
 800560c:	ec51 0b10 	vmov	r0, r1, d0
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <generate_waveform+0x39c>)
 8005616:	f7fa ffef 	bl	80005f8 <__aeabi_dmul>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4610      	mov	r0, r2
 8005620:	4619      	mov	r1, r3
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <generate_waveform+0x3a4>)
 8005628:	f7fb f910 	bl	800084c <__aeabi_ddiv>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4610      	mov	r0, r2
 8005632:	4619      	mov	r1, r3
 8005634:	f7fb fad8 	bl	8000be8 <__aeabi_d2f>
 8005638:	4603      	mov	r3, r0
 800563a:	61fb      	str	r3, [r7, #28]
            lookup_table[i] = 0.4 * wave;
 800563c:	69f8      	ldr	r0, [r7, #28]
 800563e:	f7fa ff83 	bl	8000548 <__aeabi_f2d>
 8005642:	a319      	add	r3, pc, #100	; (adr r3, 80056a8 <generate_waveform+0x388>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa ffd6 	bl	80005f8 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	18d4      	adds	r4, r2, r3
 800565e:	f7fb fa7b 	bl	8000b58 <__aeabi_d2iz>
 8005662:	4603      	mov	r3, r0
 8005664:	b21b      	sxth	r3, r3
 8005666:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < step_samples; i++)
 8005668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800566c:	3301      	adds	r3, #1
 800566e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005678:	429a      	cmp	r2, r3
 800567a:	d892      	bhi.n	80055a2 <generate_waveform+0x282>
        }
        curr_samples = step_samples;
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	637b      	str	r3, [r7, #52]	; 0x34

        step_samples = curr_samples + tone2;
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005684:	4413      	add	r3, r2
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
        half_step_samples = curr_samples + tone2 / 2;
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	0fda      	lsrs	r2, r3, #31
 800568c:	4413      	add	r3, r2
 800568e:	105b      	asrs	r3, r3, #1
 8005690:	461a      	mov	r2, r3
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	4413      	add	r3, r2
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = curr_samples; i < step_samples; i++)
 8005698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800569e:	e060      	b.n	8005762 <generate_waveform+0x442>
 80056a0:	54442d18 	.word	0x54442d18
 80056a4:	401921fb 	.word	0x401921fb
 80056a8:	9999999a 	.word	0x9999999a
 80056ac:	3fd99999 	.word	0x3fd99999
 80056b0:	44800000 	.word	0x44800000
 80056b4:	45000000 	.word	0x45000000
 80056b8:	40900000 	.word	0x40900000
 80056bc:	40a00000 	.word	0x40a00000
 80056c0:	fffff800 	.word	0xfffff800
 80056c4:	40140000 	.word	0x40140000
        {
            float wave = 2048 * sin(2.0 * M_PI * (float)i / ((float)tone2));
 80056c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056cc:	ee07 3a90 	vmov	s15, r3
 80056d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d4:	ee17 0a90 	vmov	r0, s15
 80056d8:	f7fa ff36 	bl	8000548 <__aeabi_f2d>
 80056dc:	a3ba      	add	r3, pc, #744	; (adr r3, 80059c8 <generate_waveform+0x6a8>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f7fa ff89 	bl	80005f8 <__aeabi_dmul>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4614      	mov	r4, r2
 80056ec:	461d      	mov	r5, r3
 80056ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f8:	ee17 0a90 	vmov	r0, s15
 80056fc:	f7fa ff24 	bl	8000548 <__aeabi_f2d>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4620      	mov	r0, r4
 8005706:	4629      	mov	r1, r5
 8005708:	f7fb f8a0 	bl	800084c <__aeabi_ddiv>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	ec43 2b17 	vmov	d7, r2, r3
 8005714:	eeb0 0a47 	vmov.f32	s0, s14
 8005718:	eef0 0a67 	vmov.f32	s1, s15
 800571c:	f00b f858 	bl	80107d0 <sin>
 8005720:	ec51 0b10 	vmov	r0, r1, d0
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	4bad      	ldr	r3, [pc, #692]	; (80059e0 <generate_waveform+0x6c0>)
 800572a:	f7fa ff65 	bl	80005f8 <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	f7fb fa57 	bl	8000be8 <__aeabi_d2f>
 800573a:	4603      	mov	r3, r0
 800573c:	623b      	str	r3, [r7, #32]
            lookup_table[i] = 1 * wave;
 800573e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	edd7 7a08 	vldr	s15, [r7, #32]
 800574c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005750:	ee17 2a90 	vmov	r2, s15
 8005754:	b212      	sxth	r2, r2
 8005756:	801a      	strh	r2, [r3, #0]
        for (int i = curr_samples; i < step_samples; i++)
 8005758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800575c:	3301      	adds	r3, #1
 800575e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005768:	429a      	cmp	r2, r3
 800576a:	d8ad      	bhi.n	80056c8 <generate_waveform+0x3a8>
        }
        curr_samples = step_samples;
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	637b      	str	r3, [r7, #52]	; 0x34

        step_samples = curr_samples + tone3;
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005774:	4413      	add	r3, r2
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
        half_step_samples = curr_samples + tone3 / 2;
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	0fda      	lsrs	r2, r3, #31
 800577c:	4413      	add	r3, r2
 800577e:	105b      	asrs	r3, r3, #1
 8005780:	461a      	mov	r2, r3
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	4413      	add	r3, r2
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = curr_samples; i < step_samples; i++)
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800578c:	e051      	b.n	8005832 <generate_waveform+0x512>
        {
            float wave = 2048 * sin(2.0 * M_PI * (float)i / ((float)tone3));
 800578e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005798:	ee17 0a90 	vmov	r0, s15
 800579c:	f7fa fed4 	bl	8000548 <__aeabi_f2d>
 80057a0:	a389      	add	r3, pc, #548	; (adr r3, 80059c8 <generate_waveform+0x6a8>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa ff27 	bl	80005f8 <__aeabi_dmul>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4614      	mov	r4, r2
 80057b0:	461d      	mov	r5, r3
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057bc:	ee17 0a90 	vmov	r0, s15
 80057c0:	f7fa fec2 	bl	8000548 <__aeabi_f2d>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4620      	mov	r0, r4
 80057ca:	4629      	mov	r1, r5
 80057cc:	f7fb f83e 	bl	800084c <__aeabi_ddiv>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	ec43 2b17 	vmov	d7, r2, r3
 80057d8:	eeb0 0a47 	vmov.f32	s0, s14
 80057dc:	eef0 0a67 	vmov.f32	s1, s15
 80057e0:	f00a fff6 	bl	80107d0 <sin>
 80057e4:	ec51 0b10 	vmov	r0, r1, d0
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	4b7c      	ldr	r3, [pc, #496]	; (80059e0 <generate_waveform+0x6c0>)
 80057ee:	f7fa ff03 	bl	80005f8 <__aeabi_dmul>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	f7fb f9f5 	bl	8000be8 <__aeabi_d2f>
 80057fe:	4603      	mov	r3, r0
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
            lookup_table[i] = 0.7 * wave;
 8005802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005804:	f7fa fea0 	bl	8000548 <__aeabi_f2d>
 8005808:	a371      	add	r3, pc, #452	; (adr r3, 80059d0 <generate_waveform+0x6b0>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa fef3 	bl	80005f8 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	18d4      	adds	r4, r2, r3
 8005822:	f7fb f999 	bl	8000b58 <__aeabi_d2iz>
 8005826:	4603      	mov	r3, r0
 8005828:	b21b      	sxth	r3, r3
 800582a:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < step_samples; i++)
 800582c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800582e:	3301      	adds	r3, #1
 8005830:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005836:	429a      	cmp	r2, r3
 8005838:	d8a9      	bhi.n	800578e <generate_waveform+0x46e>
        }
        curr_samples = step_samples;
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	637b      	str	r3, [r7, #52]	; 0x34

        half_step_samples = step_samples + (DDS_LUT_SAMPLES - step_samples) / 2;
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005848:	4413      	add	r3, r2
 800584a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005850:	e021      	b.n	8005896 <generate_waveform+0x576>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <generate_waveform+0x540>
 800585a:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800585e:	e001      	b.n	8005864 <generate_waveform+0x544>
 8005860:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
            ;
            lookup_table[i] = 0.3 * wave;
 8005866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005868:	f7fa fe6e 	bl	8000548 <__aeabi_f2d>
 800586c:	a35a      	add	r3, pc, #360	; (adr r3, 80059d8 <generate_waveform+0x6b8>)
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f7fa fec1 	bl	80005f8 <__aeabi_dmul>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	18d4      	adds	r4, r2, r3
 8005886:	f7fb f967 	bl	8000b58 <__aeabi_d2iz>
 800588a:	4603      	mov	r3, r0
 800588c:	b21b      	sxth	r3, r3
 800588e:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 8005890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005892:	3301      	adds	r3, #1
 8005894:	67bb      	str	r3, [r7, #120]	; 0x78
 8005896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	dbd9      	blt.n	8005852 <generate_waveform+0x532>
        }
    }
    break;
 800589e:	e204      	b.n	8005caa <generate_waveform+0x98a>
    case RETRO2: {
        int tone1 = DDS_LUT_SAMPLES * 0.4;
 80058a0:	f240 1399 	movw	r3, #409	; 0x199
 80058a4:	663b      	str	r3, [r7, #96]	; 0x60
        int tone2 = DDS_LUT_SAMPLES * 0.3;
 80058a6:	f240 1333 	movw	r3, #307	; 0x133
 80058aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        uint32_t curr_samples = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	65bb      	str	r3, [r7, #88]	; 0x58
        uint32_t step_samples = curr_samples + tone1;
 80058b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058b4:	4413      	add	r3, r2
 80058b6:	657b      	str	r3, [r7, #84]	; 0x54
        uint32_t half_step_samples = curr_samples + tone1 / 2;
 80058b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058ba:	0fda      	lsrs	r2, r3, #31
 80058bc:	4413      	add	r3, r2
 80058be:	105b      	asrs	r3, r3, #1
 80058c0:	461a      	mov	r2, r3
 80058c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058c4:	4413      	add	r3, r2
 80058c6:	653b      	str	r3, [r7, #80]	; 0x50
        for (int i = curr_samples; i < step_samples; i++)
 80058c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ca:	677b      	str	r3, [r7, #116]	; 0x74
 80058cc:	e05d      	b.n	800598a <generate_waveform+0x66a>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 80058ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <generate_waveform+0x5bc>
 80058d6:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80058da:	e001      	b.n	80058e0 <generate_waveform+0x5c0>
 80058dc:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 80058e0:	647b      	str	r3, [r7, #68]	; 0x44
            wave += 2048 * sin(2.0 * M_PI * (float)i / ((float)tone1));
 80058e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80058e4:	f7fa fe30 	bl	8000548 <__aeabi_f2d>
 80058e8:	4604      	mov	r4, r0
 80058ea:	460d      	mov	r5, r1
 80058ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058f6:	ee17 0a90 	vmov	r0, s15
 80058fa:	f7fa fe25 	bl	8000548 <__aeabi_f2d>
 80058fe:	a332      	add	r3, pc, #200	; (adr r3, 80059c8 <generate_waveform+0x6a8>)
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f7fa fe78 	bl	80005f8 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4690      	mov	r8, r2
 800590e:	4699      	mov	r9, r3
 8005910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800591a:	ee17 0a90 	vmov	r0, s15
 800591e:	f7fa fe13 	bl	8000548 <__aeabi_f2d>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4640      	mov	r0, r8
 8005928:	4649      	mov	r1, r9
 800592a:	f7fa ff8f 	bl	800084c <__aeabi_ddiv>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	ec43 2b17 	vmov	d7, r2, r3
 8005936:	eeb0 0a47 	vmov.f32	s0, s14
 800593a:	eef0 0a67 	vmov.f32	s1, s15
 800593e:	f00a ff47 	bl	80107d0 <sin>
 8005942:	ec51 0b10 	vmov	r0, r1, d0
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <generate_waveform+0x6c0>)
 800594c:	f7fa fe54 	bl	80005f8 <__aeabi_dmul>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fa fc98 	bl	800028c <__adddf3>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	f7fb f940 	bl	8000be8 <__aeabi_d2f>
 8005968:	4603      	mov	r3, r0
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
            lookup_table[i] = 1 * wave;
 800596c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4413      	add	r3, r2
 8005974:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800597c:	ee17 2a90 	vmov	r2, s15
 8005980:	b212      	sxth	r2, r2
 8005982:	801a      	strh	r2, [r3, #0]
        for (int i = curr_samples; i < step_samples; i++)
 8005984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005986:	3301      	adds	r3, #1
 8005988:	677b      	str	r3, [r7, #116]	; 0x74
 800598a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800598e:	429a      	cmp	r2, r3
 8005990:	d89d      	bhi.n	80058ce <generate_waveform+0x5ae>
        }
        curr_samples = step_samples;
 8005992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005994:	65bb      	str	r3, [r7, #88]	; 0x58

        step_samples = curr_samples + tone2;
 8005996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800599a:	4413      	add	r3, r2
 800599c:	657b      	str	r3, [r7, #84]	; 0x54
        half_step_samples = curr_samples + tone2 / 2;
 800599e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a0:	0fda      	lsrs	r2, r3, #31
 80059a2:	4413      	add	r3, r2
 80059a4:	105b      	asrs	r3, r3, #1
 80059a6:	461a      	mov	r2, r3
 80059a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059aa:	4413      	add	r3, r2
 80059ac:	653b      	str	r3, [r7, #80]	; 0x50
        for (int i = curr_samples; i < step_samples; i++)
 80059ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059b0:	673b      	str	r3, [r7, #112]	; 0x70
 80059b2:	e032      	b.n	8005a1a <generate_waveform+0x6fa>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 80059b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d313      	bcc.n	80059e4 <generate_waveform+0x6c4>
 80059bc:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80059c0:	e012      	b.n	80059e8 <generate_waveform+0x6c8>
 80059c2:	bf00      	nop
 80059c4:	f3af 8000 	nop.w
 80059c8:	54442d18 	.word	0x54442d18
 80059cc:	401921fb 	.word	0x401921fb
 80059d0:	66666666 	.word	0x66666666
 80059d4:	3fe66666 	.word	0x3fe66666
 80059d8:	33333333 	.word	0x33333333
 80059dc:	3fd33333 	.word	0x3fd33333
 80059e0:	40a00000 	.word	0x40a00000
 80059e4:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 80059e8:	64bb      	str	r3, [r7, #72]	; 0x48
            lookup_table[i] = 0.7 * wave;
 80059ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80059ec:	f7fa fdac 	bl	8000548 <__aeabi_f2d>
 80059f0:	a3b8      	add	r3, pc, #736	; (adr r3, 8005cd4 <generate_waveform+0x9b4>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fdff 	bl	80005f8 <__aeabi_dmul>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	18d4      	adds	r4, r2, r3
 8005a0a:	f7fb f8a5 	bl	8000b58 <__aeabi_d2iz>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	b21b      	sxth	r3, r3
 8005a12:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < step_samples; i++)
 8005a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a16:	3301      	adds	r3, #1
 8005a18:	673b      	str	r3, [r7, #112]	; 0x70
 8005a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d8c8      	bhi.n	80059b4 <generate_waveform+0x694>
        }
        curr_samples = step_samples;
 8005a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a24:	65bb      	str	r3, [r7, #88]	; 0x58

        half_step_samples = step_samples + (DDS_LUT_SAMPLES - step_samples) / 2;
 8005a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005a2c:	085b      	lsrs	r3, r3, #1
 8005a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a30:	4413      	add	r3, r2
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 8005a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a38:	e021      	b.n	8005a7e <generate_waveform+0x75e>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <generate_waveform+0x728>
 8005a42:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8005a46:	e001      	b.n	8005a4c <generate_waveform+0x72c>
 8005a48:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 8005a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
            lookup_table[i] = 0.3 * wave;
 8005a4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a50:	f7fa fd7a 	bl	8000548 <__aeabi_f2d>
 8005a54:	a3a1      	add	r3, pc, #644	; (adr r3, 8005cdc <generate_waveform+0x9bc>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f7fa fdcd 	bl	80005f8 <__aeabi_dmul>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	18d4      	adds	r4, r2, r3
 8005a6e:	f7fb f873 	bl	8000b58 <__aeabi_d2iz>
 8005a72:	4603      	mov	r3, r0
 8005a74:	b21b      	sxth	r3, r3
 8005a76:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 8005a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a84:	dbd9      	blt.n	8005a3a <generate_waveform+0x71a>
        }
    }
    break;
 8005a86:	e110      	b.n	8005caa <generate_waveform+0x98a>
    default:
    case CLARINET: {
        // serialPrint("clarinetgen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a8c:	e107      	b.n	8005c9e <generate_waveform+0x97e>
        {
            float harmonic_sample = sin(2.0 * M_PI * (float)i / ((float)DDS_LUT_SAMPLES));
 8005a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a98:	ee17 0a90 	vmov	r0, s15
 8005a9c:	f7fa fd54 	bl	8000548 <__aeabi_f2d>
 8005aa0:	a385      	add	r3, pc, #532	; (adr r3, 8005cb8 <generate_waveform+0x998>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f7fa fda7 	bl	80005f8 <__aeabi_dmul>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	4b82      	ldr	r3, [pc, #520]	; (8005cc0 <generate_waveform+0x9a0>)
 8005ab8:	f7fa fec8 	bl	800084c <__aeabi_ddiv>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	ec43 2b17 	vmov	d7, r2, r3
 8005ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ac8:	eef0 0a67 	vmov.f32	s1, s15
 8005acc:	f00a fe80 	bl	80107d0 <sin>
 8005ad0:	ec53 2b10 	vmov	r2, r3, d0
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f7fb f886 	bl	8000be8 <__aeabi_d2f>
 8005adc:	4603      	mov	r3, r0
 8005ade:	60fb      	str	r3, [r7, #12]
            harmonic_sample += sin(2.0 * M_PI * (float)i * 3 / ((float)DDS_LUT_SAMPLES)) / 3;
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7fa fd31 	bl	8000548 <__aeabi_f2d>
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	460d      	mov	r5, r1
 8005aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af4:	ee17 0a90 	vmov	r0, s15
 8005af8:	f7fa fd26 	bl	8000548 <__aeabi_f2d>
 8005afc:	a36e      	add	r3, pc, #440	; (adr r3, 8005cb8 <generate_waveform+0x998>)
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f7fa fd79 	bl	80005f8 <__aeabi_dmul>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <generate_waveform+0x9a4>)
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	4b66      	ldr	r3, [pc, #408]	; (8005cc0 <generate_waveform+0x9a0>)
 8005b26:	f7fa fe91 	bl	800084c <__aeabi_ddiv>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	ec43 2b17 	vmov	d7, r2, r3
 8005b32:	eeb0 0a47 	vmov.f32	s0, s14
 8005b36:	eef0 0a67 	vmov.f32	s1, s15
 8005b3a:	f00a fe49 	bl	80107d0 <sin>
 8005b3e:	ec51 0b10 	vmov	r0, r1, d0
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	4b5f      	ldr	r3, [pc, #380]	; (8005cc4 <generate_waveform+0x9a4>)
 8005b48:	f7fa fe80 	bl	800084c <__aeabi_ddiv>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4620      	mov	r0, r4
 8005b52:	4629      	mov	r1, r5
 8005b54:	f7fa fb9a 	bl	800028c <__adddf3>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f7fb f842 	bl	8000be8 <__aeabi_d2f>
 8005b64:	4603      	mov	r3, r0
 8005b66:	60fb      	str	r3, [r7, #12]
            harmonic_sample += sin(2.0 * M_PI * (float)i * 7 / ((float)DDS_LUT_SAMPLES)) / 7;
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7fa fced 	bl	8000548 <__aeabi_f2d>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b74:	ee07 3a90 	vmov	s15, r3
 8005b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b7c:	ee17 0a90 	vmov	r0, s15
 8005b80:	f7fa fce2 	bl	8000548 <__aeabi_f2d>
 8005b84:	a34c      	add	r3, pc, #304	; (adr r3, 8005cb8 <generate_waveform+0x998>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fd35 	bl	80005f8 <__aeabi_dmul>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4610      	mov	r0, r2
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	4b4b      	ldr	r3, [pc, #300]	; (8005cc8 <generate_waveform+0x9a8>)
 8005b9c:	f7fa fd2c 	bl	80005f8 <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	4b44      	ldr	r3, [pc, #272]	; (8005cc0 <generate_waveform+0x9a0>)
 8005bae:	f7fa fe4d 	bl	800084c <__aeabi_ddiv>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	ec43 2b17 	vmov	d7, r2, r3
 8005bba:	eeb0 0a47 	vmov.f32	s0, s14
 8005bbe:	eef0 0a67 	vmov.f32	s1, s15
 8005bc2:	f00a fe05 	bl	80107d0 <sin>
 8005bc6:	ec51 0b10 	vmov	r0, r1, d0
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	4b3e      	ldr	r3, [pc, #248]	; (8005cc8 <generate_waveform+0x9a8>)
 8005bd0:	f7fa fe3c 	bl	800084c <__aeabi_ddiv>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4620      	mov	r0, r4
 8005bda:	4629      	mov	r1, r5
 8005bdc:	f7fa fb56 	bl	800028c <__adddf3>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	f7fa fffe 	bl	8000be8 <__aeabi_d2f>
 8005bec:	4603      	mov	r3, r0
 8005bee:	60fb      	str	r3, [r7, #12]
            harmonic_sample += sin(2.0 * M_PI * (float)i * 8 / ((float)DDS_LUT_SAMPLES)) / 8;
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7fa fca9 	bl	8000548 <__aeabi_f2d>
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	460d      	mov	r5, r1
 8005bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bfc:	ee07 3a90 	vmov	s15, r3
 8005c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c04:	ee17 0a90 	vmov	r0, s15
 8005c08:	f7fa fc9e 	bl	8000548 <__aeabi_f2d>
 8005c0c:	a32a      	add	r3, pc, #168	; (adr r3, 8005cb8 <generate_waveform+0x998>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f7fa fcf1 	bl	80005f8 <__aeabi_dmul>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <generate_waveform+0x9ac>)
 8005c24:	f7fa fce8 	bl	80005f8 <__aeabi_dmul>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	4b22      	ldr	r3, [pc, #136]	; (8005cc0 <generate_waveform+0x9a0>)
 8005c36:	f7fa fe09 	bl	800084c <__aeabi_ddiv>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	ec43 2b17 	vmov	d7, r2, r3
 8005c42:	eeb0 0a47 	vmov.f32	s0, s14
 8005c46:	eef0 0a67 	vmov.f32	s1, s15
 8005c4a:	f00a fdc1 	bl	80107d0 <sin>
 8005c4e:	ec51 0b10 	vmov	r0, r1, d0
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <generate_waveform+0x9ac>)
 8005c58:	f7fa fdf8 	bl	800084c <__aeabi_ddiv>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4620      	mov	r0, r4
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7fa fb12 	bl	800028c <__adddf3>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f7fa ffba 	bl	8000be8 <__aeabi_d2f>
 8005c74:	4603      	mov	r3, r0
 8005c76:	60fb      	str	r3, [r7, #12]
            lookup_table[i] = (2048 * harmonic_sample);
 8005c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c7c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005cd0 <generate_waveform+0x9b0>
 8005c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c90:	ee17 2a90 	vmov	r2, s15
 8005c94:	b212      	sxth	r2, r2
 8005c96:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca4:	f6ff aef3 	blt.w	8005a8e <generate_waveform+0x76e>
        }
    }
    break;
 8005ca8:	bf00      	nop
    }
}
 8005caa:	bf00      	nop
 8005cac:	3798      	adds	r7, #152	; 0x98
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	54442d18 	.word	0x54442d18
 8005cbc:	401921fb 	.word	0x401921fb
 8005cc0:	40900000 	.word	0x40900000
 8005cc4:	40080000 	.word	0x40080000
 8005cc8:	401c0000 	.word	0x401c0000
 8005ccc:	40200000 	.word	0x40200000
 8005cd0:	45000000 	.word	0x45000000
 8005cd4:	66666666 	.word	0x66666666
 8005cd8:	3fe66666 	.word	0x3fe66666
 8005cdc:	33333333 	.word	0x33333333
 8005ce0:	3fd33333 	.word	0x3fd33333

08005ce4 <set_output_waveform>:

void set_output_waveform(WaveType wave)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	71fb      	strb	r3, [r7, #7]

    if (output_wavetype == wave)
 8005cee:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <set_output_waveform+0x3c>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	79fa      	ldrb	r2, [r7, #7]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d00e      	beq.n	8005d16 <set_output_waveform+0x32>
    {
        return;
    }
    output_wavetype = wave;
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <set_output_waveform+0x3c>)
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	7013      	strb	r3, [r2, #0]

    //	for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
    //		DDS_LUT_SEL[i] = DDS_LUT[wave][i];
    //	}

    HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)DDS_LUT[wave], (uint32_t)DDS_LUT_SEL, DDS_LUT_SAMPLES);
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	02db      	lsls	r3, r3, #11
 8005d02:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <set_output_waveform+0x40>)
 8005d04:	4413      	add	r3, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <set_output_waveform+0x44>)
 8005d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0e:	4807      	ldr	r0, [pc, #28]	; (8005d2c <set_output_waveform+0x48>)
 8005d10:	f002 fbd0 	bl	80084b4 <HAL_DMA_Start_IT>
 8005d14:	e000      	b.n	8005d18 <set_output_waveform+0x34>
        return;
 8005d16:	bf00      	nop
}
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	2000007c 	.word	0x2000007c
 8005d24:	200007a0 	.word	0x200007a0
 8005d28:	20003fa0 	.word	0x20003fa0
 8005d2c:	2000060c 	.word	0x2000060c

08005d30 <display_wave>:

void display_wave(u8g2_t *u8g2, uint16_t x, uint16_t y)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	807b      	strh	r3, [r7, #2]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	803b      	strh	r3, [r7, #0]
    switch (output_wavetype)
 8005d40:	4b33      	ldr	r3, [pc, #204]	; (8005e10 <display_wave+0xe0>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b06      	cmp	r3, #6
 8005d46:	d853      	bhi.n	8005df0 <display_wave+0xc0>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <display_wave+0x20>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	08005d83 	.word	0x08005d83
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005daf 	.word	0x08005daf
 8005d60:	08005df1 	.word	0x08005df1
 8005d64:	08005dc5 	.word	0x08005dc5
 8005d68:	08005ddb 	.word	0x08005ddb
    {
    case SAWTOOTH: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d6c:	4929      	ldr	r1, [pc, #164]	; (8005e14 <display_wave+0xe4>)
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fc fa0c 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, "//");
 8005d74:	883a      	ldrh	r2, [r7, #0]
 8005d76:	8879      	ldrh	r1, [r7, #2]
 8005d78:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <display_wave+0xe8>)
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc f964 	bl	8002048 <u8g2_DrawUTF8>
        break;
 8005d80:	e041      	b.n	8005e06 <display_wave+0xd6>
    }
    break;
    case SINE: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d82:	4924      	ldr	r1, [pc, #144]	; (8005e14 <display_wave+0xe4>)
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fc fa01 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, "◠◡");
 8005d8a:	883a      	ldrh	r2, [r7, #0]
 8005d8c:	8879      	ldrh	r1, [r7, #2]
 8005d8e:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <display_wave+0xec>)
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fc f959 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005d96:	e036      	b.n	8005e06 <display_wave+0xd6>
    case SQUARE: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d98:	491e      	ldr	r1, [pc, #120]	; (8005e14 <display_wave+0xe4>)
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fc f9f6 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u25a0");
 8005da0:	883a      	ldrh	r2, [r7, #0]
 8005da2:	8879      	ldrh	r1, [r7, #2]
 8005da4:	4b1e      	ldr	r3, [pc, #120]	; (8005e20 <display_wave+0xf0>)
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc f94e 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005dac:	e02b      	b.n	8005e06 <display_wave+0xd6>
    case TRIANGLE: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005dae:	4919      	ldr	r1, [pc, #100]	; (8005e14 <display_wave+0xe4>)
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fc f9eb 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u25b2");
 8005db6:	883a      	ldrh	r2, [r7, #0]
 8005db8:	8879      	ldrh	r1, [r7, #2]
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <display_wave+0xf4>)
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7fc f943 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005dc2:	e020      	b.n	8005e06 <display_wave+0xd6>
    case RETRO1: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005dc4:	4913      	ldr	r1, [pc, #76]	; (8005e14 <display_wave+0xe4>)
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fc f9e0 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u2600");
 8005dcc:	883a      	ldrh	r2, [r7, #0]
 8005dce:	8879      	ldrh	r1, [r7, #2]
 8005dd0:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <display_wave+0xf8>)
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc f938 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005dd8:	e015      	b.n	8005e06 <display_wave+0xd6>
    case RETRO2: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005dda:	490e      	ldr	r1, [pc, #56]	; (8005e14 <display_wave+0xe4>)
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fc f9d5 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u2604");
 8005de2:	883a      	ldrh	r2, [r7, #0]
 8005de4:	8879      	ldrh	r1, [r7, #2]
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <display_wave+0xfc>)
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7fc f92d 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005dee:	e00a      	b.n	8005e06 <display_wave+0xd6>
    default:
    case CLARINET: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005df0:	4908      	ldr	r1, [pc, #32]	; (8005e14 <display_wave+0xe4>)
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fc f9ca 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u265b");
 8005df8:	883a      	ldrh	r2, [r7, #0]
 8005dfa:	8879      	ldrh	r1, [r7, #2]
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <display_wave+0x100>)
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc f922 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005e04:	bf00      	nop
    }
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000007c 	.word	0x2000007c
 8005e14:	0801275c 	.word	0x0801275c
 8005e18:	080126e8 	.word	0x080126e8
 8005e1c:	080126ec 	.word	0x080126ec
 8005e20:	080126f4 	.word	0x080126f4
 8005e24:	080126fc 	.word	0x080126fc
 8005e28:	08012704 	.word	0x08012704
 8005e2c:	0801270c 	.word	0x0801270c
 8005e30:	08012714 	.word	0x08012714

08005e34 <synthesize_output>:


inline void synthesize_output(uint16_t keys, uint8_t volume, uint8_t octave, bool first_half)
{
 8005e34:	b490      	push	{r4, r7}
 8005e36:	b08e      	sub	sp, #56	; 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	4623      	mov	r3, r4
 8005e44:	80fb      	strh	r3, [r7, #6]
 8005e46:	4603      	mov	r3, r0
 8005e48:	717b      	strb	r3, [r7, #5]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	713b      	strb	r3, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	70fb      	strb	r3, [r7, #3]
    // determine which half needs to be filled
    int sample_begin, sample_end;
    if (first_half)
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <synthesize_output+0x30>
    {
        sample_begin = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
        sample_end = DDS_OUT_SAMPLES / 2;
 8005e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e60:	633b      	str	r3, [r7, #48]	; 0x30
 8005e62:	e005      	b.n	8005e70 <synthesize_output+0x3c>
    }
    else
    {
        sample_begin = DDS_OUT_SAMPLES / 2;
 8005e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
        sample_end = DDS_OUT_SAMPLES;
 8005e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    // TODO: Move this into scanKeys or similar. Add a semaphore to access notes_played/allKeys;
    uint8_t notes_played [12];

    for (int key = 0; key < 12; key++) {
 8005e70:	2300      	movs	r3, #0
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e74:	e032      	b.n	8005edc <synthesize_output+0xa8>
        notes_played[key] = 0;
 8005e76:	f107 020c 	add.w	r2, r7, #12
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	4413      	add	r3, r2
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
        for (int board = 0; board < keyboard_count; board++) {
 8005e82:	2300      	movs	r3, #0
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e86:	e01f      	b.n	8005ec8 <synthesize_output+0x94>
            notes_played[key] |= ((~(allKeys[board]) >> key) & 1) << board;
 8005e88:	f107 020c 	add.w	r2, r7, #12
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	4413      	add	r3, r2
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	b25a      	sxtb	r2, r3
 8005e94:	494b      	ldr	r1, [pc, #300]	; (8005fc4 <synthesize_output+0x190>)
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e9c:	43d9      	mvns	r1, r3
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	fa41 f303 	asr.w	r3, r1, r3
 8005ea4:	f003 0101 	and.w	r1, r3, #1
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005eae:	b25b      	sxtb	r3, r3
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	b25b      	sxtb	r3, r3
 8005eb4:	b2d9      	uxtb	r1, r3
 8005eb6:	f107 020c 	add.w	r2, r7, #12
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	4413      	add	r3, r2
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	701a      	strb	r2, [r3, #0]
        for (int board = 0; board < keyboard_count; board++) {
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec8:	4b3f      	ldr	r3, [pc, #252]	; (8005fc8 <synthesize_output+0x194>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	dbd8      	blt.n	8005e88 <synthesize_output+0x54>
    for (int key = 0; key < 12; key++) {
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	3301      	adds	r3, #1
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	2b0b      	cmp	r3, #11
 8005ee0:	ddc9      	ble.n	8005e76 <synthesize_output+0x42>
        }
    }

    // synthesise the waveform by addition
    for (int i = sample_begin; i < sample_end; i++)
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee6:	e063      	b.n	8005fb0 <synthesize_output+0x17c>
    {
        int16_t out = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	847b      	strh	r3, [r7, #34]	; 0x22

        for (int key = 0; key < 12; key++){
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e049      	b.n	8005f86 <synthesize_output+0x152>
            if(notes_played[key]) {
 8005ef2:	f107 020c 	add.w	r2, r7, #12
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d03f      	beq.n	8005f80 <synthesize_output+0x14c>

                DDS_indices[key] += DDS_steps[key];
 8005f00:	4a32      	ldr	r2, [pc, #200]	; (8005fcc <synthesize_output+0x198>)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f08:	4931      	ldr	r1, [pc, #196]	; (8005fd0 <synthesize_output+0x19c>)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f10:	441a      	add	r2, r3
 8005f12:	492e      	ldr	r1, [pc, #184]	; (8005fcc <synthesize_output+0x198>)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for (int board = 0; board < keyboard_count; board++){
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e028      	b.n	8005f72 <synthesize_output+0x13e>

                    if(notes_played[key] & (1 << board)){
 8005f20:	f107 020c 	add.w	r2, r7, #12
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	fa42 f303 	asr.w	r3, r2, r3
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <synthesize_output+0x138>
                        out += DDS_LUT_SEL[(DDS_indices[key] >> (13 - board + keyboard_position - octave)) & 0x03FF];
 8005f3a:	4a24      	ldr	r2, [pc, #144]	; (8005fcc <synthesize_output+0x198>)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f1c3 030d 	rsb	r3, r3, #13
 8005f48:	4922      	ldr	r1, [pc, #136]	; (8005fd4 <synthesize_output+0x1a0>)
 8005f4a:	7809      	ldrb	r1, [r1, #0]
 8005f4c:	b2c9      	uxtb	r1, r1
 8005f4e:	4419      	add	r1, r3
 8005f50:	793b      	ldrb	r3, [r7, #4]
 8005f52:	1acb      	subs	r3, r1, r3
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5c:	4a1e      	ldr	r2, [pc, #120]	; (8005fd8 <synthesize_output+0x1a4>)
 8005f5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f66:	4413      	add	r3, r2
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	847b      	strh	r3, [r7, #34]	; 0x22
                for (int board = 0; board < keyboard_count; board++){
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <synthesize_output+0x194>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	dbcf      	blt.n	8005f20 <synthesize_output+0xec>
        for (int key = 0; key < 12; key++){
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	3301      	adds	r3, #1
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	2b0b      	cmp	r3, #11
 8005f8a:	ddb2      	ble.n	8005ef2 <synthesize_output+0xbe>
                    }
                }
            }
        }

        DDS_OUT[i] = (out >> (12 - volume)) + 2048;
 8005f8c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005f90:	797b      	ldrb	r3, [r7, #5]
 8005f92:	f1c3 030c 	rsb	r3, r3, #12
 8005f96:	fa42 f303 	asr.w	r3, r2, r3
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa0:	b299      	uxth	r1, r3
 8005fa2:	4a0e      	ldr	r2, [pc, #56]	; (8005fdc <synthesize_output+0x1a8>)
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = sample_begin; i < sample_end; i++)
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	3301      	adds	r3, #1
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	db97      	blt.n	8005ee8 <synthesize_output+0xb4>
        //DDS_OUT[i] = 0;
    }
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	3738      	adds	r7, #56	; 0x38
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc90      	pop	{r4, r7}
 8005fc2:	4770      	bx	lr
 8005fc4:	200006ac 	.word	0x200006ac
 8005fc8:	20000001 	.word	0x20000001
 8005fcc:	200047a0 	.word	0x200047a0
 8005fd0:	200047d0 	.word	0x200047d0
 8005fd4:	2000031c 	.word	0x2000031c
 8005fd8:	20003fa0 	.word	0x20003fa0
 8005fdc:	20004800 	.word	0x20004800

08005fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006018 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005fe4:	f7ff f916 	bl	8005214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fe8:	480c      	ldr	r0, [pc, #48]	; (800601c <LoopForever+0x6>)
  ldr r1, =_edata
 8005fea:	490d      	ldr	r1, [pc, #52]	; (8006020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fec:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <LoopForever+0xe>)
  movs r3, #0
 8005fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ff0:	e002      	b.n	8005ff8 <LoopCopyDataInit>

08005ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ff6:	3304      	adds	r3, #4

08005ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ffc:	d3f9      	bcc.n	8005ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006000:	4c0a      	ldr	r4, [pc, #40]	; (800602c <LoopForever+0x16>)
  movs r3, #0
 8006002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006004:	e001      	b.n	800600a <LoopFillZerobss>

08006006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006008:	3204      	adds	r2, #4

0800600a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800600a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800600c:	d3fb      	bcc.n	8006006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800600e:	f009 fedb 	bl	800fdc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006012:	f7fd fe9b 	bl	8003d4c <main>

08006016 <LoopForever>:

LoopForever:
    b LoopForever
 8006016:	e7fe      	b.n	8006016 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006018:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800601c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006020:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8006024:	0801f930 	.word	0x0801f930
  ldr r2, =_sbss
 8006028:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800602c:	20009334 	.word	0x20009334

08006030 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006030:	e7fe      	b.n	8006030 <ADC1_IRQHandler>

08006032 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800603c:	2003      	movs	r0, #3
 800603e:	f001 fe42 	bl	8007cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006042:	200f      	movs	r0, #15
 8006044:	f7fe ffe2 	bl	800500c <HAL_InitTick>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	71fb      	strb	r3, [r7, #7]
 8006052:	e001      	b.n	8006058 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006054:	f7fe fd30 	bl	8004ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006058:	79fb      	ldrb	r3, [r7, #7]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_IncTick+0x20>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_IncTick+0x24>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4413      	add	r3, r2
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <HAL_IncTick+0x24>)
 8006076:	6013      	str	r3, [r2, #0]
}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	20000084 	.word	0x20000084
 8006088:	20006800 	.word	0x20006800

0800608c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  return uwTick;
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <HAL_GetTick+0x14>)
 8006092:	681b      	ldr	r3, [r3, #0]
}
 8006094:	4618      	mov	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	20006800 	.word	0x20006800

080060a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060ac:	f7ff ffee 	bl	800608c <HAL_GetTick>
 80060b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d005      	beq.n	80060ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80060be:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <HAL_Delay+0x44>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060ca:	bf00      	nop
 80060cc:	f7ff ffde 	bl	800608c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d8f7      	bhi.n	80060cc <HAL_Delay+0x28>
  {
  }
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000084 	.word	0x20000084

080060ec <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80060f0:	4b03      	ldr	r3, [pc, #12]	; (8006100 <HAL_GetUIDw0+0x14>)
 80060f2:	681b      	ldr	r3, [r3, #0]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	1fff7590 	.word	0x1fff7590

08006104 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3360      	adds	r3, #96	; 0x60
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <LL_ADC_SetOffset+0x44>)
 800618e:	4013      	ands	r3, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	4313      	orrs	r3, r2
 800619c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	03fff000 	.word	0x03fff000

080061b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3360      	adds	r3, #96	; 0x60
 80061c2:	461a      	mov	r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3360      	adds	r3, #96	; 0x60
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	431a      	orrs	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3330      	adds	r3, #48	; 0x30
 8006226:	461a      	mov	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	f003 030c 	and.w	r3, r3, #12
 8006232:	4413      	add	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	211f      	movs	r1, #31
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	401a      	ands	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0e9b      	lsrs	r3, r3, #26
 800624e:	f003 011f 	and.w	r1, r3, #31
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	fa01 f303 	lsl.w	r3, r1, r3
 800625c:	431a      	orrs	r2, r3
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3314      	adds	r3, #20
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	0e5b      	lsrs	r3, r3, #25
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	4413      	add	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	0d1b      	lsrs	r3, r3, #20
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2107      	movs	r1, #7
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	401a      	ands	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	0d1b      	lsrs	r3, r3, #20
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	fa01 f303 	lsl.w	r3, r1, r3
 80062b2:	431a      	orrs	r2, r3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80062b8:	bf00      	nop
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f003 0318 	and.w	r3, r3, #24
 80062e6:	4908      	ldr	r1, [pc, #32]	; (8006308 <LL_ADC_SetChannelSingleDiff+0x44>)
 80062e8:	40d9      	lsrs	r1, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	400b      	ands	r3, r1
 80062ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	0007ffff 	.word	0x0007ffff

0800630c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800631c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6093      	str	r3, [r2, #8]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006344:	d101      	bne.n	800634a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800636c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006394:	d101      	bne.n	800639a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <LL_ADC_IsEnabled+0x18>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <LL_ADC_IsEnabled+0x1a>
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d101      	bne.n	80063e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d101      	bne.n	800640c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006428:	2300      	movs	r3, #0
 800642a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e12c      	b.n	8006690 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fe fb5f 	bl	8004b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff ff67 	bl	8006330 <LL_ADC_IsDeepPowerDownEnabled>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff ff4d 	bl	800630c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ff82 	bl	8006380 <LL_ADC_IsInternalRegulatorEnabled>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d115      	bne.n	80064ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff66 	bl	8006358 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800648c:	4b82      	ldr	r3, [pc, #520]	; (8006698 <HAL_ADC_Init+0x27c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	099b      	lsrs	r3, r3, #6
 8006492:	4a82      	ldr	r2, [pc, #520]	; (800669c <HAL_ADC_Init+0x280>)
 8006494:	fba2 2303 	umull	r2, r3, r2, r3
 8006498:	099b      	lsrs	r3, r3, #6
 800649a:	3301      	adds	r3, #1
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80064a0:	e002      	b.n	80064a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f9      	bne.n	80064a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff ff64 	bl	8006380 <LL_ADC_IsInternalRegulatorEnabled>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10d      	bne.n	80064da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	f043 0210 	orr.w	r2, r3, #16
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ce:	f043 0201 	orr.w	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff ff75 	bl	80063ce <LL_ADC_REG_IsConversionOngoing>
 80064e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 80c5 	bne.w	800667e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 80c1 	bne.w	800667e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006504:	f043 0202 	orr.w	r2, r3, #2
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff49 	bl	80063a8 <LL_ADC_IsEnabled>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800651c:	4860      	ldr	r0, [pc, #384]	; (80066a0 <HAL_ADC_Init+0x284>)
 800651e:	f7ff ff43 	bl	80063a8 <LL_ADC_IsEnabled>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4619      	mov	r1, r3
 800652e:	485d      	ldr	r0, [pc, #372]	; (80066a4 <HAL_ADC_Init+0x288>)
 8006530:	f7ff fde8 	bl	8006104 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7e5b      	ldrb	r3, [r3, #25]
 8006538:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800653e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006544:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800654a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006552:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d106      	bne.n	8006570 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	3b01      	subs	r3, #1
 8006568:	045b      	lsls	r3, r3, #17
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	4b45      	ldr	r3, [pc, #276]	; (80066a8 <HAL_ADC_Init+0x28c>)
 8006594:	4013      	ands	r3, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	69b9      	ldr	r1, [r7, #24]
 800659c:	430b      	orrs	r3, r1
 800659e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff ff12 	bl	80063ce <LL_ADC_REG_IsConversionOngoing>
 80065aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff1f 	bl	80063f4 <LL_ADC_INJ_IsConversionOngoing>
 80065b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d13d      	bne.n	800663a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d13a      	bne.n	800663a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80065c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e0:	f023 0302 	bic.w	r3, r3, #2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	69b9      	ldr	r1, [r7, #24]
 80065ea:	430b      	orrs	r3, r1
 80065ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d118      	bne.n	800662a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006602:	f023 0304 	bic.w	r3, r3, #4
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800660e:	4311      	orrs	r1, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006614:	4311      	orrs	r1, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800661a:	430a      	orrs	r2, r1
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	611a      	str	r2, [r3, #16]
 8006628:	e007      	b.n	800663a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10c      	bne.n	800665c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	f023 010f 	bic.w	r1, r3, #15
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	1e5a      	subs	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
 800665a:	e007      	b.n	800666c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 020f 	bic.w	r2, r2, #15
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006670:	f023 0303 	bic.w	r3, r3, #3
 8006674:	f043 0201 	orr.w	r2, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	655a      	str	r2, [r3, #84]	; 0x54
 800667c:	e007      	b.n	800668e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006682:	f043 0210 	orr.w	r2, r3, #16
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800668e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000078 	.word	0x20000078
 800669c:	053e2d63 	.word	0x053e2d63
 80066a0:	50040000 	.word	0x50040000
 80066a4:	50040300 	.word	0x50040300
 80066a8:	fff0c007 	.word	0xfff0c007

080066ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b0b6      	sub	sp, #216	; 0xd8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_ADC_ConfigChannel+0x22>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e3b9      	b.n	8006e42 <HAL_ADC_ConfigChannel+0x796>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fe77 	bl	80063ce <LL_ADC_REG_IsConversionOngoing>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 839e 	bne.w	8006e24 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b05      	cmp	r3, #5
 80066ee:	d824      	bhi.n	800673a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	3b02      	subs	r3, #2
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d81b      	bhi.n	8006732 <HAL_ADC_ConfigChannel+0x86>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_ADC_ConfigChannel+0x54>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006711 	.word	0x08006711
 8006704:	08006719 	.word	0x08006719
 8006708:	08006721 	.word	0x08006721
 800670c:	08006729 	.word	0x08006729
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	220c      	movs	r2, #12
 8006714:	605a      	str	r2, [r3, #4]
          break;
 8006716:	e011      	b.n	800673c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2212      	movs	r2, #18
 800671c:	605a      	str	r2, [r3, #4]
          break;
 800671e:	e00d      	b.n	800673c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2218      	movs	r2, #24
 8006724:	605a      	str	r2, [r3, #4]
          break;
 8006726:	e009      	b.n	800673c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800672e:	605a      	str	r2, [r3, #4]
          break;
 8006730:	e004      	b.n	800673c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2206      	movs	r2, #6
 8006736:	605a      	str	r2, [r3, #4]
          break;
 8006738:	e000      	b.n	800673c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800673a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6859      	ldr	r1, [r3, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	f7ff fd64 	bl	8006216 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fe3b 	bl	80063ce <LL_ADC_REG_IsConversionOngoing>
 8006758:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fe47 	bl	80063f4 <LL_ADC_INJ_IsConversionOngoing>
 8006766:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800676a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 81a6 	bne.w	8006ac0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006778:	2b00      	cmp	r3, #0
 800677a:	f040 81a1 	bne.w	8006ac0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6819      	ldr	r1, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	461a      	mov	r2, r3
 800678c:	f7ff fd6f 	bl	800626e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	08db      	lsrs	r3, r3, #3
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d00a      	beq.n	80067c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6919      	ldr	r1, [r3, #16]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067c2:	f7ff fcd3 	bl	800616c <LL_ADC_SetOffset>
 80067c6:	e17b      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fcf0 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x148>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fce5 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 80067ea:	4603      	mov	r3, r0
 80067ec:	0e9b      	lsrs	r3, r3, #26
 80067ee:	f003 021f 	and.w	r2, r3, #31
 80067f2:	e01e      	b.n	8006832 <HAL_ADC_ConfigChannel+0x186>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fcda 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 8006800:	4603      	mov	r3, r0
 8006802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800680a:	fa93 f3a3 	rbit	r3, r3
 800680e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800681a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8006822:	2320      	movs	r3, #32
 8006824:	e004      	b.n	8006830 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8006826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800682a:	fab3 f383 	clz	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <HAL_ADC_ConfigChannel+0x19e>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	0e9b      	lsrs	r3, r3, #26
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	e018      	b.n	800687c <HAL_ADC_ConfigChannel+0x1d0>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006856:	fa93 f3a3 	rbit	r3, r3
 800685a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800685e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800686e:	2320      	movs	r3, #32
 8006870:	e004      	b.n	800687c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006876:	fab3 f383 	clz	r3, r3
 800687a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800687c:	429a      	cmp	r2, r3
 800687e:	d106      	bne.n	800688e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2200      	movs	r2, #0
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fca9 	bl	80061e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2101      	movs	r1, #1
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff fc8d 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 800689a:	4603      	mov	r3, r0
 800689c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x20e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2101      	movs	r1, #1
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fc82 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 80068b0:	4603      	mov	r3, r0
 80068b2:	0e9b      	lsrs	r3, r3, #26
 80068b4:	f003 021f 	and.w	r2, r3, #31
 80068b8:	e01e      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x24c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2101      	movs	r1, #1
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff fc77 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068d0:	fa93 f3a3 	rbit	r3, r3
 80068d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80068d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80068e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80068e8:	2320      	movs	r3, #32
 80068ea:	e004      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80068ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x264>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	0e9b      	lsrs	r3, r3, #26
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	e018      	b.n	8006942 <HAL_ADC_ConfigChannel+0x296>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800691c:	fa93 f3a3 	rbit	r3, r3
 8006920:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800692c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006934:	2320      	movs	r3, #32
 8006936:	e004      	b.n	8006942 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800693c:	fab3 f383 	clz	r3, r3
 8006940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006942:	429a      	cmp	r2, r3
 8006944:	d106      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	2101      	movs	r1, #1
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fc46 	bl	80061e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2102      	movs	r1, #2
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fc2a 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 8006960:	4603      	mov	r3, r0
 8006962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x2d4>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2102      	movs	r1, #2
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fc1f 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 8006976:	4603      	mov	r3, r0
 8006978:	0e9b      	lsrs	r3, r3, #26
 800697a:	f003 021f 	and.w	r2, r3, #31
 800697e:	e01e      	b.n	80069be <HAL_ADC_ConfigChannel+0x312>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2102      	movs	r1, #2
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fc14 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 800698c:	4603      	mov	r3, r0
 800698e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006996:	fa93 f3a3 	rbit	r3, r3
 800699a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800699e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80069a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80069ae:	2320      	movs	r3, #32
 80069b0:	e004      	b.n	80069bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80069b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069b6:	fab3 f383 	clz	r3, r3
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <HAL_ADC_ConfigChannel+0x32a>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	0e9b      	lsrs	r3, r3, #26
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	e016      	b.n	8006a04 <HAL_ADC_ConfigChannel+0x358>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069e2:	fa93 f3a3 	rbit	r3, r3
 80069e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80069e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80069ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80069f6:	2320      	movs	r3, #32
 80069f8:	e004      	b.n	8006a04 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80069fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069fe:	fab3 f383 	clz	r3, r3
 8006a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d106      	bne.n	8006a16 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2102      	movs	r1, #2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fbe5 	bl	80061e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2103      	movs	r1, #3
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fbc9 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <HAL_ADC_ConfigChannel+0x396>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2103      	movs	r1, #3
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fbbe 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	0e9b      	lsrs	r3, r3, #26
 8006a3c:	f003 021f 	and.w	r2, r3, #31
 8006a40:	e017      	b.n	8006a72 <HAL_ADC_ConfigChannel+0x3c6>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2103      	movs	r1, #3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fbb3 	bl	80061b4 <LL_ADC_GetOffsetChannel>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a54:	fa93 f3a3 	rbit	r3, r3
 8006a58:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a5c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006a64:	2320      	movs	r3, #32
 8006a66:	e003      	b.n	8006a70 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6a:	fab3 f383 	clz	r3, r3
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <HAL_ADC_ConfigChannel+0x3de>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	0e9b      	lsrs	r3, r3, #26
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	e011      	b.n	8006aae <HAL_ADC_ConfigChannel+0x402>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a92:	fa93 f3a3 	rbit	r3, r3
 8006a96:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006aa2:	2320      	movs	r3, #32
 8006aa4:	e003      	b.n	8006aae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d106      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2103      	movs	r1, #3
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fb90 	bl	80061e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fc6f 	bl	80063a8 <LL_ADC_IsEnabled>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 813f 	bne.w	8006d50 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f7ff fbf0 	bl	80062c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a8e      	ldr	r2, [pc, #568]	; (8006d24 <HAL_ADC_ConfigChannel+0x678>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f040 8130 	bne.w	8006d50 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <HAL_ADC_ConfigChannel+0x46c>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	0e9b      	lsrs	r3, r3, #26
 8006b06:	3301      	adds	r3, #1
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	bf94      	ite	ls
 8006b10:	2301      	movls	r3, #1
 8006b12:	2300      	movhi	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	e019      	b.n	8006b4c <HAL_ADC_ConfigChannel+0x4a0>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b20:	fa93 f3a3 	rbit	r3, r3
 8006b24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006b30:	2320      	movs	r3, #32
 8006b32:	e003      	b.n	8006b3c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b36:	fab3 f383 	clz	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2b09      	cmp	r3, #9
 8006b44:	bf94      	ite	ls
 8006b46:	2301      	movls	r3, #1
 8006b48:	2300      	movhi	r3, #0
 8006b4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d079      	beq.n	8006c44 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d107      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x4c0>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	0e9b      	lsrs	r3, r3, #26
 8006b62:	3301      	adds	r3, #1
 8006b64:	069b      	lsls	r3, r3, #26
 8006b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b6a:	e015      	b.n	8006b98 <HAL_ADC_ConfigChannel+0x4ec>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b74:	fa93 f3a3 	rbit	r3, r3
 8006b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006b84:	2320      	movs	r3, #32
 8006b86:	e003      	b.n	8006b90 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8a:	fab3 f383 	clz	r3, r3
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	3301      	adds	r3, #1
 8006b92:	069b      	lsls	r3, r3, #26
 8006b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x50c>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	0e9b      	lsrs	r3, r3, #26
 8006baa:	3301      	adds	r3, #1
 8006bac:	f003 031f 	and.w	r3, r3, #31
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb6:	e017      	b.n	8006be8 <HAL_ADC_ConfigChannel+0x53c>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc0:	fa93 f3a3 	rbit	r3, r3
 8006bc4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006bd0:	2320      	movs	r3, #32
 8006bd2:	e003      	b.n	8006bdc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	fab3 f383 	clz	r3, r3
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2101      	movs	r1, #1
 8006be4:	fa01 f303 	lsl.w	r3, r1, r3
 8006be8:	ea42 0103 	orr.w	r1, r2, r3
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <HAL_ADC_ConfigChannel+0x562>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	0e9b      	lsrs	r3, r3, #26
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f003 021f 	and.w	r2, r3, #31
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	051b      	lsls	r3, r3, #20
 8006c0c:	e018      	b.n	8006c40 <HAL_ADC_ConfigChannel+0x594>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	fa93 f3a3 	rbit	r3, r3
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006c26:	2320      	movs	r3, #32
 8006c28:	e003      	b.n	8006c32 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	fab3 f383 	clz	r3, r3
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	3301      	adds	r3, #1
 8006c34:	f003 021f 	and.w	r2, r3, #31
 8006c38:	4613      	mov	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c40:	430b      	orrs	r3, r1
 8006c42:	e080      	b.n	8006d46 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d107      	bne.n	8006c60 <HAL_ADC_ConfigChannel+0x5b4>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	0e9b      	lsrs	r3, r3, #26
 8006c56:	3301      	adds	r3, #1
 8006c58:	069b      	lsls	r3, r3, #26
 8006c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c5e:	e015      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x5e0>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	fa93 f3a3 	rbit	r3, r3
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006c78:	2320      	movs	r3, #32
 8006c7a:	e003      	b.n	8006c84 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	fab3 f383 	clz	r3, r3
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	3301      	adds	r3, #1
 8006c86:	069b      	lsls	r3, r3, #26
 8006c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x600>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	0e9b      	lsrs	r3, r3, #26
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8006caa:	e017      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x630>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	fa93 f3a3 	rbit	r3, r3
 8006cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	e003      	b.n	8006cd0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	fab3 f383 	clz	r3, r3
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	ea42 0103 	orr.w	r1, r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10d      	bne.n	8006d08 <HAL_ADC_ConfigChannel+0x65c>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0e9b      	lsrs	r3, r3, #26
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f003 021f 	and.w	r2, r3, #31
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3b1e      	subs	r3, #30
 8006d00:	051b      	lsls	r3, r3, #20
 8006d02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d06:	e01d      	b.n	8006d44 <HAL_ADC_ConfigChannel+0x698>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	fa93 f3a3 	rbit	r3, r3
 8006d14:	613b      	str	r3, [r7, #16]
  return result;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006d20:	2320      	movs	r3, #32
 8006d22:	e005      	b.n	8006d30 <HAL_ADC_ConfigChannel+0x684>
 8006d24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	fab3 f383 	clz	r3, r3
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	3301      	adds	r3, #1
 8006d32:	f003 021f 	and.w	r2, r3, #31
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3b1e      	subs	r3, #30
 8006d3e:	051b      	lsls	r3, r3, #20
 8006d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d44:	430b      	orrs	r3, r1
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	6892      	ldr	r2, [r2, #8]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f7ff fa8f 	bl	800626e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b3d      	ldr	r3, [pc, #244]	; (8006e4c <HAL_ADC_ConfigChannel+0x7a0>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d06c      	beq.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d5c:	483c      	ldr	r0, [pc, #240]	; (8006e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8006d5e:	f7ff f9f7 	bl	8006150 <LL_ADC_GetCommonPathInternalCh>
 8006d62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a3a      	ldr	r2, [pc, #232]	; (8006e54 <HAL_ADC_ConfigChannel+0x7a8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d127      	bne.n	8006dc0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d121      	bne.n	8006dc0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a35      	ldr	r2, [pc, #212]	; (8006e58 <HAL_ADC_ConfigChannel+0x7ac>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d157      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d8e:	4619      	mov	r1, r3
 8006d90:	482f      	ldr	r0, [pc, #188]	; (8006e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8006d92:	f7ff f9ca 	bl	800612a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d96:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <HAL_ADC_ConfigChannel+0x7b0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	099b      	lsrs	r3, r3, #6
 8006d9c:	4a30      	ldr	r2, [pc, #192]	; (8006e60 <HAL_ADC_ConfigChannel+0x7b4>)
 8006d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006da2:	099b      	lsrs	r3, r3, #6
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	4613      	mov	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006db0:	e002      	b.n	8006db8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f9      	bne.n	8006db2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006dbe:	e03a      	b.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <HAL_ADC_ConfigChannel+0x7b8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d113      	bne.n	8006df2 <HAL_ADC_ConfigChannel+0x746>
 8006dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1f      	ldr	r2, [pc, #124]	; (8006e58 <HAL_ADC_ConfigChannel+0x7ac>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d12a      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006de8:	4619      	mov	r1, r3
 8006dea:	4819      	ldr	r0, [pc, #100]	; (8006e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8006dec:	f7ff f99d 	bl	800612a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006df0:	e021      	b.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <HAL_ADC_ConfigChannel+0x7bc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d11c      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d116      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a12      	ldr	r2, [pc, #72]	; (8006e58 <HAL_ADC_ConfigChannel+0x7ac>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d111      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	480c      	ldr	r0, [pc, #48]	; (8006e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8006e1e:	f7ff f984 	bl	800612a <LL_ADC_SetCommonPathInternalCh>
 8006e22:	e008      	b.n	8006e36 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e28:	f043 0220 	orr.w	r2, r3, #32
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006e3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	37d8      	adds	r7, #216	; 0xd8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	80080000 	.word	0x80080000
 8006e50:	50040300 	.word	0x50040300
 8006e54:	c7520000 	.word	0xc7520000
 8006e58:	50040000 	.word	0x50040000
 8006e5c:	20000078 	.word	0x20000078
 8006e60:	053e2d63 	.word	0x053e2d63
 8006e64:	cb840000 	.word	0xcb840000
 8006e68:	80000001 	.word	0x80000001

08006e6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e0ed      	b.n	800705a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fd fea0 	bl	8004bd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ea0:	f7ff f8f4 	bl	800608c <HAL_GetTick>
 8006ea4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ea6:	e012      	b.n	8006ece <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ea8:	f7ff f8f0 	bl	800608c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b0a      	cmp	r3, #10
 8006eb4:	d90b      	bls.n	8006ece <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2205      	movs	r2, #5
 8006ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e0c5      	b.n	800705a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0e5      	beq.n	8006ea8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0202 	bic.w	r2, r2, #2
 8006eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006eec:	f7ff f8ce 	bl	800608c <HAL_GetTick>
 8006ef0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ef2:	e012      	b.n	8006f1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ef4:	f7ff f8ca 	bl	800608c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b0a      	cmp	r3, #10
 8006f00:	d90b      	bls.n	8006f1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2205      	movs	r2, #5
 8006f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e09f      	b.n	800705a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e5      	bne.n	8006ef4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	7e1b      	ldrb	r3, [r3, #24]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d108      	bne.n	8006f42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e007      	b.n	8006f52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7e5b      	ldrb	r3, [r3, #25]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d108      	bne.n	8006f6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	e007      	b.n	8006f7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7e9b      	ldrb	r3, [r3, #26]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d108      	bne.n	8006f96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0220 	orr.w	r2, r2, #32
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	e007      	b.n	8006fa6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0220 	bic.w	r2, r2, #32
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	7edb      	ldrb	r3, [r3, #27]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d108      	bne.n	8006fc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0210 	bic.w	r2, r2, #16
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e007      	b.n	8006fd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0210 	orr.w	r2, r2, #16
 8006fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7f1b      	ldrb	r3, [r3, #28]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d108      	bne.n	8006fea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0208 	orr.w	r2, r2, #8
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e007      	b.n	8006ffa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0208 	bic.w	r2, r2, #8
 8006ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	7f5b      	ldrb	r3, [r3, #29]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d108      	bne.n	8007014 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0204 	orr.w	r2, r2, #4
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e007      	b.n	8007024 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0204 	bic.w	r2, r2, #4
 8007022:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	ea42 0103 	orr.w	r1, r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	1e5a      	subs	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007078:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800707a:	7cfb      	ldrb	r3, [r7, #19]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d003      	beq.n	8007088 <HAL_CAN_ConfigFilter+0x26>
 8007080:	7cfb      	ldrb	r3, [r7, #19]
 8007082:	2b02      	cmp	r3, #2
 8007084:	f040 80aa 	bne.w	80071dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800708e:	f043 0201 	orr.w	r2, r3, #1
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2201      	movs	r2, #1
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	43db      	mvns	r3, r3
 80070b2:	401a      	ands	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d123      	bne.n	800710a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	43db      	mvns	r3, r3
 80070cc:	401a      	ands	r2, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	3248      	adds	r2, #72	; 0x48
 80070ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007100:	6979      	ldr	r1, [r7, #20]
 8007102:	3348      	adds	r3, #72	; 0x48
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	440b      	add	r3, r1
 8007108:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d122      	bne.n	8007158 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	431a      	orrs	r2, r3
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007132:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3248      	adds	r2, #72	; 0x48
 8007138:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800714c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800714e:	6979      	ldr	r1, [r7, #20]
 8007150:	3348      	adds	r3, #72	; 0x48
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	440b      	add	r3, r1
 8007156:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	43db      	mvns	r3, r3
 800716a:	401a      	ands	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007172:	e007      	b.n	8007184 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	431a      	orrs	r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	43db      	mvns	r3, r3
 8007196:	401a      	ands	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800719e:	e007      	b.n	80071b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d107      	bne.n	80071c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071ce:	f023 0201 	bic.w	r2, r3, #1
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	e006      	b.n	80071ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d12e      	bne.n	8007268 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007222:	f7fe ff33 	bl	800608c <HAL_GetTick>
 8007226:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007228:	e012      	b.n	8007250 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800722a:	f7fe ff2f 	bl	800608c <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b0a      	cmp	r3, #10
 8007236:	d90b      	bls.n	8007250 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2205      	movs	r2, #5
 8007248:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e012      	b.n	8007276 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e5      	bne.n	800722a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	e006      	b.n	8007276 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800727e:	b480      	push	{r7}
 8007280:	b089      	sub	sp, #36	; 0x24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007292:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800729c:	7ffb      	ldrb	r3, [r7, #31]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d003      	beq.n	80072aa <HAL_CAN_AddTxMessage+0x2c>
 80072a2:	7ffb      	ldrb	r3, [r7, #31]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	f040 80ad 	bne.w	8007404 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8095 	beq.w	80073f4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	0e1b      	lsrs	r3, r3, #24
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80072d4:	2201      	movs	r2, #1
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	409a      	lsls	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10d      	bne.n	8007302 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	6809      	ldr	r1, [r1, #0]
 80072f4:	431a      	orrs	r2, r3
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	3318      	adds	r3, #24
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	440b      	add	r3, r1
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e00f      	b.n	8007322 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800730c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007316:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	3318      	adds	r3, #24
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	440b      	add	r3, r1
 8007320:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6819      	ldr	r1, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3318      	adds	r3, #24
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	440b      	add	r3, r1
 8007332:	3304      	adds	r3, #4
 8007334:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	7d1b      	ldrb	r3, [r3, #20]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d111      	bne.n	8007362 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	3318      	adds	r3, #24
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	4413      	add	r3, r2
 800734a:	3304      	adds	r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	6811      	ldr	r1, [r2, #0]
 8007352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	3318      	adds	r3, #24
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	440b      	add	r3, r1
 800735e:	3304      	adds	r3, #4
 8007360:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3307      	adds	r3, #7
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	061a      	lsls	r2, r3, #24
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3306      	adds	r3, #6
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3305      	adds	r3, #5
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	4313      	orrs	r3, r2
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	3204      	adds	r2, #4
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	4610      	mov	r0, r2
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	6811      	ldr	r1, [r2, #0]
 800738a:	ea43 0200 	orr.w	r2, r3, r0
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	440b      	add	r3, r1
 8007394:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007398:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3303      	adds	r3, #3
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	061a      	lsls	r2, r3, #24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3302      	adds	r3, #2
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3301      	adds	r3, #1
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	4313      	orrs	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	7812      	ldrb	r2, [r2, #0]
 80073ba:	4610      	mov	r0, r2
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	6811      	ldr	r1, [r2, #0]
 80073c0:	ea43 0200 	orr.w	r2, r3, r0
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	440b      	add	r3, r1
 80073ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80073ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	3318      	adds	r3, #24
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	4413      	add	r3, r2
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	6811      	ldr	r1, [r2, #0]
 80073e2:	f043 0201 	orr.w	r2, r3, #1
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	3318      	adds	r3, #24
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	440b      	add	r3, r1
 80073ee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	e00e      	b.n	8007412 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e006      	b.n	8007412 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
  }
}
 8007412:	4618      	mov	r0, r3
 8007414:	3724      	adds	r7, #36	; 0x24
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007430:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d002      	beq.n	800743e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d11d      	bne.n	800747a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800747a:	68fb      	ldr	r3, [r7, #12]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800749c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d003      	beq.n	80074ac <HAL_CAN_GetRxMessage+0x24>
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	f040 80f3 	bne.w	8007692 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10e      	bne.n	80074d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d116      	bne.n	80074ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0e7      	b.n	80076a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d107      	bne.n	80074ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e0d8      	b.n	80076a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	331b      	adds	r3, #27
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0204 	and.w	r2, r3, #4
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10c      	bne.n	8007526 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	331b      	adds	r3, #27
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	4413      	add	r3, r2
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	0d5b      	lsrs	r3, r3, #21
 800751c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e00b      	b.n	800753e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	331b      	adds	r3, #27
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	4413      	add	r3, r2
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	331b      	adds	r3, #27
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	4413      	add	r3, r2
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0202 	and.w	r2, r3, #2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	331b      	adds	r3, #27
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	4413      	add	r3, r2
 8007560:	3304      	adds	r3, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 020f 	and.w	r2, r3, #15
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	331b      	adds	r3, #27
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4413      	add	r3, r2
 8007578:	3304      	adds	r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	b2da      	uxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	331b      	adds	r3, #27
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	4413      	add	r3, r2
 8007590:	3304      	adds	r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	0a1a      	lsrs	r2, r3, #8
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	3301      	adds	r3, #1
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	0c1a      	lsrs	r2, r3, #16
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	3302      	adds	r3, #2
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	0e1a      	lsrs	r2, r3, #24
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	3303      	adds	r3, #3
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	4413      	add	r3, r2
 800760a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	3304      	adds	r3, #4
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	4413      	add	r3, r2
 8007622:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	0a1a      	lsrs	r2, r3, #8
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	3305      	adds	r3, #5
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	4413      	add	r3, r2
 800763c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	0c1a      	lsrs	r2, r3, #16
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	3306      	adds	r3, #6
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	0e1a      	lsrs	r2, r3, #24
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	3307      	adds	r3, #7
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0220 	orr.w	r2, r2, #32
 800767a:	60da      	str	r2, [r3, #12]
 800767c:	e007      	b.n	800768e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0220 	orr.w	r2, r2, #32
 800768c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	e006      	b.n	80076a0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
  }
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076c0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d002      	beq.n	80076ce <HAL_CAN_GetRxFifoFillLevel+0x22>
 80076c8:	7afb      	ldrb	r3, [r7, #11]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d10f      	bne.n	80076ee <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e005      	b.n	80076ee <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800770c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d002      	beq.n	800771a <HAL_CAN_ActivateNotification+0x1e>
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d109      	bne.n	800772e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6959      	ldr	r1, [r3, #20]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	e006      	b.n	800773c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
  }
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007750:	2300      	movs	r3, #0
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d07c      	beq.n	8007888 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d023      	beq.n	80077e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2201      	movs	r2, #1
 800779e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fb fee8 	bl	8003580 <HAL_CAN_TxMailbox0CompleteCallback>
 80077b0:	e016      	b.n	80077e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
 80077c4:	e00c      	b.n	80077e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
 80077d8:	e002      	b.n	80077e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f96b 	bl	8007ab6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d024      	beq.n	8007834 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fb fece 	bl	80035a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8007804:	e016      	b.n	8007834 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
 8007818:	e00c      	b.n	8007834 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	e002      	b.n	8007834 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f94b 	bl	8007aca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d024      	beq.n	8007888 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fb feb4 	bl	80035c0 <HAL_CAN_TxMailbox2CompleteCallback>
 8007858:	e016      	b.n	8007888 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
 800786c:	e00c      	b.n	8007888 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
 8007880:	e002      	b.n	8007888 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f92b 	bl	8007ade <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00c      	beq.n	80078ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2210      	movs	r2, #16
 80078aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	f003 0304 	and.w	r3, r3, #4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d006      	beq.n	80078ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2208      	movs	r2, #8
 80078c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f912 	bl	8007af2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fb fe2e 	bl	8003548 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007906:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2210      	movs	r2, #16
 800790e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f003 0308 	and.w	r3, r3, #8
 8007920:	2b00      	cmp	r3, #0
 8007922:	d006      	beq.n	8007932 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2208      	movs	r2, #8
 800792a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f8f4 	bl	8007b1a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8db 	bl	8007b06 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	2b00      	cmp	r3, #0
 8007962:	d006      	beq.n	8007972 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2210      	movs	r2, #16
 800796a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f8de 	bl	8007b2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2208      	movs	r2, #8
 800798c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8d7 	bl	8007b42 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d07b      	beq.n	8007a96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d072      	beq.n	8007a8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d008      	beq.n	80079e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	f043 0302 	orr.w	r3, r3, #2
 80079de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	f043 0304 	orr.w	r3, r3, #4
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d043      	beq.n	8007a8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d03e      	beq.n	8007a8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a16:	2b60      	cmp	r3, #96	; 0x60
 8007a18:	d02b      	beq.n	8007a72 <HAL_CAN_IRQHandler+0x32a>
 8007a1a:	2b60      	cmp	r3, #96	; 0x60
 8007a1c:	d82e      	bhi.n	8007a7c <HAL_CAN_IRQHandler+0x334>
 8007a1e:	2b50      	cmp	r3, #80	; 0x50
 8007a20:	d022      	beq.n	8007a68 <HAL_CAN_IRQHandler+0x320>
 8007a22:	2b50      	cmp	r3, #80	; 0x50
 8007a24:	d82a      	bhi.n	8007a7c <HAL_CAN_IRQHandler+0x334>
 8007a26:	2b40      	cmp	r3, #64	; 0x40
 8007a28:	d019      	beq.n	8007a5e <HAL_CAN_IRQHandler+0x316>
 8007a2a:	2b40      	cmp	r3, #64	; 0x40
 8007a2c:	d826      	bhi.n	8007a7c <HAL_CAN_IRQHandler+0x334>
 8007a2e:	2b30      	cmp	r3, #48	; 0x30
 8007a30:	d010      	beq.n	8007a54 <HAL_CAN_IRQHandler+0x30c>
 8007a32:	2b30      	cmp	r3, #48	; 0x30
 8007a34:	d822      	bhi.n	8007a7c <HAL_CAN_IRQHandler+0x334>
 8007a36:	2b10      	cmp	r3, #16
 8007a38:	d002      	beq.n	8007a40 <HAL_CAN_IRQHandler+0x2f8>
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d005      	beq.n	8007a4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007a3e:	e01d      	b.n	8007a7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	f043 0308 	orr.w	r3, r3, #8
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a48:	e019      	b.n	8007a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	f043 0310 	orr.w	r3, r3, #16
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a52:	e014      	b.n	8007a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	f043 0320 	orr.w	r3, r3, #32
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a5c:	e00f      	b.n	8007a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a66:	e00a      	b.n	8007a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a70:	e005      	b.n	8007a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a7a:	e000      	b.n	8007a7e <HAL_CAN_IRQHandler+0x336>
            break;
 8007a7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699a      	ldr	r2, [r3, #24]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2204      	movs	r2, #4
 8007a94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f854 	bl	8007b56 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3728      	adds	r7, #40	; 0x28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007afa:	bf00      	nop
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b9e:	4a04      	ldr	r2, [pc, #16]	; (8007bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	60d3      	str	r3, [r2, #12]
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	e000ed00 	.word	0xe000ed00

08007bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <__NVIC_GetPriorityGrouping+0x18>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	0a1b      	lsrs	r3, r3, #8
 8007bbe:	f003 0307 	and.w	r3, r3, #7
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	e000ed00 	.word	0xe000ed00

08007bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	db0b      	blt.n	8007bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	f003 021f 	and.w	r2, r3, #31
 8007be8:	4907      	ldr	r1, [pc, #28]	; (8007c08 <__NVIC_EnableIRQ+0x38>)
 8007bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	e000e100 	.word	0xe000e100

08007c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	6039      	str	r1, [r7, #0]
 8007c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	db0a      	blt.n	8007c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	490c      	ldr	r1, [pc, #48]	; (8007c58 <__NVIC_SetPriority+0x4c>)
 8007c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2a:	0112      	lsls	r2, r2, #4
 8007c2c:	b2d2      	uxtb	r2, r2
 8007c2e:	440b      	add	r3, r1
 8007c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c34:	e00a      	b.n	8007c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	4908      	ldr	r1, [pc, #32]	; (8007c5c <__NVIC_SetPriority+0x50>)
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	3b04      	subs	r3, #4
 8007c44:	0112      	lsls	r2, r2, #4
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	440b      	add	r3, r1
 8007c4a:	761a      	strb	r2, [r3, #24]
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	e000e100 	.word	0xe000e100
 8007c5c:	e000ed00 	.word	0xe000ed00

08007c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b089      	sub	sp, #36	; 0x24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f1c3 0307 	rsb	r3, r3, #7
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	bf28      	it	cs
 8007c7e:	2304      	movcs	r3, #4
 8007c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	3304      	adds	r3, #4
 8007c86:	2b06      	cmp	r3, #6
 8007c88:	d902      	bls.n	8007c90 <NVIC_EncodePriority+0x30>
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	3b03      	subs	r3, #3
 8007c8e:	e000      	b.n	8007c92 <NVIC_EncodePriority+0x32>
 8007c90:	2300      	movs	r3, #0
 8007c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9e:	43da      	mvns	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb2:	43d9      	mvns	r1, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cb8:	4313      	orrs	r3, r2
         );
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3724      	adds	r7, #36	; 0x24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff ff4c 	bl	8007b6c <__NVIC_SetPriorityGrouping>
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cee:	f7ff ff61 	bl	8007bb4 <__NVIC_GetPriorityGrouping>
 8007cf2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	6978      	ldr	r0, [r7, #20]
 8007cfa:	f7ff ffb1 	bl	8007c60 <NVIC_EncodePriority>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff ff80 	bl	8007c0c <__NVIC_SetPriority>
}
 8007d0c:	bf00      	nop
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff ff54 	bl	8007bd0 <__NVIC_EnableIRQ>
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e014      	b.n	8007d6c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	791b      	ldrb	r3, [r3, #4]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d105      	bne.n	8007d58 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fc ffa2 	bl	8004c9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	795b      	ldrb	r3, [r3, #5]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_DAC_Start_DMA+0x1e>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e0ab      	b.n	8007eea <HAL_DAC_Start_DMA+0x176>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d12f      	bne.n	8007e04 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	4a52      	ldr	r2, [pc, #328]	; (8007ef4 <HAL_DAC_Start_DMA+0x180>)
 8007daa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4a51      	ldr	r2, [pc, #324]	; (8007ef8 <HAL_DAC_Start_DMA+0x184>)
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	4a50      	ldr	r2, [pc, #320]	; (8007efc <HAL_DAC_Start_DMA+0x188>)
 8007dba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d013      	beq.n	8007dfa <HAL_DAC_Start_DMA+0x86>
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d845      	bhi.n	8007e64 <HAL_DAC_Start_DMA+0xf0>
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_DAC_Start_DMA+0x72>
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d005      	beq.n	8007df0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007de4:	e03e      	b.n	8007e64 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	613b      	str	r3, [r7, #16]
        break;
 8007dee:	e03c      	b.n	8007e6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	613b      	str	r3, [r7, #16]
        break;
 8007df8:	e037      	b.n	8007e6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3310      	adds	r3, #16
 8007e00:	613b      	str	r3, [r7, #16]
        break;
 8007e02:	e032      	b.n	8007e6a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	4a3d      	ldr	r2, [pc, #244]	; (8007f00 <HAL_DAC_Start_DMA+0x18c>)
 8007e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	4a3c      	ldr	r2, [pc, #240]	; (8007f04 <HAL_DAC_Start_DMA+0x190>)
 8007e12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4a3b      	ldr	r2, [pc, #236]	; (8007f08 <HAL_DAC_Start_DMA+0x194>)
 8007e1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d013      	beq.n	8007e5a <HAL_DAC_Start_DMA+0xe6>
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d817      	bhi.n	8007e68 <HAL_DAC_Start_DMA+0xf4>
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_DAC_Start_DMA+0xd2>
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d005      	beq.n	8007e50 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007e44:	e010      	b.n	8007e68 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3314      	adds	r3, #20
 8007e4c:	613b      	str	r3, [r7, #16]
        break;
 8007e4e:	e00c      	b.n	8007e6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3318      	adds	r3, #24
 8007e56:	613b      	str	r3, [r7, #16]
        break;
 8007e58:	e007      	b.n	8007e6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	331c      	adds	r3, #28
 8007e60:	613b      	str	r3, [r7, #16]
        break;
 8007e62:	e002      	b.n	8007e6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8007e64:	bf00      	nop
 8007e66:	e000      	b.n	8007e6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8007e68:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d111      	bne.n	8007e94 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6898      	ldr	r0, [r3, #8]
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	f000 fb13 	bl	80084b4 <HAL_DMA_Start_IT>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
 8007e92:	e010      	b.n	8007eb6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007ea2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68d8      	ldr	r0, [r3, #12]
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	f000 fb01 	bl	80084b4 <HAL_DMA_Start_IT>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10c      	bne.n	8007edc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6819      	ldr	r1, [r3, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2201      	movs	r2, #1
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e005      	b.n	8007ee8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f043 0204 	orr.w	r2, r3, #4
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	0800821d 	.word	0x0800821d
 8007ef8:	0800823f 	.word	0x0800823f
 8007efc:	0800825b 	.word	0x0800825b
 8007f00:	080082d9 	.word	0x080082d9
 8007f04:	080082fb 	.word	0x080082fb
 8007f08:	08008317 	.word	0x08008317

08007f0c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f22:	d120      	bne.n	8007f66 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f32:	d118      	bne.n	8007f66 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2204      	movs	r2, #4
 8007f38:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f043 0201 	orr.w	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f5e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f837 	bl	8007fd4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f74:	d120      	bne.n	8007fb8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f84:	d118      	bne.n	8007fb8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2204      	movs	r2, #4
 8007f8a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f043 0202 	orr.w	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007fa0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007fb0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f986 	bl	80082c4 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	795b      	ldrb	r3, [r3, #5]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_DAC_ConfigChannel+0x1c>
 8008000:	2302      	movs	r3, #2
 8008002:	e107      	b.n	8008214 <HAL_DAC_ConfigChannel+0x22c>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2202      	movs	r2, #2
 800800e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b04      	cmp	r3, #4
 8008016:	d174      	bne.n	8008102 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008018:	f7fe f838 	bl	800608c <HAL_GetTick>
 800801c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d134      	bne.n	800808e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008024:	e011      	b.n	800804a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008026:	f7fe f831 	bl	800608c <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	d90a      	bls.n	800804a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f043 0208 	orr.w	r2, r3, #8
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2203      	movs	r2, #3
 8008044:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e0e4      	b.n	8008214 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e6      	bne.n	8008026 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8008058:	2001      	movs	r0, #1
 800805a:	f7fe f823 	bl	80060a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	6992      	ldr	r2, [r2, #24]
 8008066:	641a      	str	r2, [r3, #64]	; 0x40
 8008068:	e01e      	b.n	80080a8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800806a:	f7fe f80f 	bl	800608c <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b01      	cmp	r3, #1
 8008076:	d90a      	bls.n	800808e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f043 0208 	orr.w	r2, r3, #8
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2203      	movs	r2, #3
 8008088:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e0c2      	b.n	8008214 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008094:	2b00      	cmp	r3, #0
 8008096:	dbe8      	blt.n	800806a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8008098:	2001      	movs	r0, #1
 800809a:	f7fe f803 	bl	80060a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	6992      	ldr	r2, [r2, #24]
 80080a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80080b8:	fa01 f303 	lsl.w	r3, r1, r3
 80080bc:	43db      	mvns	r3, r3
 80080be:	ea02 0103 	and.w	r1, r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	69da      	ldr	r2, [r3, #28]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	409a      	lsls	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	21ff      	movs	r1, #255	; 0xff
 80080e4:	fa01 f303 	lsl.w	r3, r1, r3
 80080e8:	43db      	mvns	r3, r3
 80080ea:	ea02 0103 	and.w	r1, r2, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	409a      	lsls	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d11d      	bne.n	8008146 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	221f      	movs	r2, #31
 800811a:	fa02 f303 	lsl.w	r3, r2, r3
 800811e:	43db      	mvns	r3, r3
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	4013      	ands	r3, r2
 8008124:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f003 0310 	and.w	r3, r3, #16
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4313      	orrs	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2207      	movs	r2, #7
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	43db      	mvns	r3, r3
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	4013      	ands	r3, r2
 8008160:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	431a      	orrs	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	fa02 f303 	lsl.w	r3, r2, r3
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	4313      	orrs	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43da      	mvns	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	400a      	ands	r2, r1
 80081aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f003 0310 	and.w	r3, r3, #16
 80081ba:	f640 72fc 	movw	r2, #4092	; 0xffc
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	43db      	mvns	r3, r3
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	4013      	ands	r3, r2
 80081c8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	fa02 f303 	lsl.w	r3, r2, r3
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	4313      	orrs	r3, r2
 80081e0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6819      	ldr	r1, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	22c0      	movs	r2, #192	; 0xc0
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	43da      	mvns	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	400a      	ands	r2, r1
 8008204:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7fb ffa4 	bl	8004178 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	711a      	strb	r2, [r3, #4]
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7fb ff83 	bl	8004158 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f043 0204 	orr.w	r2, r3, #4
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff fea3 	bl	8007fc0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	711a      	strb	r2, [r3, #4]
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff ffce 	bl	8008288 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	711a      	strb	r2, [r3, #4]
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff ffc7 	bl	800829c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800830e:	bf00      	nop
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f043 0204 	orr.w	r2, r3, #4
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff ffbd 	bl	80082b0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	711a      	strb	r2, [r3, #4]
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e098      	b.n	8008488 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	4b4d      	ldr	r3, [pc, #308]	; (8008494 <HAL_DMA_Init+0x150>)
 800835e:	429a      	cmp	r2, r3
 8008360:	d80f      	bhi.n	8008382 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	4b4b      	ldr	r3, [pc, #300]	; (8008498 <HAL_DMA_Init+0x154>)
 800836a:	4413      	add	r3, r2
 800836c:	4a4b      	ldr	r2, [pc, #300]	; (800849c <HAL_DMA_Init+0x158>)
 800836e:	fba2 2303 	umull	r2, r3, r2, r3
 8008372:	091b      	lsrs	r3, r3, #4
 8008374:	009a      	lsls	r2, r3, #2
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a48      	ldr	r2, [pc, #288]	; (80084a0 <HAL_DMA_Init+0x15c>)
 800837e:	641a      	str	r2, [r3, #64]	; 0x40
 8008380:	e00e      	b.n	80083a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	4b46      	ldr	r3, [pc, #280]	; (80084a4 <HAL_DMA_Init+0x160>)
 800838a:	4413      	add	r3, r2
 800838c:	4a43      	ldr	r2, [pc, #268]	; (800849c <HAL_DMA_Init+0x158>)
 800838e:	fba2 2303 	umull	r2, r3, r2, r3
 8008392:	091b      	lsrs	r3, r3, #4
 8008394:	009a      	lsls	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a42      	ldr	r2, [pc, #264]	; (80084a8 <HAL_DMA_Init+0x164>)
 800839e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80083b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80083c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083fa:	d039      	beq.n	8008470 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	4a27      	ldr	r2, [pc, #156]	; (80084a0 <HAL_DMA_Init+0x15c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d11a      	bne.n	800843c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008406:	4b29      	ldr	r3, [pc, #164]	; (80084ac <HAL_DMA_Init+0x168>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840e:	f003 031c 	and.w	r3, r3, #28
 8008412:	210f      	movs	r1, #15
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	43db      	mvns	r3, r3
 800841a:	4924      	ldr	r1, [pc, #144]	; (80084ac <HAL_DMA_Init+0x168>)
 800841c:	4013      	ands	r3, r2
 800841e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008420:	4b22      	ldr	r3, [pc, #136]	; (80084ac <HAL_DMA_Init+0x168>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6859      	ldr	r1, [r3, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842c:	f003 031c 	and.w	r3, r3, #28
 8008430:	fa01 f303 	lsl.w	r3, r1, r3
 8008434:	491d      	ldr	r1, [pc, #116]	; (80084ac <HAL_DMA_Init+0x168>)
 8008436:	4313      	orrs	r3, r2
 8008438:	600b      	str	r3, [r1, #0]
 800843a:	e019      	b.n	8008470 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <HAL_DMA_Init+0x16c>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008444:	f003 031c 	and.w	r3, r3, #28
 8008448:	210f      	movs	r1, #15
 800844a:	fa01 f303 	lsl.w	r3, r1, r3
 800844e:	43db      	mvns	r3, r3
 8008450:	4917      	ldr	r1, [pc, #92]	; (80084b0 <HAL_DMA_Init+0x16c>)
 8008452:	4013      	ands	r3, r2
 8008454:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008456:	4b16      	ldr	r3, [pc, #88]	; (80084b0 <HAL_DMA_Init+0x16c>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6859      	ldr	r1, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	f003 031c 	and.w	r3, r3, #28
 8008466:	fa01 f303 	lsl.w	r3, r1, r3
 800846a:	4911      	ldr	r1, [pc, #68]	; (80084b0 <HAL_DMA_Init+0x16c>)
 800846c:	4313      	orrs	r3, r2
 800846e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	40020407 	.word	0x40020407
 8008498:	bffdfff8 	.word	0xbffdfff8
 800849c:	cccccccd 	.word	0xcccccccd
 80084a0:	40020000 	.word	0x40020000
 80084a4:	bffdfbf8 	.word	0xbffdfbf8
 80084a8:	40020400 	.word	0x40020400
 80084ac:	400200a8 	.word	0x400200a8
 80084b0:	400204a8 	.word	0x400204a8

080084b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_DMA_Start_IT+0x20>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e04b      	b.n	800856c <HAL_DMA_Start_IT+0xb8>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d13a      	bne.n	800855e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 f8e0 	bl	80086d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 020e 	orr.w	r2, r2, #14
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	e00f      	b.n	800854c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0204 	bic.w	r2, r2, #4
 800853a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 020a 	orr.w	r2, r2, #10
 800854a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e005      	b.n	800856a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008566:	2302      	movs	r3, #2
 8008568:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800856a:	7dfb      	ldrb	r3, [r7, #23]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008590:	f003 031c 	and.w	r3, r3, #28
 8008594:	2204      	movs	r2, #4
 8008596:	409a      	lsls	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4013      	ands	r3, r2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d026      	beq.n	80085ee <HAL_DMA_IRQHandler+0x7a>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d021      	beq.n	80085ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d107      	bne.n	80085c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0204 	bic.w	r2, r2, #4
 80085c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085cc:	f003 021c 	and.w	r2, r3, #28
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	2104      	movs	r1, #4
 80085d6:	fa01 f202 	lsl.w	r2, r1, r2
 80085da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d071      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80085ec:	e06c      	b.n	80086c8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f2:	f003 031c 	and.w	r3, r3, #28
 80085f6:	2202      	movs	r2, #2
 80085f8:	409a      	lsls	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4013      	ands	r3, r2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d02e      	beq.n	8008660 <HAL_DMA_IRQHandler+0xec>
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d029      	beq.n	8008660 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 020a 	bic.w	r2, r2, #10
 8008628:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008636:	f003 021c 	and.w	r2, r3, #28
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	2102      	movs	r1, #2
 8008640:	fa01 f202 	lsl.w	r2, r1, r2
 8008644:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d038      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800865e:	e033      	b.n	80086c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008664:	f003 031c 	and.w	r3, r3, #28
 8008668:	2208      	movs	r2, #8
 800866a:	409a      	lsls	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4013      	ands	r3, r2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d02a      	beq.n	80086ca <HAL_DMA_IRQHandler+0x156>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d025      	beq.n	80086ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 020e 	bic.w	r2, r2, #14
 800868c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	f003 021c 	and.w	r2, r3, #28
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2101      	movs	r1, #1
 800869c:	fa01 f202 	lsl.w	r2, r1, r2
 80086a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
}
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b085      	sub	sp, #20
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e4:	f003 021c 	and.w	r2, r3, #28
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	2101      	movs	r1, #1
 80086ee:	fa01 f202 	lsl.w	r2, r1, r2
 80086f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2b10      	cmp	r3, #16
 8008702:	d108      	bne.n	8008716 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008714:	e007      	b.n	8008726 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	60da      	str	r2, [r3, #12]
}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
	...

08008734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008742:	e148      	b.n	80089d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	2101      	movs	r1, #1
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	fa01 f303 	lsl.w	r3, r1, r3
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 813a 	beq.w	80089d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f003 0303 	and.w	r3, r3, #3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d005      	beq.n	8008774 <HAL_GPIO_Init+0x40>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f003 0303 	and.w	r3, r3, #3
 8008770:	2b02      	cmp	r3, #2
 8008772:	d130      	bne.n	80087d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	2203      	movs	r2, #3
 8008780:	fa02 f303 	lsl.w	r3, r2, r3
 8008784:	43db      	mvns	r3, r3
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4013      	ands	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80087aa:	2201      	movs	r2, #1
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	fa02 f303 	lsl.w	r3, r2, r3
 80087b2:	43db      	mvns	r3, r3
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4013      	ands	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	091b      	lsrs	r3, r3, #4
 80087c0:	f003 0201 	and.w	r2, r3, #1
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d017      	beq.n	8008812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	2203      	movs	r2, #3
 80087ee:	fa02 f303 	lsl.w	r3, r2, r3
 80087f2:	43db      	mvns	r3, r3
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4013      	ands	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4313      	orrs	r3, r2
 800880a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	2b02      	cmp	r3, #2
 800881c:	d123      	bne.n	8008866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	08da      	lsrs	r2, r3, #3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3208      	adds	r2, #8
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	220f      	movs	r2, #15
 8008836:	fa02 f303 	lsl.w	r3, r2, r3
 800883a:	43db      	mvns	r3, r3
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	4013      	ands	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	08da      	lsrs	r2, r3, #3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3208      	adds	r2, #8
 8008860:	6939      	ldr	r1, [r7, #16]
 8008862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	2203      	movs	r2, #3
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	43db      	mvns	r3, r3
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4013      	ands	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f003 0203 	and.w	r2, r3, #3
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8094 	beq.w	80089d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088a8:	4b52      	ldr	r3, [pc, #328]	; (80089f4 <HAL_GPIO_Init+0x2c0>)
 80088aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ac:	4a51      	ldr	r2, [pc, #324]	; (80089f4 <HAL_GPIO_Init+0x2c0>)
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	6613      	str	r3, [r2, #96]	; 0x60
 80088b4:	4b4f      	ldr	r3, [pc, #316]	; (80089f4 <HAL_GPIO_Init+0x2c0>)
 80088b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	60bb      	str	r3, [r7, #8]
 80088be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80088c0:	4a4d      	ldr	r2, [pc, #308]	; (80089f8 <HAL_GPIO_Init+0x2c4>)
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	089b      	lsrs	r3, r3, #2
 80088c6:	3302      	adds	r3, #2
 80088c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	220f      	movs	r2, #15
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	43db      	mvns	r3, r3
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4013      	ands	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80088ea:	d00d      	beq.n	8008908 <HAL_GPIO_Init+0x1d4>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a43      	ldr	r2, [pc, #268]	; (80089fc <HAL_GPIO_Init+0x2c8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <HAL_GPIO_Init+0x1d0>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a42      	ldr	r2, [pc, #264]	; (8008a00 <HAL_GPIO_Init+0x2cc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d101      	bne.n	8008900 <HAL_GPIO_Init+0x1cc>
 80088fc:	2302      	movs	r3, #2
 80088fe:	e004      	b.n	800890a <HAL_GPIO_Init+0x1d6>
 8008900:	2307      	movs	r3, #7
 8008902:	e002      	b.n	800890a <HAL_GPIO_Init+0x1d6>
 8008904:	2301      	movs	r3, #1
 8008906:	e000      	b.n	800890a <HAL_GPIO_Init+0x1d6>
 8008908:	2300      	movs	r3, #0
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	f002 0203 	and.w	r2, r2, #3
 8008910:	0092      	lsls	r2, r2, #2
 8008912:	4093      	lsls	r3, r2
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800891a:	4937      	ldr	r1, [pc, #220]	; (80089f8 <HAL_GPIO_Init+0x2c4>)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	089b      	lsrs	r3, r3, #2
 8008920:	3302      	adds	r3, #2
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008928:	4b36      	ldr	r3, [pc, #216]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	43db      	mvns	r3, r3
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4013      	ands	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800894c:	4a2d      	ldr	r2, [pc, #180]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008952:	4b2c      	ldr	r3, [pc, #176]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	43db      	mvns	r3, r3
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4013      	ands	r3, r2
 8008960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008976:	4a23      	ldr	r2, [pc, #140]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800897c:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	43db      	mvns	r3, r3
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	4013      	ands	r3, r2
 800898a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4313      	orrs	r3, r2
 800899e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80089a0:	4a18      	ldr	r2, [pc, #96]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80089a6:	4b17      	ldr	r3, [pc, #92]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	43db      	mvns	r3, r3
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4013      	ands	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80089ca:	4a0e      	ldr	r2, [pc, #56]	; (8008a04 <HAL_GPIO_Init+0x2d0>)
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	3301      	adds	r3, #1
 80089d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	fa22 f303 	lsr.w	r3, r2, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f47f aeaf 	bne.w	8008744 <HAL_GPIO_Init+0x10>
  }
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	40021000 	.word	0x40021000
 80089f8:	40010000 	.word	0x40010000
 80089fc:	48000400 	.word	0x48000400
 8008a00:	48000800 	.word	0x48000800
 8008a04:	40010400 	.word	0x40010400

08008a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	887b      	ldrh	r3, [r7, #2]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a20:	2301      	movs	r3, #1
 8008a22:	73fb      	strb	r3, [r7, #15]
 8008a24:	e001      	b.n	8008a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	807b      	strh	r3, [r7, #2]
 8008a44:	4613      	mov	r3, r2
 8008a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a48:	787b      	ldrb	r3, [r7, #1]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a4e:	887a      	ldrh	r2, [r7, #2]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008a54:	e002      	b.n	8008a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008a56:	887a      	ldrh	r2, [r7, #2]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e081      	b.n	8008b7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fc f9ac 	bl	8004dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2224      	movs	r2, #36	; 0x24
 8008a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f022 0201 	bic.w	r2, r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d107      	bne.n	8008ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ade:	609a      	str	r2, [r3, #8]
 8008ae0:	e006      	b.n	8008af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d104      	bne.n	8008b02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	69d9      	ldr	r1, [r3, #28]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a1a      	ldr	r2, [r3, #32]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	461a      	mov	r2, r3
 8008b94:	460b      	mov	r3, r1
 8008b96:	817b      	strh	r3, [r7, #10]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	f040 80da 	bne.w	8008d5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_I2C_Master_Transmit+0x30>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e0d3      	b.n	8008d60 <HAL_I2C_Master_Transmit+0x1d8>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008bc0:	f7fd fa64 	bl	800608c <HAL_GetTick>
 8008bc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	2319      	movs	r3, #25
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 f8f0 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e0be      	b.n	8008d60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2221      	movs	r2, #33	; 0x21
 8008be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2210      	movs	r2, #16
 8008bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	893a      	ldrh	r2, [r7, #8]
 8008c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2bff      	cmp	r3, #255	; 0xff
 8008c12:	d90e      	bls.n	8008c32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	22ff      	movs	r2, #255	; 0xff
 8008c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	8979      	ldrh	r1, [r7, #10]
 8008c22:	4b51      	ldr	r3, [pc, #324]	; (8008d68 <HAL_I2C_Master_Transmit+0x1e0>)
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 fa6c 	bl	8009108 <I2C_TransferConfig>
 8008c30:	e06c      	b.n	8008d0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	8979      	ldrh	r1, [r7, #10]
 8008c44:	4b48      	ldr	r3, [pc, #288]	; (8008d68 <HAL_I2C_Master_Transmit+0x1e0>)
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fa5b 	bl	8009108 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008c52:	e05b      	b.n	8008d0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	6a39      	ldr	r1, [r7, #32]
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f8ed 	bl	8008e38 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e07b      	b.n	8008d60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d034      	beq.n	8008d0c <HAL_I2C_Master_Transmit+0x184>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d130      	bne.n	8008d0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2180      	movs	r1, #128	; 0x80
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f87f 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e04d      	b.n	8008d60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2bff      	cmp	r3, #255	; 0xff
 8008ccc:	d90e      	bls.n	8008cec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	22ff      	movs	r2, #255	; 0xff
 8008cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	8979      	ldrh	r1, [r7, #10]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 fa0f 	bl	8009108 <I2C_TransferConfig>
 8008cea:	e00f      	b.n	8008d0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	8979      	ldrh	r1, [r7, #10]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 f9fe 	bl	8009108 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d19e      	bne.n	8008c54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	6a39      	ldr	r1, [r7, #32]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f8cc 	bl	8008eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e01a      	b.n	8008d60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6859      	ldr	r1, [r3, #4]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <HAL_I2C_Master_Transmit+0x1e4>)
 8008d3e:	400b      	ands	r3, r1
 8008d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e000      	b.n	8008d60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008d5e:	2302      	movs	r3, #2
  }
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	80002000 	.word	0x80002000
 8008d6c:	fe00e800 	.word	0xfe00e800

08008d70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d103      	bne.n	8008d8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d007      	beq.n	8008dac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	619a      	str	r2, [r3, #24]
  }
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dc8:	e022      	b.n	8008e10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd0:	d01e      	beq.n	8008e10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd2:	f7fd f95b 	bl	800608c <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d113      	bne.n	8008e10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dec:	f043 0220 	orr.w	r2, r3, #32
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2220      	movs	r2, #32
 8008df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e00f      	b.n	8008e30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4013      	ands	r3, r2
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	bf0c      	ite	eq
 8008e20:	2301      	moveq	r3, #1
 8008e22:	2300      	movne	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d0cd      	beq.n	8008dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e44:	e02c      	b.n	8008ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f870 	bl	8008f30 <I2C_IsErrorOccurred>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e02a      	b.n	8008eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	d01e      	beq.n	8008ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e62:	f7fd f913 	bl	800608c <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d302      	bcc.n	8008e78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d113      	bne.n	8008ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7c:	f043 0220 	orr.w	r2, r3, #32
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e007      	b.n	8008eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d1cb      	bne.n	8008e46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ec4:	e028      	b.n	8008f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f830 	bl	8008f30 <I2C_IsErrorOccurred>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e026      	b.n	8008f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eda:	f7fd f8d7 	bl	800608c <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d302      	bcc.n	8008ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d113      	bne.n	8008f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef4:	f043 0220 	orr.w	r2, r3, #32
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e007      	b.n	8008f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f003 0320 	and.w	r3, r3, #32
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	d1cf      	bne.n	8008ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08a      	sub	sp, #40	; 0x28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d075      	beq.n	8009048 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2210      	movs	r2, #16
 8008f62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f64:	e056      	b.n	8009014 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d052      	beq.n	8009014 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f6e:	f7fd f88d 	bl	800608c <HAL_GetTick>
 8008f72:	4602      	mov	r2, r0
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d302      	bcc.n	8008f84 <I2C_IsErrorOccurred+0x54>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d147      	bne.n	8009014 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fa6:	d12e      	bne.n	8009006 <I2C_IsErrorOccurred+0xd6>
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fae:	d02a      	beq.n	8009006 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008fb0:	7cfb      	ldrb	r3, [r7, #19]
 8008fb2:	2b20      	cmp	r3, #32
 8008fb4:	d027      	beq.n	8009006 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008fc6:	f7fd f861 	bl	800608c <HAL_GetTick>
 8008fca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fcc:	e01b      	b.n	8009006 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008fce:	f7fd f85d 	bl	800608c <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	2b19      	cmp	r3, #25
 8008fda:	d914      	bls.n	8009006 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe0:	f043 0220 	orr.w	r2, r3, #32
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2220      	movs	r2, #32
 8008fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b20      	cmp	r3, #32
 8009012:	d1dc      	bne.n	8008fce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b20      	cmp	r3, #32
 8009020:	d003      	beq.n	800902a <I2C_IsErrorOccurred+0xfa>
 8009022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009026:	2b00      	cmp	r3, #0
 8009028:	d09d      	beq.n	8008f66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800902a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800902e:	2b00      	cmp	r3, #0
 8009030:	d103      	bne.n	800903a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2220      	movs	r2, #32
 8009038:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	f043 0304 	orr.w	r3, r3, #4
 8009040:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800906a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	f043 0308 	orr.w	r3, r3, #8
 8009082:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800908c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00b      	beq.n	80090b6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	f043 0302 	orr.w	r3, r3, #2
 80090a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80090b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d01c      	beq.n	80090f8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f7ff fe56 	bl	8008d70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6859      	ldr	r1, [r3, #4]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <I2C_IsErrorOccurred+0x1d4>)
 80090d0:	400b      	ands	r3, r1
 80090d2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	431a      	orrs	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80090f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3728      	adds	r7, #40	; 0x28
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	fe00e800 	.word	0xfe00e800

08009108 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	607b      	str	r3, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	817b      	strh	r3, [r7, #10]
 8009116:	4613      	mov	r3, r2
 8009118:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800911a:	897b      	ldrh	r3, [r7, #10]
 800911c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009120:	7a7b      	ldrb	r3, [r7, #9]
 8009122:	041b      	lsls	r3, r3, #16
 8009124:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009128:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	4313      	orrs	r3, r2
 8009132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009136:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	0d5b      	lsrs	r3, r3, #21
 8009142:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009146:	4b08      	ldr	r3, [pc, #32]	; (8009168 <I2C_TransferConfig+0x60>)
 8009148:	430b      	orrs	r3, r1
 800914a:	43db      	mvns	r3, r3
 800914c:	ea02 0103 	and.w	r1, r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	430a      	orrs	r2, r1
 8009158:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	03ff63ff 	.word	0x03ff63ff

0800916c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b20      	cmp	r3, #32
 8009180:	d138      	bne.n	80091f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800918c:	2302      	movs	r3, #2
 800918e:	e032      	b.n	80091f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2224      	movs	r2, #36	; 0x24
 800919c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0201 	bic.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6819      	ldr	r1, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e000      	b.n	80091f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b20      	cmp	r3, #32
 8009216:	d139      	bne.n	800928c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009222:	2302      	movs	r3, #2
 8009224:	e033      	b.n	800928e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2224      	movs	r2, #36	; 0x24
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0201 	bic.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009254:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	e000      	b.n	800928e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
  }
}
 800928e:	4618      	mov	r0, r3
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
	...

0800929c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80092a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092a8:	4a0a      	ldr	r2, [pc, #40]	; (80092d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	6613      	str	r3, [r2, #96]	; 0x60
 80092b0:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80092b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	4905      	ldr	r1, [pc, #20]	; (80092d8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	604b      	str	r3, [r1, #4]
}
 80092c8:	bf00      	nop
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	40021000 	.word	0x40021000
 80092d8:	40010000 	.word	0x40010000

080092dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092e0:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a04      	ldr	r2, [pc, #16]	; (80092f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80092e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ea:	6013      	str	r3, [r2, #0]
}
 80092ec:	bf00      	nop
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	40007000 	.word	0x40007000

080092fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009300:	4b04      	ldr	r3, [pc, #16]	; (8009314 <HAL_PWREx_GetVoltageRange+0x18>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009308:	4618      	mov	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	40007000 	.word	0x40007000

08009318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009326:	d130      	bne.n	800938a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009328:	4b23      	ldr	r3, [pc, #140]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009334:	d038      	beq.n	80093a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009336:	4b20      	ldr	r3, [pc, #128]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800933e:	4a1e      	ldr	r2, [pc, #120]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009344:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009346:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2232      	movs	r2, #50	; 0x32
 800934c:	fb02 f303 	mul.w	r3, r2, r3
 8009350:	4a1b      	ldr	r2, [pc, #108]	; (80093c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	0c9b      	lsrs	r3, r3, #18
 8009358:	3301      	adds	r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800935c:	e002      	b.n	8009364 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3b01      	subs	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009364:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800936c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009370:	d102      	bne.n	8009378 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f2      	bne.n	800935e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009378:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009384:	d110      	bne.n	80093a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e00f      	b.n	80093aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800938a:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009396:	d007      	beq.n	80093a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009398:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80093a0:	4a05      	ldr	r2, [pc, #20]	; (80093b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80093a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	40007000 	.word	0x40007000
 80093bc:	20000078 	.word	0x20000078
 80093c0:	431bde83 	.word	0x431bde83

080093c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f000 bc02 	b.w	8009bdc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093d8:	4b96      	ldr	r3, [pc, #600]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 030c 	and.w	r3, r3, #12
 80093e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093e2:	4b94      	ldr	r3, [pc, #592]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0310 	and.w	r3, r3, #16
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80e4 	beq.w	80095c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <HAL_RCC_OscConfig+0x4c>
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2b0c      	cmp	r3, #12
 8009404:	f040 808b 	bne.w	800951e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2b01      	cmp	r3, #1
 800940c:	f040 8087 	bne.w	800951e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009410:	4b88      	ldr	r3, [pc, #544]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <HAL_RCC_OscConfig+0x64>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e3d9      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a1a      	ldr	r2, [r3, #32]
 800942c:	4b81      	ldr	r3, [pc, #516]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <HAL_RCC_OscConfig+0x7e>
 8009438:	4b7e      	ldr	r3, [pc, #504]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009440:	e005      	b.n	800944e <HAL_RCC_OscConfig+0x8a>
 8009442:	4b7c      	ldr	r3, [pc, #496]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009448:	091b      	lsrs	r3, r3, #4
 800944a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800944e:	4293      	cmp	r3, r2
 8009450:	d223      	bcs.n	800949a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fdbe 	bl	8009fd8 <RCC_SetFlashLatencyFromMSIRange>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e3ba      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009466:	4b73      	ldr	r3, [pc, #460]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a72      	ldr	r2, [pc, #456]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800946c:	f043 0308 	orr.w	r3, r3, #8
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	4b70      	ldr	r3, [pc, #448]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	496d      	ldr	r1, [pc, #436]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009480:	4313      	orrs	r3, r2
 8009482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009484:	4b6b      	ldr	r3, [pc, #428]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	021b      	lsls	r3, r3, #8
 8009492:	4968      	ldr	r1, [pc, #416]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009494:	4313      	orrs	r3, r2
 8009496:	604b      	str	r3, [r1, #4]
 8009498:	e025      	b.n	80094e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800949a:	4b66      	ldr	r3, [pc, #408]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a65      	ldr	r2, [pc, #404]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80094a0:	f043 0308 	orr.w	r3, r3, #8
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	4b63      	ldr	r3, [pc, #396]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	4960      	ldr	r1, [pc, #384]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80094b8:	4b5e      	ldr	r3, [pc, #376]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	021b      	lsls	r3, r3, #8
 80094c6:	495b      	ldr	r1, [pc, #364]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fd7e 	bl	8009fd8 <RCC_SetFlashLatencyFromMSIRange>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e37a      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80094e6:	f000 fc81 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4b51      	ldr	r3, [pc, #324]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	091b      	lsrs	r3, r3, #4
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	4950      	ldr	r1, [pc, #320]	; (8009638 <HAL_RCC_OscConfig+0x274>)
 80094f8:	5ccb      	ldrb	r3, [r1, r3]
 80094fa:	f003 031f 	and.w	r3, r3, #31
 80094fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009502:	4a4e      	ldr	r2, [pc, #312]	; (800963c <HAL_RCC_OscConfig+0x278>)
 8009504:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009506:	4b4e      	ldr	r3, [pc, #312]	; (8009640 <HAL_RCC_OscConfig+0x27c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f7fb fd7e 	bl	800500c <HAL_InitTick>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d052      	beq.n	80095c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	e35e      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d032      	beq.n	800958c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009526:	4b43      	ldr	r3, [pc, #268]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a42      	ldr	r2, [pc, #264]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800952c:	f043 0301 	orr.w	r3, r3, #1
 8009530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009532:	f7fc fdab 	bl	800608c <HAL_GetTick>
 8009536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009538:	e008      	b.n	800954c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800953a:	f7fc fda7 	bl	800608c <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d901      	bls.n	800954c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e347      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800954c:	4b39      	ldr	r3, [pc, #228]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0f0      	beq.n	800953a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009558:	4b36      	ldr	r3, [pc, #216]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a35      	ldr	r2, [pc, #212]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800955e:	f043 0308 	orr.w	r3, r3, #8
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	4b33      	ldr	r3, [pc, #204]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	4930      	ldr	r1, [pc, #192]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009572:	4313      	orrs	r3, r2
 8009574:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009576:	4b2f      	ldr	r3, [pc, #188]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	492b      	ldr	r1, [pc, #172]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009586:	4313      	orrs	r3, r2
 8009588:	604b      	str	r3, [r1, #4]
 800958a:	e01a      	b.n	80095c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800958c:	4b29      	ldr	r3, [pc, #164]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a28      	ldr	r2, [pc, #160]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009592:	f023 0301 	bic.w	r3, r3, #1
 8009596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009598:	f7fc fd78 	bl	800608c <HAL_GetTick>
 800959c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800959e:	e008      	b.n	80095b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80095a0:	f7fc fd74 	bl	800608c <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d901      	bls.n	80095b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e314      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80095b2:	4b20      	ldr	r3, [pc, #128]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f0      	bne.n	80095a0 <HAL_RCC_OscConfig+0x1dc>
 80095be:	e000      	b.n	80095c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80095c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d073      	beq.n	80096b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d005      	beq.n	80095e0 <HAL_RCC_OscConfig+0x21c>
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	2b0c      	cmp	r3, #12
 80095d8:	d10e      	bne.n	80095f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d10b      	bne.n	80095f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d063      	beq.n	80096b4 <HAL_RCC_OscConfig+0x2f0>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d15f      	bne.n	80096b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e2f1      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009600:	d106      	bne.n	8009610 <HAL_RCC_OscConfig+0x24c>
 8009602:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a0b      	ldr	r2, [pc, #44]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	e025      	b.n	800965c <HAL_RCC_OscConfig+0x298>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009618:	d114      	bne.n	8009644 <HAL_RCC_OscConfig+0x280>
 800961a:	4b06      	ldr	r3, [pc, #24]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a05      	ldr	r2, [pc, #20]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	4b03      	ldr	r3, [pc, #12]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a02      	ldr	r2, [pc, #8]	; (8009634 <HAL_RCC_OscConfig+0x270>)
 800962c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	e013      	b.n	800965c <HAL_RCC_OscConfig+0x298>
 8009634:	40021000 	.word	0x40021000
 8009638:	0801f63c 	.word	0x0801f63c
 800963c:	20000078 	.word	0x20000078
 8009640:	20000080 	.word	0x20000080
 8009644:	4ba0      	ldr	r3, [pc, #640]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a9f      	ldr	r2, [pc, #636]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800964a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	4b9d      	ldr	r3, [pc, #628]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a9c      	ldr	r2, [pc, #624]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800965a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d013      	beq.n	800968c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009664:	f7fc fd12 	bl	800608c <HAL_GetTick>
 8009668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800966c:	f7fc fd0e 	bl	800608c <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b64      	cmp	r3, #100	; 0x64
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e2ae      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800967e:	4b92      	ldr	r3, [pc, #584]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f0      	beq.n	800966c <HAL_RCC_OscConfig+0x2a8>
 800968a:	e014      	b.n	80096b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800968c:	f7fc fcfe 	bl	800608c <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009692:	e008      	b.n	80096a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009694:	f7fc fcfa 	bl	800608c <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b64      	cmp	r3, #100	; 0x64
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e29a      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096a6:	4b88      	ldr	r3, [pc, #544]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1f0      	bne.n	8009694 <HAL_RCC_OscConfig+0x2d0>
 80096b2:	e000      	b.n	80096b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d060      	beq.n	8009784 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d005      	beq.n	80096d4 <HAL_RCC_OscConfig+0x310>
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	2b0c      	cmp	r3, #12
 80096cc:	d119      	bne.n	8009702 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d116      	bne.n	8009702 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096d4:	4b7c      	ldr	r3, [pc, #496]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_RCC_OscConfig+0x328>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e277      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096ec:	4b76      	ldr	r3, [pc, #472]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	061b      	lsls	r3, r3, #24
 80096fa:	4973      	ldr	r1, [pc, #460]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009700:	e040      	b.n	8009784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d023      	beq.n	8009752 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800970a:	4b6f      	ldr	r3, [pc, #444]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a6e      	ldr	r2, [pc, #440]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009716:	f7fc fcb9 	bl	800608c <HAL_GetTick>
 800971a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800971c:	e008      	b.n	8009730 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800971e:	f7fc fcb5 	bl	800608c <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	2b02      	cmp	r3, #2
 800972a:	d901      	bls.n	8009730 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e255      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009730:	4b65      	ldr	r3, [pc, #404]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0f0      	beq.n	800971e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800973c:	4b62      	ldr	r3, [pc, #392]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	061b      	lsls	r3, r3, #24
 800974a:	495f      	ldr	r1, [pc, #380]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800974c:	4313      	orrs	r3, r2
 800974e:	604b      	str	r3, [r1, #4]
 8009750:	e018      	b.n	8009784 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009752:	4b5d      	ldr	r3, [pc, #372]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a5c      	ldr	r2, [pc, #368]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800975c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800975e:	f7fc fc95 	bl	800608c <HAL_GetTick>
 8009762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009764:	e008      	b.n	8009778 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009766:	f7fc fc91 	bl	800608c <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d901      	bls.n	8009778 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e231      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009778:	4b53      	ldr	r3, [pc, #332]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1f0      	bne.n	8009766 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d03c      	beq.n	800980a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01c      	beq.n	80097d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009798:	4b4b      	ldr	r3, [pc, #300]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800979a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800979e:	4a4a      	ldr	r2, [pc, #296]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097a8:	f7fc fc70 	bl	800608c <HAL_GetTick>
 80097ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80097ae:	e008      	b.n	80097c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097b0:	f7fc fc6c 	bl	800608c <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d901      	bls.n	80097c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e20c      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80097c2:	4b41      	ldr	r3, [pc, #260]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80097c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097c8:	f003 0302 	and.w	r3, r3, #2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0ef      	beq.n	80097b0 <HAL_RCC_OscConfig+0x3ec>
 80097d0:	e01b      	b.n	800980a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097d2:	4b3d      	ldr	r3, [pc, #244]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80097d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097d8:	4a3b      	ldr	r2, [pc, #236]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097e2:	f7fc fc53 	bl	800608c <HAL_GetTick>
 80097e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80097e8:	e008      	b.n	80097fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097ea:	f7fc fc4f 	bl	800608c <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e1ef      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80097fc:	4b32      	ldr	r3, [pc, #200]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80097fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1ef      	bne.n	80097ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0304 	and.w	r3, r3, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 80a6 	beq.w	8009964 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009818:	2300      	movs	r3, #0
 800981a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800981c:	4b2a      	ldr	r3, [pc, #168]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800981e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10d      	bne.n	8009844 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009828:	4b27      	ldr	r3, [pc, #156]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800982a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982c:	4a26      	ldr	r2, [pc, #152]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800982e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009832:	6593      	str	r3, [r2, #88]	; 0x58
 8009834:	4b24      	ldr	r3, [pc, #144]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800983c:	60bb      	str	r3, [r7, #8]
 800983e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009840:	2301      	movs	r3, #1
 8009842:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009844:	4b21      	ldr	r3, [pc, #132]	; (80098cc <HAL_RCC_OscConfig+0x508>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800984c:	2b00      	cmp	r3, #0
 800984e:	d118      	bne.n	8009882 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009850:	4b1e      	ldr	r3, [pc, #120]	; (80098cc <HAL_RCC_OscConfig+0x508>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1d      	ldr	r2, [pc, #116]	; (80098cc <HAL_RCC_OscConfig+0x508>)
 8009856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800985a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800985c:	f7fc fc16 	bl	800608c <HAL_GetTick>
 8009860:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009862:	e008      	b.n	8009876 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009864:	f7fc fc12 	bl	800608c <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d901      	bls.n	8009876 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e1b2      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009876:	4b15      	ldr	r3, [pc, #84]	; (80098cc <HAL_RCC_OscConfig+0x508>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0f0      	beq.n	8009864 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d108      	bne.n	800989c <HAL_RCC_OscConfig+0x4d8>
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 800988c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009890:	4a0d      	ldr	r2, [pc, #52]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 8009892:	f043 0301 	orr.w	r3, r3, #1
 8009896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800989a:	e029      	b.n	80098f0 <HAL_RCC_OscConfig+0x52c>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	2b05      	cmp	r3, #5
 80098a2:	d115      	bne.n	80098d0 <HAL_RCC_OscConfig+0x50c>
 80098a4:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80098a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098aa:	4a07      	ldr	r2, [pc, #28]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80098ac:	f043 0304 	orr.w	r3, r3, #4
 80098b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80098b4:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80098b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ba:	4a03      	ldr	r2, [pc, #12]	; (80098c8 <HAL_RCC_OscConfig+0x504>)
 80098bc:	f043 0301 	orr.w	r3, r3, #1
 80098c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80098c4:	e014      	b.n	80098f0 <HAL_RCC_OscConfig+0x52c>
 80098c6:	bf00      	nop
 80098c8:	40021000 	.word	0x40021000
 80098cc:	40007000 	.word	0x40007000
 80098d0:	4b9a      	ldr	r3, [pc, #616]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d6:	4a99      	ldr	r2, [pc, #612]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80098d8:	f023 0301 	bic.w	r3, r3, #1
 80098dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80098e0:	4b96      	ldr	r3, [pc, #600]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80098e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e6:	4a95      	ldr	r2, [pc, #596]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80098e8:	f023 0304 	bic.w	r3, r3, #4
 80098ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d016      	beq.n	8009926 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f8:	f7fc fbc8 	bl	800608c <HAL_GetTick>
 80098fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098fe:	e00a      	b.n	8009916 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009900:	f7fc fbc4 	bl	800608c <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	f241 3288 	movw	r2, #5000	; 0x1388
 800990e:	4293      	cmp	r3, r2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e162      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009916:	4b89      	ldr	r3, [pc, #548]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0ed      	beq.n	8009900 <HAL_RCC_OscConfig+0x53c>
 8009924:	e015      	b.n	8009952 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009926:	f7fc fbb1 	bl	800608c <HAL_GetTick>
 800992a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800992c:	e00a      	b.n	8009944 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800992e:	f7fc fbad 	bl	800608c <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	f241 3288 	movw	r2, #5000	; 0x1388
 800993c:	4293      	cmp	r3, r2
 800993e:	d901      	bls.n	8009944 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e14b      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009944:	4b7d      	ldr	r3, [pc, #500]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1ed      	bne.n	800992e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009952:	7ffb      	ldrb	r3, [r7, #31]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d105      	bne.n	8009964 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009958:	4b78      	ldr	r3, [pc, #480]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 800995a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995c:	4a77      	ldr	r2, [pc, #476]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 800995e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009962:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0320 	and.w	r3, r3, #32
 800996c:	2b00      	cmp	r3, #0
 800996e:	d03c      	beq.n	80099ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01c      	beq.n	80099b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009978:	4b70      	ldr	r3, [pc, #448]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 800997a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800997e:	4a6f      	ldr	r2, [pc, #444]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009988:	f7fc fb80 	bl	800608c <HAL_GetTick>
 800998c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800998e:	e008      	b.n	80099a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009990:	f7fc fb7c 	bl	800608c <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d901      	bls.n	80099a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e11c      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80099a2:	4b66      	ldr	r3, [pc, #408]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80099a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0ef      	beq.n	8009990 <HAL_RCC_OscConfig+0x5cc>
 80099b0:	e01b      	b.n	80099ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80099b2:	4b62      	ldr	r3, [pc, #392]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80099b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099b8:	4a60      	ldr	r2, [pc, #384]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80099ba:	f023 0301 	bic.w	r3, r3, #1
 80099be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099c2:	f7fc fb63 	bl	800608c <HAL_GetTick>
 80099c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80099c8:	e008      	b.n	80099dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099ca:	f7fc fb5f 	bl	800608c <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d901      	bls.n	80099dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e0ff      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80099dc:	4b57      	ldr	r3, [pc, #348]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 80099de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1ef      	bne.n	80099ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 80f3 	beq.w	8009bda <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	f040 80c9 	bne.w	8009b90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80099fe:	4b4f      	ldr	r3, [pc, #316]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f003 0203 	and.w	r2, r3, #3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d12c      	bne.n	8009a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d123      	bne.n	8009a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d11b      	bne.n	8009a6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d113      	bne.n	8009a6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4e:	085b      	lsrs	r3, r3, #1
 8009a50:	3b01      	subs	r3, #1
 8009a52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d109      	bne.n	8009a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a62:	085b      	lsrs	r3, r3, #1
 8009a64:	3b01      	subs	r3, #1
 8009a66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d06b      	beq.n	8009b44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b0c      	cmp	r3, #12
 8009a70:	d062      	beq.n	8009b38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009a72:	4b32      	ldr	r3, [pc, #200]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e0ac      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009a82:	4b2e      	ldr	r3, [pc, #184]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a2d      	ldr	r2, [pc, #180]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009a88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a8e:	f7fc fafd 	bl	800608c <HAL_GetTick>
 8009a92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a94:	e008      	b.n	8009aa8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a96:	f7fc faf9 	bl	800608c <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d901      	bls.n	8009aa8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e099      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aa8:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1f0      	bne.n	8009a96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ab4:	4b21      	ldr	r3, [pc, #132]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <HAL_RCC_OscConfig+0x77c>)
 8009aba:	4013      	ands	r3, r2
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ac4:	3a01      	subs	r2, #1
 8009ac6:	0112      	lsls	r2, r2, #4
 8009ac8:	4311      	orrs	r1, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ace:	0212      	lsls	r2, r2, #8
 8009ad0:	4311      	orrs	r1, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009ad6:	0852      	lsrs	r2, r2, #1
 8009ad8:	3a01      	subs	r2, #1
 8009ada:	0552      	lsls	r2, r2, #21
 8009adc:	4311      	orrs	r1, r2
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009ae2:	0852      	lsrs	r2, r2, #1
 8009ae4:	3a01      	subs	r2, #1
 8009ae6:	0652      	lsls	r2, r2, #25
 8009ae8:	4311      	orrs	r1, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009aee:	06d2      	lsls	r2, r2, #27
 8009af0:	430a      	orrs	r2, r1
 8009af2:	4912      	ldr	r1, [pc, #72]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009af8:	4b10      	ldr	r3, [pc, #64]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a0f      	ldr	r2, [pc, #60]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b04:	4b0d      	ldr	r3, [pc, #52]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	4a0c      	ldr	r2, [pc, #48]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009b10:	f7fc fabc 	bl	800608c <HAL_GetTick>
 8009b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b16:	e008      	b.n	8009b2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b18:	f7fc fab8 	bl	800608c <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e058      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b2a:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <HAL_RCC_OscConfig+0x778>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d0f0      	beq.n	8009b18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b36:	e050      	b.n	8009bda <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e04f      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
 8009b3c:	40021000 	.word	0x40021000
 8009b40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b44:	4b27      	ldr	r3, [pc, #156]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d144      	bne.n	8009bda <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009b50:	4b24      	ldr	r3, [pc, #144]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a23      	ldr	r2, [pc, #140]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b5c:	4b21      	ldr	r3, [pc, #132]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	4a20      	ldr	r2, [pc, #128]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b68:	f7fc fa90 	bl	800608c <HAL_GetTick>
 8009b6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b6e:	e008      	b.n	8009b82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b70:	f7fc fa8c 	bl	800608c <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e02c      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b82:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0f0      	beq.n	8009b70 <HAL_RCC_OscConfig+0x7ac>
 8009b8e:	e024      	b.n	8009bda <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b0c      	cmp	r3, #12
 8009b94:	d01f      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a12      	ldr	r2, [pc, #72]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba2:	f7fc fa73 	bl	800608c <HAL_GetTick>
 8009ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ba8:	e008      	b.n	8009bbc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009baa:	f7fc fa6f 	bl	800608c <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d901      	bls.n	8009bbc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e00f      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bbc:	4b09      	ldr	r3, [pc, #36]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1f0      	bne.n	8009baa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009bc8:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	4905      	ldr	r1, [pc, #20]	; (8009be4 <HAL_RCC_OscConfig+0x820>)
 8009bce:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <HAL_RCC_OscConfig+0x824>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	60cb      	str	r3, [r1, #12]
 8009bd4:	e001      	b.n	8009bda <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	40021000 	.word	0x40021000
 8009be8:	feeefffc 	.word	0xfeeefffc

08009bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e0e7      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c00:	4b75      	ldr	r3, [pc, #468]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d910      	bls.n	8009c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c0e:	4b72      	ldr	r3, [pc, #456]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f023 0207 	bic.w	r2, r3, #7
 8009c16:	4970      	ldr	r1, [pc, #448]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c1e:	4b6e      	ldr	r3, [pc, #440]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d001      	beq.n	8009c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e0cf      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d010      	beq.n	8009c5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	4b66      	ldr	r3, [pc, #408]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d908      	bls.n	8009c5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c4c:	4b63      	ldr	r3, [pc, #396]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	4960      	ldr	r1, [pc, #384]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d04c      	beq.n	8009d04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d107      	bne.n	8009c82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c72:	4b5a      	ldr	r3, [pc, #360]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d121      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e0a6      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d107      	bne.n	8009c9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c8a:	4b54      	ldr	r3, [pc, #336]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d115      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e09a      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d107      	bne.n	8009cb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009ca2:	4b4e      	ldr	r3, [pc, #312]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d109      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e08e      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cb2:	4b4a      	ldr	r3, [pc, #296]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e086      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cc2:	4b46      	ldr	r3, [pc, #280]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f023 0203 	bic.w	r2, r3, #3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	4943      	ldr	r1, [pc, #268]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cd4:	f7fc f9da 	bl	800608c <HAL_GetTick>
 8009cd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cda:	e00a      	b.n	8009cf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cdc:	f7fc f9d6 	bl	800608c <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d901      	bls.n	8009cf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e06e      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cf2:	4b3a      	ldr	r3, [pc, #232]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f003 020c 	and.w	r2, r3, #12
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d1eb      	bne.n	8009cdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d010      	beq.n	8009d32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	4b31      	ldr	r3, [pc, #196]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d208      	bcs.n	8009d32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d20:	4b2e      	ldr	r3, [pc, #184]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	492b      	ldr	r1, [pc, #172]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d32:	4b29      	ldr	r3, [pc, #164]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d210      	bcs.n	8009d62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d40:	4b25      	ldr	r3, [pc, #148]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f023 0207 	bic.w	r2, r3, #7
 8009d48:	4923      	ldr	r1, [pc, #140]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d50:	4b21      	ldr	r3, [pc, #132]	; (8009dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d001      	beq.n	8009d62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e036      	b.n	8009dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d008      	beq.n	8009d80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d6e:	4b1b      	ldr	r3, [pc, #108]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	4918      	ldr	r1, [pc, #96]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d009      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d8c:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	4910      	ldr	r1, [pc, #64]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009da0:	f000 f824 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 8009da4:	4602      	mov	r2, r0
 8009da6:	4b0d      	ldr	r3, [pc, #52]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	091b      	lsrs	r3, r3, #4
 8009dac:	f003 030f 	and.w	r3, r3, #15
 8009db0:	490b      	ldr	r1, [pc, #44]	; (8009de0 <HAL_RCC_ClockConfig+0x1f4>)
 8009db2:	5ccb      	ldrb	r3, [r1, r3]
 8009db4:	f003 031f 	and.w	r3, r3, #31
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbc:	4a09      	ldr	r2, [pc, #36]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009dc0:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <HAL_RCC_ClockConfig+0x1fc>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fb f921 	bl	800500c <HAL_InitTick>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8009dce:	7afb      	ldrb	r3, [r7, #11]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	40022000 	.word	0x40022000
 8009ddc:	40021000 	.word	0x40021000
 8009de0:	0801f63c 	.word	0x0801f63c
 8009de4:	20000078 	.word	0x20000078
 8009de8:	20000080 	.word	0x20000080

08009dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b089      	sub	sp, #36	; 0x24
 8009df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	2300      	movs	r3, #0
 8009df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dfa:	4b3e      	ldr	r3, [pc, #248]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 030c 	and.w	r3, r3, #12
 8009e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e04:	4b3b      	ldr	r3, [pc, #236]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f003 0303 	and.w	r3, r3, #3
 8009e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <HAL_RCC_GetSysClockFreq+0x34>
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2b0c      	cmp	r3, #12
 8009e18:	d121      	bne.n	8009e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d11e      	bne.n	8009e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009e20:	4b34      	ldr	r3, [pc, #208]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0308 	and.w	r3, r3, #8
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d107      	bne.n	8009e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e2c:	4b31      	ldr	r3, [pc, #196]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	f003 030f 	and.w	r3, r3, #15
 8009e38:	61fb      	str	r3, [r7, #28]
 8009e3a:	e005      	b.n	8009e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e3c:	4b2d      	ldr	r3, [pc, #180]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	091b      	lsrs	r3, r3, #4
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009e48:	4a2b      	ldr	r2, [pc, #172]	; (8009ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10d      	bne.n	8009e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e5c:	e00a      	b.n	8009e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	2b04      	cmp	r3, #4
 8009e62:	d102      	bne.n	8009e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009e64:	4b25      	ldr	r3, [pc, #148]	; (8009efc <HAL_RCC_GetSysClockFreq+0x110>)
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	e004      	b.n	8009e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d101      	bne.n	8009e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009e70:	4b23      	ldr	r3, [pc, #140]	; (8009f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8009e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2b0c      	cmp	r3, #12
 8009e78:	d134      	bne.n	8009ee4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e7a:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f003 0303 	and.w	r3, r3, #3
 8009e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d003      	beq.n	8009e92 <HAL_RCC_GetSysClockFreq+0xa6>
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d003      	beq.n	8009e98 <HAL_RCC_GetSysClockFreq+0xac>
 8009e90:	e005      	b.n	8009e9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009e92:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <HAL_RCC_GetSysClockFreq+0x110>)
 8009e94:	617b      	str	r3, [r7, #20]
      break;
 8009e96:	e005      	b.n	8009ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009e98:	4b19      	ldr	r3, [pc, #100]	; (8009f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8009e9a:	617b      	str	r3, [r7, #20]
      break;
 8009e9c:	e002      	b.n	8009ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	617b      	str	r3, [r7, #20]
      break;
 8009ea2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ea4:	4b13      	ldr	r3, [pc, #76]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	091b      	lsrs	r3, r3, #4
 8009eaa:	f003 0307 	and.w	r3, r3, #7
 8009eae:	3301      	adds	r3, #1
 8009eb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009eb2:	4b10      	ldr	r3, [pc, #64]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	fb03 f202 	mul.w	r2, r3, r2
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009eca:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	0e5b      	lsrs	r3, r3, #25
 8009ed0:	f003 0303 	and.w	r3, r3, #3
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009ee4:	69bb      	ldr	r3, [r7, #24]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3724      	adds	r7, #36	; 0x24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40021000 	.word	0x40021000
 8009ef8:	0801f654 	.word	0x0801f654
 8009efc:	00f42400 	.word	0x00f42400
 8009f00:	007a1200 	.word	0x007a1200

08009f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f04:	b480      	push	{r7}
 8009f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f08:	4b03      	ldr	r3, [pc, #12]	; (8009f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20000078 	.word	0x20000078

08009f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009f20:	f7ff fff0 	bl	8009f04 <HAL_RCC_GetHCLKFreq>
 8009f24:	4602      	mov	r2, r0
 8009f26:	4b06      	ldr	r3, [pc, #24]	; (8009f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	0a1b      	lsrs	r3, r3, #8
 8009f2c:	f003 0307 	and.w	r3, r3, #7
 8009f30:	4904      	ldr	r1, [pc, #16]	; (8009f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f32:	5ccb      	ldrb	r3, [r1, r3]
 8009f34:	f003 031f 	and.w	r3, r3, #31
 8009f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	40021000 	.word	0x40021000
 8009f44:	0801f64c 	.word	0x0801f64c

08009f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009f4c:	f7ff ffda 	bl	8009f04 <HAL_RCC_GetHCLKFreq>
 8009f50:	4602      	mov	r2, r0
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	0adb      	lsrs	r3, r3, #11
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	4904      	ldr	r1, [pc, #16]	; (8009f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f5e:	5ccb      	ldrb	r3, [r1, r3]
 8009f60:	f003 031f 	and.w	r3, r3, #31
 8009f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	40021000 	.word	0x40021000
 8009f70:	0801f64c 	.word	0x0801f64c

08009f74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	220f      	movs	r2, #15
 8009f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009f84:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f003 0203 	and.w	r2, r3, #3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009f90:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009fa8:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	08db      	lsrs	r3, r3, #3
 8009fae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <HAL_RCC_GetClockConfig+0x60>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0207 	and.w	r2, r3, #7
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	601a      	str	r2, [r3, #0]
}
 8009fc2:	bf00      	nop
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	40021000 	.word	0x40021000
 8009fd4:	40022000 	.word	0x40022000

08009fd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009fe4:	4b2a      	ldr	r3, [pc, #168]	; (800a090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009ff0:	f7ff f984 	bl	80092fc <HAL_PWREx_GetVoltageRange>
 8009ff4:	6178      	str	r0, [r7, #20]
 8009ff6:	e014      	b.n	800a022 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ff8:	4b25      	ldr	r3, [pc, #148]	; (800a090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffc:	4a24      	ldr	r2, [pc, #144]	; (800a090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a002:	6593      	str	r3, [r2, #88]	; 0x58
 800a004:	4b22      	ldr	r3, [pc, #136]	; (800a090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a010:	f7ff f974 	bl	80092fc <HAL_PWREx_GetVoltageRange>
 800a014:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a016:	4b1e      	ldr	r3, [pc, #120]	; (800a090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01a:	4a1d      	ldr	r2, [pc, #116]	; (800a090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a01c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a020:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a028:	d10b      	bne.n	800a042 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b80      	cmp	r3, #128	; 0x80
 800a02e:	d919      	bls.n	800a064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2ba0      	cmp	r3, #160	; 0xa0
 800a034:	d902      	bls.n	800a03c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a036:	2302      	movs	r3, #2
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	e013      	b.n	800a064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a03c:	2301      	movs	r3, #1
 800a03e:	613b      	str	r3, [r7, #16]
 800a040:	e010      	b.n	800a064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b80      	cmp	r3, #128	; 0x80
 800a046:	d902      	bls.n	800a04e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a048:	2303      	movs	r3, #3
 800a04a:	613b      	str	r3, [r7, #16]
 800a04c:	e00a      	b.n	800a064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b80      	cmp	r3, #128	; 0x80
 800a052:	d102      	bne.n	800a05a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a054:	2302      	movs	r3, #2
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	e004      	b.n	800a064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b70      	cmp	r3, #112	; 0x70
 800a05e:	d101      	bne.n	800a064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a060:	2301      	movs	r3, #1
 800a062:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a064:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f023 0207 	bic.w	r2, r3, #7
 800a06c:	4909      	ldr	r1, [pc, #36]	; (800a094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	4313      	orrs	r3, r2
 800a072:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a074:	4b07      	ldr	r3, [pc, #28]	; (800a094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0307 	and.w	r3, r3, #7
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d001      	beq.n	800a086 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	40021000 	.word	0x40021000
 800a094:	40022000 	.word	0x40022000

0800a098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d031      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a0bc:	d01a      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a0be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a0c2:	d814      	bhi.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d009      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a0c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0cc:	d10f      	bne.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a0ce:	4b5d      	ldr	r3, [pc, #372]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	4a5c      	ldr	r2, [pc, #368]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a0d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0da:	e00c      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f9de 	bl	800a4a4 <RCCEx_PLLSAI1_Config>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0ec:	e003      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	74fb      	strb	r3, [r7, #19]
      break;
 800a0f2:	e000      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a0f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0f6:	7cfb      	ldrb	r3, [r7, #19]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10b      	bne.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0fc:	4b51      	ldr	r3, [pc, #324]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10a:	494e      	ldr	r1, [pc, #312]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a112:	e001      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a114:	7cfb      	ldrb	r3, [r7, #19]
 800a116:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 809e 	beq.w	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a126:	2300      	movs	r3, #0
 800a128:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a12a:	4b46      	ldr	r3, [pc, #280]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a13a:	2300      	movs	r3, #0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00d      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a140:	4b40      	ldr	r3, [pc, #256]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a144:	4a3f      	ldr	r2, [pc, #252]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a14a:	6593      	str	r3, [r2, #88]	; 0x58
 800a14c:	4b3d      	ldr	r3, [pc, #244]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a154:	60bb      	str	r3, [r7, #8]
 800a156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a158:	2301      	movs	r3, #1
 800a15a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a15c:	4b3a      	ldr	r3, [pc, #232]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a39      	ldr	r2, [pc, #228]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a168:	f7fb ff90 	bl	800608c <HAL_GetTick>
 800a16c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a16e:	e009      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a170:	f7fb ff8c 	bl	800608c <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d902      	bls.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	74fb      	strb	r3, [r7, #19]
        break;
 800a182:	e005      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a184:	4b30      	ldr	r3, [pc, #192]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d0ef      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a190:	7cfb      	ldrb	r3, [r7, #19]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d15a      	bne.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a196:	4b2b      	ldr	r3, [pc, #172]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a19c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01e      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d019      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1b2:	4b24      	ldr	r3, [pc, #144]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1be:	4b21      	ldr	r3, [pc, #132]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c4:	4a1f      	ldr	r2, [pc, #124]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1ce:	4b1d      	ldr	r3, [pc, #116]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d4:	4a1b      	ldr	r2, [pc, #108]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1de:	4a19      	ldr	r2, [pc, #100]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d016      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f0:	f7fb ff4c 	bl	800608c <HAL_GetTick>
 800a1f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1f6:	e00b      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1f8:	f7fb ff48 	bl	800608c <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	f241 3288 	movw	r2, #5000	; 0x1388
 800a206:	4293      	cmp	r3, r2
 800a208:	d902      	bls.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	74fb      	strb	r3, [r7, #19]
            break;
 800a20e:	e006      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a210:	4b0c      	ldr	r3, [pc, #48]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0ec      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800a21e:	7cfb      	ldrb	r3, [r7, #19]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10b      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a224:	4b07      	ldr	r3, [pc, #28]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a22a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a232:	4904      	ldr	r1, [pc, #16]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a234:	4313      	orrs	r3, r2
 800a236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a23a:	e009      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a23c:	7cfb      	ldrb	r3, [r7, #19]
 800a23e:	74bb      	strb	r3, [r7, #18]
 800a240:	e006      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a242:	bf00      	nop
 800a244:	40021000 	.word	0x40021000
 800a248:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24c:	7cfb      	ldrb	r3, [r7, #19]
 800a24e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a250:	7c7b      	ldrb	r3, [r7, #17]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d105      	bne.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a256:	4b8a      	ldr	r3, [pc, #552]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25a:	4a89      	ldr	r2, [pc, #548]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a25c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a260:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00a      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a26e:	4b84      	ldr	r3, [pc, #528]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a274:	f023 0203 	bic.w	r2, r3, #3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	4980      	ldr	r1, [pc, #512]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00a      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a290:	4b7b      	ldr	r3, [pc, #492]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	f023 020c 	bic.w	r2, r3, #12
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	4978      	ldr	r1, [pc, #480]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2b2:	4b73      	ldr	r3, [pc, #460]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c0:	496f      	ldr	r1, [pc, #444]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00a      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2d4:	4b6a      	ldr	r3, [pc, #424]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e2:	4967      	ldr	r1, [pc, #412]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2f6:	4b62      	ldr	r3, [pc, #392]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	495e      	ldr	r1, [pc, #376]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a306:	4313      	orrs	r3, r2
 800a308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00a      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a318:	4b59      	ldr	r3, [pc, #356]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	4956      	ldr	r1, [pc, #344]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a33a:	4b51      	ldr	r3, [pc, #324]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	494d      	ldr	r1, [pc, #308]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d028      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a35c:	4b48      	ldr	r3, [pc, #288]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	4945      	ldr	r1, [pc, #276]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a37a:	d106      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a37c:	4b40      	ldr	r3, [pc, #256]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	4a3f      	ldr	r2, [pc, #252]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a386:	60d3      	str	r3, [r2, #12]
 800a388:	e011      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a392:	d10c      	bne.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
 800a398:	2101      	movs	r1, #1
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f882 	bl	800a4a4 <RCCEx_PLLSAI1_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a3a4:	7cfb      	ldrb	r3, [r7, #19]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800a3aa:	7cfb      	ldrb	r3, [r7, #19]
 800a3ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d028      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3ba:	4b31      	ldr	r3, [pc, #196]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c8:	492d      	ldr	r1, [pc, #180]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3d8:	d106      	bne.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3da:	4b29      	ldr	r3, [pc, #164]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	4a28      	ldr	r2, [pc, #160]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3e4:	60d3      	str	r3, [r2, #12]
 800a3e6:	e011      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3f0:	d10c      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 f853 	bl	800a4a4 <RCCEx_PLLSAI1_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a402:	7cfb      	ldrb	r3, [r7, #19]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800a408:	7cfb      	ldrb	r3, [r7, #19]
 800a40a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01c      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a418:	4b19      	ldr	r3, [pc, #100]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a426:	4916      	ldr	r1, [pc, #88]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a428:	4313      	orrs	r3, r2
 800a42a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a436:	d10c      	bne.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3304      	adds	r3, #4
 800a43c:	2102      	movs	r1, #2
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 f830 	bl	800a4a4 <RCCEx_PLLSAI1_Config>
 800a444:	4603      	mov	r3, r0
 800a446:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a448:	7cfb      	ldrb	r3, [r7, #19]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800a44e:	7cfb      	ldrb	r3, [r7, #19]
 800a450:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a45e:	4b08      	ldr	r3, [pc, #32]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a464:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46c:	4904      	ldr	r1, [pc, #16]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a474:	7cbb      	ldrb	r3, [r7, #18]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	40021000 	.word	0x40021000

0800a484 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a484:	b480      	push	{r7}
 800a486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a04      	ldr	r2, [pc, #16]	; (800a4a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a48e:	f043 0304 	orr.w	r3, r3, #4
 800a492:	6013      	str	r3, [r2, #0]
}
 800a494:	bf00      	nop
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40021000 	.word	0x40021000

0800a4a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4b2:	4b74      	ldr	r3, [pc, #464]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d018      	beq.n	800a4f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a4be:	4b71      	ldr	r3, [pc, #452]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	f003 0203 	and.w	r2, r3, #3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d10d      	bne.n	800a4ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
       ||
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d009      	beq.n	800a4ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a4d6:	4b6b      	ldr	r3, [pc, #428]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	091b      	lsrs	r3, r3, #4
 800a4dc:	f003 0307 	and.w	r3, r3, #7
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
       ||
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d047      	beq.n	800a57a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	73fb      	strb	r3, [r7, #15]
 800a4ee:	e044      	b.n	800a57a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d018      	beq.n	800a52a <RCCEx_PLLSAI1_Config+0x86>
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d825      	bhi.n	800a548 <RCCEx_PLLSAI1_Config+0xa4>
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d002      	beq.n	800a506 <RCCEx_PLLSAI1_Config+0x62>
 800a500:	2b02      	cmp	r3, #2
 800a502:	d009      	beq.n	800a518 <RCCEx_PLLSAI1_Config+0x74>
 800a504:	e020      	b.n	800a548 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a506:	4b5f      	ldr	r3, [pc, #380]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d11d      	bne.n	800a54e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a516:	e01a      	b.n	800a54e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a518:	4b5a      	ldr	r3, [pc, #360]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a520:	2b00      	cmp	r3, #0
 800a522:	d116      	bne.n	800a552 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a528:	e013      	b.n	800a552 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a52a:	4b56      	ldr	r3, [pc, #344]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10f      	bne.n	800a556 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a536:	4b53      	ldr	r3, [pc, #332]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a546:	e006      	b.n	800a556 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
      break;
 800a54c:	e004      	b.n	800a558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a54e:	bf00      	nop
 800a550:	e002      	b.n	800a558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a552:	bf00      	nop
 800a554:	e000      	b.n	800a558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a556:	bf00      	nop
    }

    if(status == HAL_OK)
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10d      	bne.n	800a57a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a55e:	4b49      	ldr	r3, [pc, #292]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6819      	ldr	r1, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	3b01      	subs	r3, #1
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	430b      	orrs	r3, r1
 800a574:	4943      	ldr	r1, [pc, #268]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a576:	4313      	orrs	r3, r2
 800a578:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d17c      	bne.n	800a67a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a580:	4b40      	ldr	r3, [pc, #256]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a3f      	ldr	r2, [pc, #252]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a586:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a58a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a58c:	f7fb fd7e 	bl	800608c <HAL_GetTick>
 800a590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a592:	e009      	b.n	800a5a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a594:	f7fb fd7a 	bl	800608c <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d902      	bls.n	800a5a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	73fb      	strb	r3, [r7, #15]
        break;
 800a5a6:	e005      	b.n	800a5b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a5a8:	4b36      	ldr	r3, [pc, #216]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1ef      	bne.n	800a594 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d15f      	bne.n	800a67a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d110      	bne.n	800a5e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a5c0:	4b30      	ldr	r3, [pc, #192]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a5c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6892      	ldr	r2, [r2, #8]
 800a5d0:	0211      	lsls	r1, r2, #8
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	68d2      	ldr	r2, [r2, #12]
 800a5d6:	06d2      	lsls	r2, r2, #27
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	492a      	ldr	r1, [pc, #168]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	610b      	str	r3, [r1, #16]
 800a5e0:	e027      	b.n	800a632 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d112      	bne.n	800a60e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a5e8:	4b26      	ldr	r3, [pc, #152]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a5f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	6892      	ldr	r2, [r2, #8]
 800a5f8:	0211      	lsls	r1, r2, #8
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	6912      	ldr	r2, [r2, #16]
 800a5fe:	0852      	lsrs	r2, r2, #1
 800a600:	3a01      	subs	r2, #1
 800a602:	0552      	lsls	r2, r2, #21
 800a604:	430a      	orrs	r2, r1
 800a606:	491f      	ldr	r1, [pc, #124]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	610b      	str	r3, [r1, #16]
 800a60c:	e011      	b.n	800a632 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a60e:	4b1d      	ldr	r3, [pc, #116]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a616:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6892      	ldr	r2, [r2, #8]
 800a61e:	0211      	lsls	r1, r2, #8
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	6952      	ldr	r2, [r2, #20]
 800a624:	0852      	lsrs	r2, r2, #1
 800a626:	3a01      	subs	r2, #1
 800a628:	0652      	lsls	r2, r2, #25
 800a62a:	430a      	orrs	r2, r1
 800a62c:	4915      	ldr	r1, [pc, #84]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a632:	4b14      	ldr	r3, [pc, #80]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a13      	ldr	r2, [pc, #76]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a63c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a63e:	f7fb fd25 	bl	800608c <HAL_GetTick>
 800a642:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a644:	e009      	b.n	800a65a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a646:	f7fb fd21 	bl	800608c <HAL_GetTick>
 800a64a:	4602      	mov	r2, r0
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	2b02      	cmp	r3, #2
 800a652:	d902      	bls.n	800a65a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	73fb      	strb	r3, [r7, #15]
          break;
 800a658:	e005      	b.n	800a666 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a65a:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0ef      	beq.n	800a646 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a66c:	4b05      	ldr	r3, [pc, #20]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a66e:	691a      	ldr	r2, [r3, #16]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	4903      	ldr	r1, [pc, #12]	; (800a684 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a676:	4313      	orrs	r3, r2
 800a678:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	40021000 	.word	0x40021000

0800a688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e049      	b.n	800a72e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fa fbf4 	bl	8004e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f000 fae6 	bl	800ac98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d001      	beq.n	800a750 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e033      	b.n	800a7b8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2202      	movs	r2, #2
 800a754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a19      	ldr	r2, [pc, #100]	; (800a7c4 <HAL_TIM_Base_Start+0x8c>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d009      	beq.n	800a776 <HAL_TIM_Base_Start+0x3e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76a:	d004      	beq.n	800a776 <HAL_TIM_Base_Start+0x3e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <HAL_TIM_Base_Start+0x90>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d115      	bne.n	800a7a2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <HAL_TIM_Base_Start+0x94>)
 800a77e:	4013      	ands	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b06      	cmp	r3, #6
 800a786:	d015      	beq.n	800a7b4 <HAL_TIM_Base_Start+0x7c>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a78e:	d011      	beq.n	800a7b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f042 0201 	orr.w	r2, r2, #1
 800a79e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a0:	e008      	b.n	800a7b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f042 0201 	orr.w	r2, r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	e000      	b.n	800a7b6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	40012c00 	.word	0x40012c00
 800a7c8:	40014000 	.word	0x40014000
 800a7cc:	00010007 	.word	0x00010007

0800a7d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d001      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e03b      	b.n	800a860 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a19      	ldr	r2, [pc, #100]	; (800a86c <HAL_TIM_Base_Start_IT+0x9c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d009      	beq.n	800a81e <HAL_TIM_Base_Start_IT+0x4e>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a812:	d004      	beq.n	800a81e <HAL_TIM_Base_Start_IT+0x4e>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a15      	ldr	r2, [pc, #84]	; (800a870 <HAL_TIM_Base_Start_IT+0xa0>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d115      	bne.n	800a84a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	4b13      	ldr	r3, [pc, #76]	; (800a874 <HAL_TIM_Base_Start_IT+0xa4>)
 800a826:	4013      	ands	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b06      	cmp	r3, #6
 800a82e:	d015      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x8c>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a836:	d011      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0201 	orr.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a848:	e008      	b.n	800a85c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f042 0201 	orr.w	r2, r2, #1
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	e000      	b.n	800a85e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	40012c00 	.word	0x40012c00
 800a870:	40014000 	.word	0x40014000
 800a874:	00010007 	.word	0x00010007

0800a878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d122      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d11b      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f06f 0202 	mvn.w	r2, #2
 800a8a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f003 0303 	and.w	r3, r3, #3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9ce 	bl	800ac5c <HAL_TIM_IC_CaptureCallback>
 800a8c0:	e005      	b.n	800a8ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f9c0 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f9d1 	bl	800ac70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0304 	and.w	r3, r3, #4
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d122      	bne.n	800a928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d11b      	bne.n	800a928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f06f 0204 	mvn.w	r2, #4
 800a8f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f9a4 	bl	800ac5c <HAL_TIM_IC_CaptureCallback>
 800a914:	e005      	b.n	800a922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f996 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f9a7 	bl	800ac70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f003 0308 	and.w	r3, r3, #8
 800a932:	2b08      	cmp	r3, #8
 800a934:	d122      	bne.n	800a97c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	2b08      	cmp	r3, #8
 800a942:	d11b      	bne.n	800a97c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f06f 0208 	mvn.w	r2, #8
 800a94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2204      	movs	r2, #4
 800a952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f97a 	bl	800ac5c <HAL_TIM_IC_CaptureCallback>
 800a968:	e005      	b.n	800a976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f96c 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f97d 	bl	800ac70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	f003 0310 	and.w	r3, r3, #16
 800a986:	2b10      	cmp	r3, #16
 800a988:	d122      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	f003 0310 	and.w	r3, r3, #16
 800a994:	2b10      	cmp	r3, #16
 800a996:	d11b      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f06f 0210 	mvn.w	r2, #16
 800a9a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2208      	movs	r2, #8
 800a9a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d003      	beq.n	800a9be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f950 	bl	800ac5c <HAL_TIM_IC_CaptureCallback>
 800a9bc:	e005      	b.n	800a9ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f942 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f953 	bl	800ac70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d10e      	bne.n	800a9fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d107      	bne.n	800a9fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0201 	mvn.w	r2, #1
 800a9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7fa f846 	bl	8004a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa06:	2b80      	cmp	r3, #128	; 0x80
 800aa08:	d10e      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa14:	2b80      	cmp	r3, #128	; 0x80
 800aa16:	d107      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 faa6 	bl	800af74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa36:	d10e      	bne.n	800aa56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa42:	2b80      	cmp	r3, #128	; 0x80
 800aa44:	d107      	bne.n	800aa56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fa99 	bl	800af88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa60:	2b40      	cmp	r3, #64	; 0x40
 800aa62:	d10e      	bne.n	800aa82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6e:	2b40      	cmp	r3, #64	; 0x40
 800aa70:	d107      	bne.n	800aa82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f901 	bl	800ac84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	f003 0320 	and.w	r3, r3, #32
 800aa8c:	2b20      	cmp	r3, #32
 800aa8e:	d10e      	bne.n	800aaae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	f003 0320 	and.w	r3, r3, #32
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	d107      	bne.n	800aaae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f06f 0220 	mvn.w	r2, #32
 800aaa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fa59 	bl	800af60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <HAL_TIM_ConfigClockSource+0x1c>
 800aace:	2302      	movs	r3, #2
 800aad0:	e0b6      	b.n	800ac40 <HAL_TIM_ConfigClockSource+0x18a>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2202      	movs	r2, #2
 800aade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaf0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aaf4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aafc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab0e:	d03e      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0xd8>
 800ab10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab14:	f200 8087 	bhi.w	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab1c:	f000 8086 	beq.w	800ac2c <HAL_TIM_ConfigClockSource+0x176>
 800ab20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab24:	d87f      	bhi.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab26:	2b70      	cmp	r3, #112	; 0x70
 800ab28:	d01a      	beq.n	800ab60 <HAL_TIM_ConfigClockSource+0xaa>
 800ab2a:	2b70      	cmp	r3, #112	; 0x70
 800ab2c:	d87b      	bhi.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab2e:	2b60      	cmp	r3, #96	; 0x60
 800ab30:	d050      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0x11e>
 800ab32:	2b60      	cmp	r3, #96	; 0x60
 800ab34:	d877      	bhi.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab36:	2b50      	cmp	r3, #80	; 0x50
 800ab38:	d03c      	beq.n	800abb4 <HAL_TIM_ConfigClockSource+0xfe>
 800ab3a:	2b50      	cmp	r3, #80	; 0x50
 800ab3c:	d873      	bhi.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab3e:	2b40      	cmp	r3, #64	; 0x40
 800ab40:	d058      	beq.n	800abf4 <HAL_TIM_ConfigClockSource+0x13e>
 800ab42:	2b40      	cmp	r3, #64	; 0x40
 800ab44:	d86f      	bhi.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab46:	2b30      	cmp	r3, #48	; 0x30
 800ab48:	d064      	beq.n	800ac14 <HAL_TIM_ConfigClockSource+0x15e>
 800ab4a:	2b30      	cmp	r3, #48	; 0x30
 800ab4c:	d86b      	bhi.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab4e:	2b20      	cmp	r3, #32
 800ab50:	d060      	beq.n	800ac14 <HAL_TIM_ConfigClockSource+0x15e>
 800ab52:	2b20      	cmp	r3, #32
 800ab54:	d867      	bhi.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d05c      	beq.n	800ac14 <HAL_TIM_ConfigClockSource+0x15e>
 800ab5a:	2b10      	cmp	r3, #16
 800ab5c:	d05a      	beq.n	800ac14 <HAL_TIM_ConfigClockSource+0x15e>
 800ab5e:	e062      	b.n	800ac26 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	6899      	ldr	r1, [r3, #8]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f000 f970 	bl	800ae54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	609a      	str	r2, [r3, #8]
      break;
 800ab8c:	e04f      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	6899      	ldr	r1, [r3, #8]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f000 f959 	bl	800ae54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	689a      	ldr	r2, [r3, #8]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abb0:	609a      	str	r2, [r3, #8]
      break;
 800abb2:	e03c      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	6859      	ldr	r1, [r3, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	461a      	mov	r2, r3
 800abc2:	f000 f8cd 	bl	800ad60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2150      	movs	r1, #80	; 0x50
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 f926 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800abd2:	e02c      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	6859      	ldr	r1, [r3, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	461a      	mov	r2, r3
 800abe2:	f000 f8ec 	bl	800adbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2160      	movs	r1, #96	; 0x60
 800abec:	4618      	mov	r0, r3
 800abee:	f000 f916 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800abf2:	e01c      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6818      	ldr	r0, [r3, #0]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	6859      	ldr	r1, [r3, #4]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	461a      	mov	r2, r3
 800ac02:	f000 f8ad 	bl	800ad60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2140      	movs	r1, #64	; 0x40
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f906 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800ac12:	e00c      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	f000 f8fd 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800ac24:	e003      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	73fb      	strb	r3, [r7, #15]
      break;
 800ac2a:	e000      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ac2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a2a      	ldr	r2, [pc, #168]	; (800ad54 <TIM_Base_SetConfig+0xbc>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d003      	beq.n	800acb8 <TIM_Base_SetConfig+0x20>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb6:	d108      	bne.n	800acca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a21      	ldr	r2, [pc, #132]	; (800ad54 <TIM_Base_SetConfig+0xbc>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d00b      	beq.n	800acea <TIM_Base_SetConfig+0x52>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd8:	d007      	beq.n	800acea <TIM_Base_SetConfig+0x52>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a1e      	ldr	r2, [pc, #120]	; (800ad58 <TIM_Base_SetConfig+0xc0>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d003      	beq.n	800acea <TIM_Base_SetConfig+0x52>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a1d      	ldr	r2, [pc, #116]	; (800ad5c <TIM_Base_SetConfig+0xc4>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d108      	bne.n	800acfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a0c      	ldr	r2, [pc, #48]	; (800ad54 <TIM_Base_SetConfig+0xbc>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d007      	beq.n	800ad38 <TIM_Base_SetConfig+0xa0>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a0b      	ldr	r2, [pc, #44]	; (800ad58 <TIM_Base_SetConfig+0xc0>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d003      	beq.n	800ad38 <TIM_Base_SetConfig+0xa0>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a0a      	ldr	r2, [pc, #40]	; (800ad5c <TIM_Base_SetConfig+0xc4>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d103      	bne.n	800ad40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	691a      	ldr	r2, [r3, #16]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	615a      	str	r2, [r3, #20]
}
 800ad46:	bf00      	nop
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	40012c00 	.word	0x40012c00
 800ad58:	40014000 	.word	0x40014000
 800ad5c:	40014400 	.word	0x40014400

0800ad60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	f023 0201 	bic.w	r2, r3, #1
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f023 030a 	bic.w	r3, r3, #10
 800ad9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	621a      	str	r2, [r3, #32]
}
 800adb2:	bf00      	nop
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b087      	sub	sp, #28
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	f023 0210 	bic.w	r2, r3, #16
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ade8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	031b      	lsls	r3, r3, #12
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	011b      	lsls	r3, r3, #4
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	621a      	str	r2, [r3, #32]
}
 800ae12:	bf00      	nop
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b085      	sub	sp, #20
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	f043 0307 	orr.w	r3, r3, #7
 800ae40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	609a      	str	r2, [r3, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	021a      	lsls	r2, r3, #8
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	609a      	str	r2, [r3, #8]
}
 800ae88:	bf00      	nop
 800ae8a:	371c      	adds	r7, #28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e04f      	b.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a21      	ldr	r2, [pc, #132]	; (800af58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d108      	bne.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aedc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a14      	ldr	r2, [pc, #80]	; (800af58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d009      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af14:	d004      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a10      	ldr	r2, [pc, #64]	; (800af5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d10c      	bne.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	40012c00 	.word	0x40012c00
 800af5c:	40014000 	.word	0x40014000

0800af60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e040      	b.n	800b030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f9 ffba 	bl	8004f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2224      	movs	r2, #36	; 0x24
 800afc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f022 0201 	bic.w	r2, r2, #1
 800afd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f8c0 	bl	800b160 <UART_SetConfig>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d101      	bne.n	800afea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e022      	b.n	800b030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fae0 	bl	800b5b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f042 0201 	orr.w	r2, r2, #1
 800b026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fb67 	bl	800b6fc <UART_CheckIdleState>
 800b02e:	4603      	mov	r3, r0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	4613      	mov	r3, r2
 800b046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	f040 8082 	bne.w	800b156 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <HAL_UART_Transmit+0x26>
 800b058:	88fb      	ldrh	r3, [r7, #6]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e07a      	b.n	800b158 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d101      	bne.n	800b070 <HAL_UART_Transmit+0x38>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e073      	b.n	800b158 <HAL_UART_Transmit+0x120>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2221      	movs	r2, #33	; 0x21
 800b084:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b086:	f7fb f801 	bl	800608c <HAL_GetTick>
 800b08a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	88fa      	ldrh	r2, [r7, #6]
 800b090:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	88fa      	ldrh	r2, [r7, #6]
 800b098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0a4:	d108      	bne.n	800b0b8 <HAL_UART_Transmit+0x80>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	e003      	b.n	800b0c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b0c8:	e02d      	b.n	800b126 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2180      	movs	r1, #128	; 0x80
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fb5a 	bl	800b78e <UART_WaitOnFlagUntilTimeout>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e039      	b.n	800b158 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10b      	bne.n	800b102 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	881a      	ldrh	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0f6:	b292      	uxth	r2, r2
 800b0f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	3302      	adds	r3, #2
 800b0fe:	61bb      	str	r3, [r7, #24]
 800b100:	e008      	b.n	800b114 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	781a      	ldrb	r2, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	b292      	uxth	r2, r2
 800b10c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	3301      	adds	r3, #1
 800b112:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	3b01      	subs	r3, #1
 800b11e:	b29a      	uxth	r2, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1cb      	bne.n	800b0ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2200      	movs	r2, #0
 800b13a:	2140      	movs	r1, #64	; 0x40
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 fb26 	bl	800b78e <UART_WaitOnFlagUntilTimeout>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e005      	b.n	800b158 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2220      	movs	r2, #32
 800b150:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	e000      	b.n	800b158 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b156:	2302      	movs	r3, #2
  }
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b164:	b08a      	sub	sp, #40	; 0x28
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	689a      	ldr	r2, [r3, #8]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	431a      	orrs	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	431a      	orrs	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	4313      	orrs	r3, r2
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	4bb4      	ldr	r3, [pc, #720]	; (800b460 <UART_SetConfig+0x300>)
 800b190:	4013      	ands	r3, r2
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	6812      	ldr	r2, [r2, #0]
 800b196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b198:	430b      	orrs	r3, r1
 800b19a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	68da      	ldr	r2, [r3, #12]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4aa9      	ldr	r2, [pc, #676]	; (800b464 <UART_SetConfig+0x304>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d004      	beq.n	800b1cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4aa0      	ldr	r2, [pc, #640]	; (800b468 <UART_SetConfig+0x308>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d126      	bne.n	800b238 <UART_SetConfig+0xd8>
 800b1ea:	4ba0      	ldr	r3, [pc, #640]	; (800b46c <UART_SetConfig+0x30c>)
 800b1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f0:	f003 0303 	and.w	r3, r3, #3
 800b1f4:	2b03      	cmp	r3, #3
 800b1f6:	d81b      	bhi.n	800b230 <UART_SetConfig+0xd0>
 800b1f8:	a201      	add	r2, pc, #4	; (adr r2, 800b200 <UART_SetConfig+0xa0>)
 800b1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fe:	bf00      	nop
 800b200:	0800b211 	.word	0x0800b211
 800b204:	0800b221 	.word	0x0800b221
 800b208:	0800b219 	.word	0x0800b219
 800b20c:	0800b229 	.word	0x0800b229
 800b210:	2301      	movs	r3, #1
 800b212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b216:	e080      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b218:	2302      	movs	r3, #2
 800b21a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b21e:	e07c      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b220:	2304      	movs	r3, #4
 800b222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b226:	e078      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b228:	2308      	movs	r3, #8
 800b22a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b22e:	e074      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b230:	2310      	movs	r3, #16
 800b232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b236:	e070      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a8c      	ldr	r2, [pc, #560]	; (800b470 <UART_SetConfig+0x310>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d138      	bne.n	800b2b4 <UART_SetConfig+0x154>
 800b242:	4b8a      	ldr	r3, [pc, #552]	; (800b46c <UART_SetConfig+0x30c>)
 800b244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b248:	f003 030c 	and.w	r3, r3, #12
 800b24c:	2b0c      	cmp	r3, #12
 800b24e:	d82d      	bhi.n	800b2ac <UART_SetConfig+0x14c>
 800b250:	a201      	add	r2, pc, #4	; (adr r2, 800b258 <UART_SetConfig+0xf8>)
 800b252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b256:	bf00      	nop
 800b258:	0800b28d 	.word	0x0800b28d
 800b25c:	0800b2ad 	.word	0x0800b2ad
 800b260:	0800b2ad 	.word	0x0800b2ad
 800b264:	0800b2ad 	.word	0x0800b2ad
 800b268:	0800b29d 	.word	0x0800b29d
 800b26c:	0800b2ad 	.word	0x0800b2ad
 800b270:	0800b2ad 	.word	0x0800b2ad
 800b274:	0800b2ad 	.word	0x0800b2ad
 800b278:	0800b295 	.word	0x0800b295
 800b27c:	0800b2ad 	.word	0x0800b2ad
 800b280:	0800b2ad 	.word	0x0800b2ad
 800b284:	0800b2ad 	.word	0x0800b2ad
 800b288:	0800b2a5 	.word	0x0800b2a5
 800b28c:	2300      	movs	r3, #0
 800b28e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b292:	e042      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b294:	2302      	movs	r3, #2
 800b296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b29a:	e03e      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b29c:	2304      	movs	r3, #4
 800b29e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2a2:	e03a      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2aa:	e036      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b2ac:	2310      	movs	r3, #16
 800b2ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2b2:	e032      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a6a      	ldr	r2, [pc, #424]	; (800b464 <UART_SetConfig+0x304>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d12a      	bne.n	800b314 <UART_SetConfig+0x1b4>
 800b2be:	4b6b      	ldr	r3, [pc, #428]	; (800b46c <UART_SetConfig+0x30c>)
 800b2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b2c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2cc:	d01a      	beq.n	800b304 <UART_SetConfig+0x1a4>
 800b2ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2d2:	d81b      	bhi.n	800b30c <UART_SetConfig+0x1ac>
 800b2d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2d8:	d00c      	beq.n	800b2f4 <UART_SetConfig+0x194>
 800b2da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2de:	d815      	bhi.n	800b30c <UART_SetConfig+0x1ac>
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <UART_SetConfig+0x18c>
 800b2e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e8:	d008      	beq.n	800b2fc <UART_SetConfig+0x19c>
 800b2ea:	e00f      	b.n	800b30c <UART_SetConfig+0x1ac>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2f2:	e012      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2fa:	e00e      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b2fc:	2304      	movs	r3, #4
 800b2fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b302:	e00a      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b304:	2308      	movs	r3, #8
 800b306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b30a:	e006      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b30c:	2310      	movs	r3, #16
 800b30e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b312:	e002      	b.n	800b31a <UART_SetConfig+0x1ba>
 800b314:	2310      	movs	r3, #16
 800b316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a51      	ldr	r2, [pc, #324]	; (800b464 <UART_SetConfig+0x304>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d17a      	bne.n	800b41a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b328:	2b08      	cmp	r3, #8
 800b32a:	d824      	bhi.n	800b376 <UART_SetConfig+0x216>
 800b32c:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <UART_SetConfig+0x1d4>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b359 	.word	0x0800b359
 800b338:	0800b377 	.word	0x0800b377
 800b33c:	0800b361 	.word	0x0800b361
 800b340:	0800b377 	.word	0x0800b377
 800b344:	0800b367 	.word	0x0800b367
 800b348:	0800b377 	.word	0x0800b377
 800b34c:	0800b377 	.word	0x0800b377
 800b350:	0800b377 	.word	0x0800b377
 800b354:	0800b36f 	.word	0x0800b36f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b358:	f7fe fde0 	bl	8009f1c <HAL_RCC_GetPCLK1Freq>
 800b35c:	61f8      	str	r0, [r7, #28]
        break;
 800b35e:	e010      	b.n	800b382 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b360:	4b44      	ldr	r3, [pc, #272]	; (800b474 <UART_SetConfig+0x314>)
 800b362:	61fb      	str	r3, [r7, #28]
        break;
 800b364:	e00d      	b.n	800b382 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b366:	f7fe fd41 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 800b36a:	61f8      	str	r0, [r7, #28]
        break;
 800b36c:	e009      	b.n	800b382 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b36e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b372:	61fb      	str	r3, [r7, #28]
        break;
 800b374:	e005      	b.n	800b382 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 8107 	beq.w	800b598 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	685a      	ldr	r2, [r3, #4]
 800b38e:	4613      	mov	r3, r2
 800b390:	005b      	lsls	r3, r3, #1
 800b392:	4413      	add	r3, r2
 800b394:	69fa      	ldr	r2, [r7, #28]
 800b396:	429a      	cmp	r2, r3
 800b398:	d305      	bcc.n	800b3a6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b3a0:	69fa      	ldr	r2, [r7, #28]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d903      	bls.n	800b3ae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b3ac:	e0f4      	b.n	800b598 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	461c      	mov	r4, r3
 800b3b4:	4615      	mov	r5, r2
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	f04f 0300 	mov.w	r3, #0
 800b3be:	022b      	lsls	r3, r5, #8
 800b3c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b3c4:	0222      	lsls	r2, r4, #8
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	6849      	ldr	r1, [r1, #4]
 800b3ca:	0849      	lsrs	r1, r1, #1
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	4688      	mov	r8, r1
 800b3d0:	4681      	mov	r9, r0
 800b3d2:	eb12 0a08 	adds.w	sl, r2, r8
 800b3d6:	eb43 0b09 	adc.w	fp, r3, r9
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	603b      	str	r3, [r7, #0]
 800b3e2:	607a      	str	r2, [r7, #4]
 800b3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	4659      	mov	r1, fp
 800b3ec:	f7f5 fc4c 	bl	8000c88 <__aeabi_uldivmod>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3fe:	d308      	bcc.n	800b412 <UART_SetConfig+0x2b2>
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b406:	d204      	bcs.n	800b412 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	60da      	str	r2, [r3, #12]
 800b410:	e0c2      	b.n	800b598 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b418:	e0be      	b.n	800b598 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b422:	d16a      	bne.n	800b4fa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b428:	2b08      	cmp	r3, #8
 800b42a:	d834      	bhi.n	800b496 <UART_SetConfig+0x336>
 800b42c:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <UART_SetConfig+0x2d4>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b459 	.word	0x0800b459
 800b438:	0800b479 	.word	0x0800b479
 800b43c:	0800b481 	.word	0x0800b481
 800b440:	0800b497 	.word	0x0800b497
 800b444:	0800b487 	.word	0x0800b487
 800b448:	0800b497 	.word	0x0800b497
 800b44c:	0800b497 	.word	0x0800b497
 800b450:	0800b497 	.word	0x0800b497
 800b454:	0800b48f 	.word	0x0800b48f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b458:	f7fe fd60 	bl	8009f1c <HAL_RCC_GetPCLK1Freq>
 800b45c:	61f8      	str	r0, [r7, #28]
        break;
 800b45e:	e020      	b.n	800b4a2 <UART_SetConfig+0x342>
 800b460:	efff69f3 	.word	0xefff69f3
 800b464:	40008000 	.word	0x40008000
 800b468:	40013800 	.word	0x40013800
 800b46c:	40021000 	.word	0x40021000
 800b470:	40004400 	.word	0x40004400
 800b474:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b478:	f7fe fd66 	bl	8009f48 <HAL_RCC_GetPCLK2Freq>
 800b47c:	61f8      	str	r0, [r7, #28]
        break;
 800b47e:	e010      	b.n	800b4a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b480:	4b4c      	ldr	r3, [pc, #304]	; (800b5b4 <UART_SetConfig+0x454>)
 800b482:	61fb      	str	r3, [r7, #28]
        break;
 800b484:	e00d      	b.n	800b4a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b486:	f7fe fcb1 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 800b48a:	61f8      	str	r0, [r7, #28]
        break;
 800b48c:	e009      	b.n	800b4a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b492:	61fb      	str	r3, [r7, #28]
        break;
 800b494:	e005      	b.n	800b4a2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b4a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d077      	beq.n	800b598 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	005a      	lsls	r2, r3, #1
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	085b      	lsrs	r3, r3, #1
 800b4b2:	441a      	add	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	2b0f      	cmp	r3, #15
 800b4c2:	d916      	bls.n	800b4f2 <UART_SetConfig+0x392>
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ca:	d212      	bcs.n	800b4f2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	f023 030f 	bic.w	r3, r3, #15
 800b4d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	085b      	lsrs	r3, r3, #1
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	f003 0307 	and.w	r3, r3, #7
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	8afb      	ldrh	r3, [r7, #22]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	8afa      	ldrh	r2, [r7, #22]
 800b4ee:	60da      	str	r2, [r3, #12]
 800b4f0:	e052      	b.n	800b598 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b4f8:	e04e      	b.n	800b598 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4fe:	2b08      	cmp	r3, #8
 800b500:	d827      	bhi.n	800b552 <UART_SetConfig+0x3f2>
 800b502:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <UART_SetConfig+0x3a8>)
 800b504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b508:	0800b52d 	.word	0x0800b52d
 800b50c:	0800b535 	.word	0x0800b535
 800b510:	0800b53d 	.word	0x0800b53d
 800b514:	0800b553 	.word	0x0800b553
 800b518:	0800b543 	.word	0x0800b543
 800b51c:	0800b553 	.word	0x0800b553
 800b520:	0800b553 	.word	0x0800b553
 800b524:	0800b553 	.word	0x0800b553
 800b528:	0800b54b 	.word	0x0800b54b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b52c:	f7fe fcf6 	bl	8009f1c <HAL_RCC_GetPCLK1Freq>
 800b530:	61f8      	str	r0, [r7, #28]
        break;
 800b532:	e014      	b.n	800b55e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b534:	f7fe fd08 	bl	8009f48 <HAL_RCC_GetPCLK2Freq>
 800b538:	61f8      	str	r0, [r7, #28]
        break;
 800b53a:	e010      	b.n	800b55e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b53c:	4b1d      	ldr	r3, [pc, #116]	; (800b5b4 <UART_SetConfig+0x454>)
 800b53e:	61fb      	str	r3, [r7, #28]
        break;
 800b540:	e00d      	b.n	800b55e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b542:	f7fe fc53 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 800b546:	61f8      	str	r0, [r7, #28]
        break;
 800b548:	e009      	b.n	800b55e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b54a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b54e:	61fb      	str	r3, [r7, #28]
        break;
 800b550:	e005      	b.n	800b55e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b55c:	bf00      	nop
    }

    if (pclk != 0U)
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d019      	beq.n	800b598 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	085a      	lsrs	r2, r3, #1
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	441a      	add	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	fbb2 f3f3 	udiv	r3, r2, r3
 800b576:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	2b0f      	cmp	r3, #15
 800b57c:	d909      	bls.n	800b592 <UART_SetConfig+0x432>
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b584:	d205      	bcs.n	800b592 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	b29a      	uxth	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60da      	str	r2, [r3, #12]
 800b590:	e002      	b.n	800b598 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b5a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3728      	adds	r7, #40	; 0x28
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5b2:	bf00      	nop
 800b5b4:	00f42400 	.word	0x00f42400

0800b5b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00a      	beq.n	800b5e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00a      	beq.n	800b604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00a      	beq.n	800b626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	430a      	orrs	r2, r1
 800b624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	f003 0308 	and.w	r3, r3, #8
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00a      	beq.n	800b648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	f003 0310 	and.w	r3, r3, #16
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00a      	beq.n	800b66a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	430a      	orrs	r2, r1
 800b668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	f003 0320 	and.w	r3, r3, #32
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00a      	beq.n	800b68c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b694:	2b00      	cmp	r3, #0
 800b696:	d01a      	beq.n	800b6ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6b6:	d10a      	bne.n	800b6ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00a      	beq.n	800b6f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	605a      	str	r2, [r3, #4]
  }
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af02      	add	r7, sp, #8
 800b702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b70c:	f7fa fcbe 	bl	800608c <HAL_GetTick>
 800b710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	d10e      	bne.n	800b73e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f82d 	bl	800b78e <UART_WaitOnFlagUntilTimeout>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e023      	b.n	800b786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 0304 	and.w	r3, r3, #4
 800b748:	2b04      	cmp	r3, #4
 800b74a:	d10e      	bne.n	800b76a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b74c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f817 	bl	800b78e <UART_WaitOnFlagUntilTimeout>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	e00d      	b.n	800b786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2220      	movs	r2, #32
 800b76e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2220      	movs	r2, #32
 800b774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b09c      	sub	sp, #112	; 0x70
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	603b      	str	r3, [r7, #0]
 800b79a:	4613      	mov	r3, r2
 800b79c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b79e:	e0a5      	b.n	800b8ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a6:	f000 80a1 	beq.w	800b8ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7aa:	f7fa fc6f 	bl	800608c <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d302      	bcc.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b7ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d13e      	bne.n	800b83e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c8:	e853 3f00 	ldrex	r3, [r3]
 800b7cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7d4:	667b      	str	r3, [r7, #100]	; 0x64
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7e6:	e841 2300 	strex	r3, r2, [r1]
 800b7ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b7ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1e6      	bne.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	3308      	adds	r3, #8
 800b7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7fc:	e853 3f00 	ldrex	r3, [r3]
 800b800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	f023 0301 	bic.w	r3, r3, #1
 800b808:	663b      	str	r3, [r7, #96]	; 0x60
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3308      	adds	r3, #8
 800b810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b812:	64ba      	str	r2, [r7, #72]	; 0x48
 800b814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b81a:	e841 2300 	strex	r3, r2, [r1]
 800b81e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e5      	bne.n	800b7f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2220      	movs	r2, #32
 800b82a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2220      	movs	r2, #32
 800b830:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e067      	b.n	800b90e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d04f      	beq.n	800b8ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	69db      	ldr	r3, [r3, #28]
 800b852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b85a:	d147      	bne.n	800b8ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b864:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	e853 3f00 	ldrex	r3, [r3]
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b87a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	461a      	mov	r2, r3
 800b882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b884:	637b      	str	r3, [r7, #52]	; 0x34
 800b886:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b88c:	e841 2300 	strex	r3, r2, [r1]
 800b890:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1e6      	bne.n	800b866 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3308      	adds	r3, #8
 800b89e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f023 0301 	bic.w	r3, r3, #1
 800b8ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8b8:	623a      	str	r2, [r7, #32]
 800b8ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	69f9      	ldr	r1, [r7, #28]
 800b8be:	6a3a      	ldr	r2, [r7, #32]
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e5      	bne.n	800b898 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2220      	movs	r2, #32
 800b8d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2220      	movs	r2, #32
 800b8dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e010      	b.n	800b90e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	69da      	ldr	r2, [r3, #28]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	bf0c      	ite	eq
 800b8fc:	2301      	moveq	r3, #1
 800b8fe:	2300      	movne	r3, #0
 800b900:	b2db      	uxtb	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	429a      	cmp	r2, r3
 800b908:	f43f af4a 	beq.w	800b7a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3770      	adds	r7, #112	; 0x70
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <__NVIC_SetPriority>:
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	6039      	str	r1, [r7, #0]
 800b922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	db0a      	blt.n	800b942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	490c      	ldr	r1, [pc, #48]	; (800b964 <__NVIC_SetPriority+0x4c>)
 800b932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b936:	0112      	lsls	r2, r2, #4
 800b938:	b2d2      	uxtb	r2, r2
 800b93a:	440b      	add	r3, r1
 800b93c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b940:	e00a      	b.n	800b958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	b2da      	uxtb	r2, r3
 800b946:	4908      	ldr	r1, [pc, #32]	; (800b968 <__NVIC_SetPriority+0x50>)
 800b948:	79fb      	ldrb	r3, [r7, #7]
 800b94a:	f003 030f 	and.w	r3, r3, #15
 800b94e:	3b04      	subs	r3, #4
 800b950:	0112      	lsls	r2, r2, #4
 800b952:	b2d2      	uxtb	r2, r2
 800b954:	440b      	add	r3, r1
 800b956:	761a      	strb	r2, [r3, #24]
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	e000e100 	.word	0xe000e100
 800b968:	e000ed00 	.word	0xe000ed00

0800b96c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b96c:	b580      	push	{r7, lr}
 800b96e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b970:	4b05      	ldr	r3, [pc, #20]	; (800b988 <SysTick_Handler+0x1c>)
 800b972:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b974:	f003 f884 	bl	800ea80 <xTaskGetSchedulerState>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d001      	beq.n	800b982 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b97e:	f003 ffa3 	bl	800f8c8 <xPortSysTickHandler>
  }
}
 800b982:	bf00      	nop
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	e000e010 	.word	0xe000e010

0800b98c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b990:	2100      	movs	r1, #0
 800b992:	f06f 0004 	mvn.w	r0, #4
 800b996:	f7ff ffbf 	bl	800b918 <__NVIC_SetPriority>
#endif
}
 800b99a:	bf00      	nop
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9a6:	f3ef 8305 	mrs	r3, IPSR
 800b9aa:	603b      	str	r3, [r7, #0]
  return(result);
 800b9ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d003      	beq.n	800b9ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b9b2:	f06f 0305 	mvn.w	r3, #5
 800b9b6:	607b      	str	r3, [r7, #4]
 800b9b8:	e00c      	b.n	800b9d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b9ba:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <osKernelInitialize+0x44>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d105      	bne.n	800b9ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b9c2:	4b08      	ldr	r3, [pc, #32]	; (800b9e4 <osKernelInitialize+0x44>)
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	607b      	str	r3, [r7, #4]
 800b9cc:	e002      	b.n	800b9d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9d4:	687b      	ldr	r3, [r7, #4]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	20006804 	.word	0x20006804

0800b9e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ee:	f3ef 8305 	mrs	r3, IPSR
 800b9f2:	603b      	str	r3, [r7, #0]
  return(result);
 800b9f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b9fa:	f06f 0305 	mvn.w	r3, #5
 800b9fe:	607b      	str	r3, [r7, #4]
 800ba00:	e010      	b.n	800ba24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba02:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <osKernelStart+0x48>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d109      	bne.n	800ba1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba0a:	f7ff ffbf 	bl	800b98c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba0e:	4b08      	ldr	r3, [pc, #32]	; (800ba30 <osKernelStart+0x48>)
 800ba10:	2202      	movs	r2, #2
 800ba12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba14:	f002 fb0c 	bl	800e030 <vTaskStartScheduler>
      stat = osOK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	607b      	str	r3, [r7, #4]
 800ba1c:	e002      	b.n	800ba24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba24:	687b      	ldr	r3, [r7, #4]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	20006804 	.word	0x20006804

0800ba34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08e      	sub	sp, #56	; 0x38
 800ba38:	af04      	add	r7, sp, #16
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ba40:	2300      	movs	r3, #0
 800ba42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba44:	f3ef 8305 	mrs	r3, IPSR
 800ba48:	617b      	str	r3, [r7, #20]
  return(result);
 800ba4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d17e      	bne.n	800bb4e <osThreadNew+0x11a>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d07b      	beq.n	800bb4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ba56:	2340      	movs	r3, #64	; 0x40
 800ba58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba5a:	2318      	movs	r3, #24
 800ba5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ba62:	f04f 33ff 	mov.w	r3, #4294967295
 800ba66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d045      	beq.n	800bafa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <osThreadNew+0x48>
        name = attr->name;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d008      	beq.n	800baa2 <osThreadNew+0x6e>
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	2b38      	cmp	r3, #56	; 0x38
 800ba94:	d805      	bhi.n	800baa2 <osThreadNew+0x6e>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <osThreadNew+0x72>
        return (NULL);
 800baa2:	2300      	movs	r3, #0
 800baa4:	e054      	b.n	800bb50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	089b      	lsrs	r3, r3, #2
 800bab4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00e      	beq.n	800badc <osThreadNew+0xa8>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	2bbf      	cmp	r3, #191	; 0xbf
 800bac4:	d90a      	bls.n	800badc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d006      	beq.n	800badc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	695b      	ldr	r3, [r3, #20]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <osThreadNew+0xa8>
        mem = 1;
 800bad6:	2301      	movs	r3, #1
 800bad8:	61bb      	str	r3, [r7, #24]
 800bada:	e010      	b.n	800bafe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10c      	bne.n	800bafe <osThreadNew+0xca>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d108      	bne.n	800bafe <osThreadNew+0xca>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d104      	bne.n	800bafe <osThreadNew+0xca>
          mem = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	61bb      	str	r3, [r7, #24]
 800baf8:	e001      	b.n	800bafe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d110      	bne.n	800bb26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb0c:	9202      	str	r2, [sp, #8]
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	6a3a      	ldr	r2, [r7, #32]
 800bb18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f002 f81a 	bl	800db54 <xTaskCreateStatic>
 800bb20:	4603      	mov	r3, r0
 800bb22:	613b      	str	r3, [r7, #16]
 800bb24:	e013      	b.n	800bb4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d110      	bne.n	800bb4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	f107 0310 	add.w	r3, r7, #16
 800bb34:	9301      	str	r3, [sp, #4]
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f002 f865 	bl	800dc0e <xTaskCreate>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d001      	beq.n	800bb4e <osThreadNew+0x11a>
            hTask = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bb4e:	693b      	ldr	r3, [r7, #16]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3728      	adds	r7, #40	; 0x28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb60:	f3ef 8305 	mrs	r3, IPSR
 800bb64:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <osDelay+0x1c>
    stat = osErrorISR;
 800bb6c:	f06f 0305 	mvn.w	r3, #5
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	e007      	b.n	800bb84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f002 fa22 	bl	800dfc8 <vTaskDelay>
    }
  }

  return (stat);
 800bb84:	68fb      	ldr	r3, [r7, #12]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b086      	sub	sp, #24
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb9a:	f3ef 8305 	mrs	r3, IPSR
 800bb9e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bba0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d12d      	bne.n	800bc02 <osEventFlagsNew+0x74>
    mem = -1;
 800bba6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbaa:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d015      	beq.n	800bbde <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d006      	beq.n	800bbc8 <osEventFlagsNew+0x3a>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	2b1f      	cmp	r3, #31
 800bbc0:	d902      	bls.n	800bbc8 <osEventFlagsNew+0x3a>
        mem = 1;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	613b      	str	r3, [r7, #16]
 800bbc6:	e00c      	b.n	800bbe2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d108      	bne.n	800bbe2 <osEventFlagsNew+0x54>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d104      	bne.n	800bbe2 <osEventFlagsNew+0x54>
          mem = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	e001      	b.n	800bbe2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d106      	bne.n	800bbf6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 fc4b 	bl	800c488 <xEventGroupCreateStatic>
 800bbf2:	6178      	str	r0, [r7, #20]
 800bbf4:	e005      	b.n	800bc02 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800bbfc:	f000 fc7b 	bl	800c4f6 <xEventGroupCreate>
 800bc00:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800bc02:	697b      	ldr	r3, [r7, #20]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d004      	beq.n	800bc2a <osEventFlagsSet+0x1e>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800bc2a:	f06f 0303 	mvn.w	r3, #3
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	e028      	b.n	800bc84 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc32:	f3ef 8305 	mrs	r3, IPSR
 800bc36:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d01d      	beq.n	800bc7a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bc42:	f107 0308 	add.w	r3, r7, #8
 800bc46:	461a      	mov	r2, r3
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6938      	ldr	r0, [r7, #16]
 800bc4c:	f000 fdf6 	bl	800c83c <xEventGroupSetBitsFromISR>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d103      	bne.n	800bc5e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800bc56:	f06f 0302 	mvn.w	r3, #2
 800bc5a:	617b      	str	r3, [r7, #20]
 800bc5c:	e012      	b.n	800bc84 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00d      	beq.n	800bc84 <osEventFlagsSet+0x78>
 800bc68:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <osEventFlagsSet+0x84>)
 800bc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	e004      	b.n	800bc84 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6938      	ldr	r0, [r7, #16]
 800bc7e:	f000 fd23 	bl	800c6c8 <xEventGroupSetBits>
 800bc82:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800bc84:	697b      	ldr	r3, [r7, #20]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	e000ed04 	.word	0xe000ed04

0800bc94 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08c      	sub	sp, #48	; 0x30
 800bc98:	af02      	add	r7, sp, #8
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d004      	beq.n	800bcb6 <osEventFlagsWait+0x22>
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800bcb6:	f06f 0303 	mvn.w	r3, #3
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e04b      	b.n	800bd56 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcbe:	f3ef 8305 	mrs	r3, IPSR
 800bcc2:	617b      	str	r3, [r7, #20]
  return(result);
 800bcc4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800bcca:	f06f 0305 	mvn.w	r3, #5
 800bcce:	61fb      	str	r3, [r7, #28]
 800bcd0:	e041      	b.n	800bd56 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
 800bce0:	e001      	b.n	800bce6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800bce2:	2300      	movs	r3, #0
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f003 0302 	and.w	r3, r3, #2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	623b      	str	r3, [r7, #32]
 800bcf4:	e001      	b.n	800bcfa <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd00:	6a3a      	ldr	r2, [r7, #32]
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	69b8      	ldr	r0, [r7, #24]
 800bd06:	f000 fc11 	bl	800c52c <xEventGroupWaitBits>
 800bd0a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d010      	beq.n	800bd38 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d019      	beq.n	800bd56 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800bd28:	f06f 0301 	mvn.w	r3, #1
 800bd2c:	61fb      	str	r3, [r7, #28]
 800bd2e:	e012      	b.n	800bd56 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bd30:	f06f 0302 	mvn.w	r3, #2
 800bd34:	61fb      	str	r3, [r7, #28]
 800bd36:	e00e      	b.n	800bd56 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d109      	bne.n	800bd56 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800bd48:	f06f 0301 	mvn.w	r3, #1
 800bd4c:	61fb      	str	r3, [r7, #28]
 800bd4e:	e002      	b.n	800bd56 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bd50:	f06f 0302 	mvn.w	r3, #2
 800bd54:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800bd56:	69fb      	ldr	r3, [r7, #28]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3728      	adds	r7, #40	; 0x28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd6c:	f3ef 8305 	mrs	r3, IPSR
 800bd70:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd72:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d174      	bne.n	800be62 <osMutexNew+0x102>
    if (attr != NULL) {
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	61bb      	str	r3, [r7, #24]
 800bd84:	e001      	b.n	800bd8a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <osMutexNew+0x3a>
      rmtx = 1U;
 800bd94:	2301      	movs	r3, #1
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	e001      	b.n	800bd9e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	f003 0308 	and.w	r3, r3, #8
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d15c      	bne.n	800be62 <osMutexNew+0x102>
      mem = -1;
 800bda8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdac:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d015      	beq.n	800bde0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d006      	beq.n	800bdca <osMutexNew+0x6a>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	2b4f      	cmp	r3, #79	; 0x4f
 800bdc2:	d902      	bls.n	800bdca <osMutexNew+0x6a>
          mem = 1;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	613b      	str	r3, [r7, #16]
 800bdc8:	e00c      	b.n	800bde4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d108      	bne.n	800bde4 <osMutexNew+0x84>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d104      	bne.n	800bde4 <osMutexNew+0x84>
            mem = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	613b      	str	r3, [r7, #16]
 800bdde:	e001      	b.n	800bde4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d112      	bne.n	800be10 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d007      	beq.n	800be00 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	2004      	movs	r0, #4
 800bdf8:	f000 ff57 	bl	800ccaa <xQueueCreateMutexStatic>
 800bdfc:	61f8      	str	r0, [r7, #28]
 800bdfe:	e016      	b.n	800be2e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	4619      	mov	r1, r3
 800be06:	2001      	movs	r0, #1
 800be08:	f000 ff4f 	bl	800ccaa <xQueueCreateMutexStatic>
 800be0c:	61f8      	str	r0, [r7, #28]
 800be0e:	e00e      	b.n	800be2e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10b      	bne.n	800be2e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d004      	beq.n	800be26 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800be1c:	2004      	movs	r0, #4
 800be1e:	f000 ff2c 	bl	800cc7a <xQueueCreateMutex>
 800be22:	61f8      	str	r0, [r7, #28]
 800be24:	e003      	b.n	800be2e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800be26:	2001      	movs	r0, #1
 800be28:	f000 ff27 	bl	800cc7a <xQueueCreateMutex>
 800be2c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00c      	beq.n	800be4e <osMutexNew+0xee>
        if (attr != NULL) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <osMutexNew+0xe2>
          name = attr->name;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	e001      	b.n	800be46 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	69f8      	ldr	r0, [r7, #28]
 800be4a:	f001 fdfb 	bl	800da44 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d006      	beq.n	800be62 <osMutexNew+0x102>
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	f043 0301 	orr.w	r3, r3, #1
 800be60:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800be62:	69fb      	ldr	r3, [r7, #28]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3720      	adds	r7, #32
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f023 0301 	bic.w	r3, r3, #1
 800be7c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f003 0301 	and.w	r3, r3, #1
 800be84:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800be86:	2300      	movs	r3, #0
 800be88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be8a:	f3ef 8305 	mrs	r3, IPSR
 800be8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800be90:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800be96:	f06f 0305 	mvn.w	r3, #5
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e02c      	b.n	800bef8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d103      	bne.n	800beac <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bea4:	f06f 0303 	mvn.w	r3, #3
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	e025      	b.n	800bef8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d011      	beq.n	800bed6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6938      	ldr	r0, [r7, #16]
 800beb6:	f000 ff47 	bl	800cd48 <xQueueTakeMutexRecursive>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d01b      	beq.n	800bef8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800bec6:	f06f 0301 	mvn.w	r3, #1
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	e014      	b.n	800bef8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bece:	f06f 0302 	mvn.w	r3, #2
 800bed2:	617b      	str	r3, [r7, #20]
 800bed4:	e010      	b.n	800bef8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6938      	ldr	r0, [r7, #16]
 800beda:	f001 fadb 	bl	800d494 <xQueueSemaphoreTake>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d009      	beq.n	800bef8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800beea:	f06f 0301 	mvn.w	r3, #1
 800beee:	617b      	str	r3, [r7, #20]
 800bef0:	e002      	b.n	800bef8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bef2:	f06f 0302 	mvn.w	r3, #2
 800bef6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800bef8:	697b      	ldr	r3, [r7, #20]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b086      	sub	sp, #24
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f023 0301 	bic.w	r3, r3, #1
 800bf10:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf1e:	f3ef 8305 	mrs	r3, IPSR
 800bf22:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf24:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <osMutexRelease+0x30>
    stat = osErrorISR;
 800bf2a:	f06f 0305 	mvn.w	r3, #5
 800bf2e:	617b      	str	r3, [r7, #20]
 800bf30:	e01f      	b.n	800bf72 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d103      	bne.n	800bf40 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800bf38:	f06f 0303 	mvn.w	r3, #3
 800bf3c:	617b      	str	r3, [r7, #20]
 800bf3e:	e018      	b.n	800bf72 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d009      	beq.n	800bf5a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bf46:	6938      	ldr	r0, [r7, #16]
 800bf48:	f000 feca 	bl	800cce0 <xQueueGiveMutexRecursive>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d00f      	beq.n	800bf72 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bf52:	f06f 0302 	mvn.w	r3, #2
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	e00b      	b.n	800bf72 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	2100      	movs	r1, #0
 800bf60:	6938      	ldr	r0, [r7, #16]
 800bf62:	f000 ff91 	bl	800ce88 <xQueueGenericSend>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d002      	beq.n	800bf72 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bf6c:	f06f 0302 	mvn.w	r3, #2
 800bf70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bf72:	697b      	ldr	r3, [r7, #20]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08a      	sub	sp, #40	; 0x28
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf8c:	f3ef 8305 	mrs	r3, IPSR
 800bf90:	613b      	str	r3, [r7, #16]
  return(result);
 800bf92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d175      	bne.n	800c084 <osSemaphoreNew+0x108>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d072      	beq.n	800c084 <osSemaphoreNew+0x108>
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d86e      	bhi.n	800c084 <osSemaphoreNew+0x108>
    mem = -1;
 800bfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d015      	beq.n	800bfde <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d006      	beq.n	800bfc8 <osSemaphoreNew+0x4c>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	2b4f      	cmp	r3, #79	; 0x4f
 800bfc0:	d902      	bls.n	800bfc8 <osSemaphoreNew+0x4c>
        mem = 1;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	e00c      	b.n	800bfe2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d108      	bne.n	800bfe2 <osSemaphoreNew+0x66>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d104      	bne.n	800bfe2 <osSemaphoreNew+0x66>
          mem = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	e001      	b.n	800bfe2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe8:	d04c      	beq.n	800c084 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d128      	bne.n	800c042 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d10a      	bne.n	800c00c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2203      	movs	r2, #3
 800bffc:	9200      	str	r2, [sp, #0]
 800bffe:	2200      	movs	r2, #0
 800c000:	2100      	movs	r1, #0
 800c002:	2001      	movs	r0, #1
 800c004:	f000 fd4a 	bl	800ca9c <xQueueGenericCreateStatic>
 800c008:	61f8      	str	r0, [r7, #28]
 800c00a:	e005      	b.n	800c018 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c00c:	2203      	movs	r2, #3
 800c00e:	2100      	movs	r1, #0
 800c010:	2001      	movs	r0, #1
 800c012:	f000 fdbb 	bl	800cb8c <xQueueGenericCreate>
 800c016:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d022      	beq.n	800c064 <osSemaphoreNew+0xe8>
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d01f      	beq.n	800c064 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c024:	2300      	movs	r3, #0
 800c026:	2200      	movs	r2, #0
 800c028:	2100      	movs	r1, #0
 800c02a:	69f8      	ldr	r0, [r7, #28]
 800c02c:	f000 ff2c 	bl	800ce88 <xQueueGenericSend>
 800c030:	4603      	mov	r3, r0
 800c032:	2b01      	cmp	r3, #1
 800c034:	d016      	beq.n	800c064 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c036:	69f8      	ldr	r0, [r7, #28]
 800c038:	f001 fbb8 	bl	800d7ac <vQueueDelete>
            hSemaphore = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	61fb      	str	r3, [r7, #28]
 800c040:	e010      	b.n	800c064 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d108      	bne.n	800c05a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	461a      	mov	r2, r3
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 feaf 	bl	800cdb4 <xQueueCreateCountingSemaphoreStatic>
 800c056:	61f8      	str	r0, [r7, #28]
 800c058:	e004      	b.n	800c064 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 fee0 	bl	800ce22 <xQueueCreateCountingSemaphore>
 800c062:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00c      	beq.n	800c084 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	617b      	str	r3, [r7, #20]
 800c076:	e001      	b.n	800c07c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c07c:	6979      	ldr	r1, [r7, #20]
 800c07e:	69f8      	ldr	r0, [r7, #28]
 800c080:	f001 fce0 	bl	800da44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c084:	69fb      	ldr	r3, [r7, #28]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3720      	adds	r7, #32
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d103      	bne.n	800c0b0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c0a8:	f06f 0303 	mvn.w	r3, #3
 800c0ac:	617b      	str	r3, [r7, #20]
 800c0ae:	e039      	b.n	800c124 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0b0:	f3ef 8305 	mrs	r3, IPSR
 800c0b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d022      	beq.n	800c102 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d003      	beq.n	800c0ca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c0c2:	f06f 0303 	mvn.w	r3, #3
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	e02c      	b.n	800c124 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c0ce:	f107 0308 	add.w	r3, r7, #8
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6938      	ldr	r0, [r7, #16]
 800c0d8:	f001 fae8 	bl	800d6ac <xQueueReceiveFromISR>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d003      	beq.n	800c0ea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c0e2:	f06f 0302 	mvn.w	r3, #2
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	e01c      	b.n	800c124 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d019      	beq.n	800c124 <osSemaphoreAcquire+0x94>
 800c0f0:	4b0f      	ldr	r3, [pc, #60]	; (800c130 <osSemaphoreAcquire+0xa0>)
 800c0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0f6:	601a      	str	r2, [r3, #0]
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	e010      	b.n	800c124 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6938      	ldr	r0, [r7, #16]
 800c106:	f001 f9c5 	bl	800d494 <xQueueSemaphoreTake>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d009      	beq.n	800c124 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c116:	f06f 0301 	mvn.w	r3, #1
 800c11a:	617b      	str	r3, [r7, #20]
 800c11c:	e002      	b.n	800c124 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c11e:	f06f 0302 	mvn.w	r3, #2
 800c122:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c124:	697b      	ldr	r3, [r7, #20]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c140:	2300      	movs	r3, #0
 800c142:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d103      	bne.n	800c152 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c14a:	f06f 0303 	mvn.w	r3, #3
 800c14e:	617b      	str	r3, [r7, #20]
 800c150:	e02c      	b.n	800c1ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c152:	f3ef 8305 	mrs	r3, IPSR
 800c156:	60fb      	str	r3, [r7, #12]
  return(result);
 800c158:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d01a      	beq.n	800c194 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c15e:	2300      	movs	r3, #0
 800c160:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c162:	f107 0308 	add.w	r3, r7, #8
 800c166:	4619      	mov	r1, r3
 800c168:	6938      	ldr	r0, [r7, #16]
 800c16a:	f001 f826 	bl	800d1ba <xQueueGiveFromISR>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b01      	cmp	r3, #1
 800c172:	d003      	beq.n	800c17c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c174:	f06f 0302 	mvn.w	r3, #2
 800c178:	617b      	str	r3, [r7, #20]
 800c17a:	e017      	b.n	800c1ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d014      	beq.n	800c1ac <osSemaphoreRelease+0x78>
 800c182:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <osSemaphoreRelease+0x84>)
 800c184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	e00b      	b.n	800c1ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c194:	2300      	movs	r3, #0
 800c196:	2200      	movs	r2, #0
 800c198:	2100      	movs	r1, #0
 800c19a:	6938      	ldr	r0, [r7, #16]
 800c19c:	f000 fe74 	bl	800ce88 <xQueueGenericSend>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d002      	beq.n	800c1ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c1a6:	f06f 0302 	mvn.w	r3, #2
 800c1aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c1ac:	697b      	ldr	r3, [r7, #20]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08a      	sub	sp, #40	; 0x28
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1cc:	f3ef 8305 	mrs	r3, IPSR
 800c1d0:	613b      	str	r3, [r7, #16]
  return(result);
 800c1d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d15f      	bne.n	800c298 <osMessageQueueNew+0xdc>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d05c      	beq.n	800c298 <osMessageQueueNew+0xdc>
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d059      	beq.n	800c298 <osMessageQueueNew+0xdc>
    mem = -1;
 800c1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d029      	beq.n	800c244 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d012      	beq.n	800c21e <osMessageQueueNew+0x62>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	2b4f      	cmp	r3, #79	; 0x4f
 800c1fe:	d90e      	bls.n	800c21e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00a      	beq.n	800c21e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	695a      	ldr	r2, [r3, #20]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	fb01 f303 	mul.w	r3, r1, r3
 800c214:	429a      	cmp	r2, r3
 800c216:	d302      	bcc.n	800c21e <osMessageQueueNew+0x62>
        mem = 1;
 800c218:	2301      	movs	r3, #1
 800c21a:	61bb      	str	r3, [r7, #24]
 800c21c:	e014      	b.n	800c248 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d110      	bne.n	800c248 <osMessageQueueNew+0x8c>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10c      	bne.n	800c248 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c232:	2b00      	cmp	r3, #0
 800c234:	d108      	bne.n	800c248 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d104      	bne.n	800c248 <osMessageQueueNew+0x8c>
          mem = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	61bb      	str	r3, [r7, #24]
 800c242:	e001      	b.n	800c248 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d10b      	bne.n	800c266 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2100      	movs	r1, #0
 800c258:	9100      	str	r1, [sp, #0]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 fc1d 	bl	800ca9c <xQueueGenericCreateStatic>
 800c262:	61f8      	str	r0, [r7, #28]
 800c264:	e008      	b.n	800c278 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d105      	bne.n	800c278 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c26c:	2200      	movs	r2, #0
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 fc8b 	bl	800cb8c <xQueueGenericCreate>
 800c276:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00c      	beq.n	800c298 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <osMessageQueueNew+0xd0>
        name = attr->name;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	617b      	str	r3, [r7, #20]
 800c28a:	e001      	b.n	800c290 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c28c:	2300      	movs	r3, #0
 800c28e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c290:	6979      	ldr	r1, [r7, #20]
 800c292:	69f8      	ldr	r0, [r7, #28]
 800c294:	f001 fbd6 	bl	800da44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c298:	69fb      	ldr	r3, [r7, #28]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3720      	adds	r7, #32
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
	...

0800c2a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2bc:	f3ef 8305 	mrs	r3, IPSR
 800c2c0:	617b      	str	r3, [r7, #20]
  return(result);
 800c2c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d028      	beq.n	800c31a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d005      	beq.n	800c2da <osMessageQueuePut+0x36>
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <osMessageQueuePut+0x36>
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c2da:	f06f 0303 	mvn.w	r3, #3
 800c2de:	61fb      	str	r3, [r7, #28]
 800c2e0:	e038      	b.n	800c354 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c2e6:	f107 0210 	add.w	r2, r7, #16
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	69b8      	ldr	r0, [r7, #24]
 800c2f0:	f000 fec8 	bl	800d084 <xQueueGenericSendFromISR>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d003      	beq.n	800c302 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c2fa:	f06f 0302 	mvn.w	r3, #2
 800c2fe:	61fb      	str	r3, [r7, #28]
 800c300:	e028      	b.n	800c354 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d025      	beq.n	800c354 <osMessageQueuePut+0xb0>
 800c308:	4b15      	ldr	r3, [pc, #84]	; (800c360 <osMessageQueuePut+0xbc>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	e01c      	b.n	800c354 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <osMessageQueuePut+0x82>
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d103      	bne.n	800c32e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c326:	f06f 0303 	mvn.w	r3, #3
 800c32a:	61fb      	str	r3, [r7, #28]
 800c32c:	e012      	b.n	800c354 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c32e:	2300      	movs	r3, #0
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	68b9      	ldr	r1, [r7, #8]
 800c334:	69b8      	ldr	r0, [r7, #24]
 800c336:	f000 fda7 	bl	800ce88 <xQueueGenericSend>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d009      	beq.n	800c354 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c346:	f06f 0301 	mvn.w	r3, #1
 800c34a:	61fb      	str	r3, [r7, #28]
 800c34c:	e002      	b.n	800c354 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c34e:	f06f 0302 	mvn.w	r3, #2
 800c352:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c354:	69fb      	ldr	r3, [r7, #28]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3720      	adds	r7, #32
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	e000ed04 	.word	0xe000ed04

0800c364 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c376:	2300      	movs	r3, #0
 800c378:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c37a:	f3ef 8305 	mrs	r3, IPSR
 800c37e:	617b      	str	r3, [r7, #20]
  return(result);
 800c380:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c382:	2b00      	cmp	r3, #0
 800c384:	d028      	beq.n	800c3d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d005      	beq.n	800c398 <osMessageQueueGet+0x34>
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <osMessageQueueGet+0x34>
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c398:	f06f 0303 	mvn.w	r3, #3
 800c39c:	61fb      	str	r3, [r7, #28]
 800c39e:	e037      	b.n	800c410 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c3a4:	f107 0310 	add.w	r3, r7, #16
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	68b9      	ldr	r1, [r7, #8]
 800c3ac:	69b8      	ldr	r0, [r7, #24]
 800c3ae:	f001 f97d 	bl	800d6ac <xQueueReceiveFromISR>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d003      	beq.n	800c3c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c3b8:	f06f 0302 	mvn.w	r3, #2
 800c3bc:	61fb      	str	r3, [r7, #28]
 800c3be:	e027      	b.n	800c410 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d024      	beq.n	800c410 <osMessageQueueGet+0xac>
 800c3c6:	4b15      	ldr	r3, [pc, #84]	; (800c41c <osMessageQueueGet+0xb8>)
 800c3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	e01b      	b.n	800c410 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <osMessageQueueGet+0x80>
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d103      	bne.n	800c3ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c3e4:	f06f 0303 	mvn.w	r3, #3
 800c3e8:	61fb      	str	r3, [r7, #28]
 800c3ea:	e011      	b.n	800c410 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	69b8      	ldr	r0, [r7, #24]
 800c3f2:	f000 ff6f 	bl	800d2d4 <xQueueReceive>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d009      	beq.n	800c410 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c402:	f06f 0301 	mvn.w	r3, #1
 800c406:	61fb      	str	r3, [r7, #28]
 800c408:	e002      	b.n	800c410 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c40a:	f06f 0302 	mvn.w	r3, #2
 800c40e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c410:	69fb      	ldr	r3, [r7, #28]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3720      	adds	r7, #32
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	e000ed04 	.word	0xe000ed04

0800c420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4a07      	ldr	r2, [pc, #28]	; (800c44c <vApplicationGetIdleTaskMemory+0x2c>)
 800c430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	4a06      	ldr	r2, [pc, #24]	; (800c450 <vApplicationGetIdleTaskMemory+0x30>)
 800c436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2240      	movs	r2, #64	; 0x40
 800c43c:	601a      	str	r2, [r3, #0]
}
 800c43e:	bf00      	nop
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20006808 	.word	0x20006808
 800c450:	200068c8 	.word	0x200068c8

0800c454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a07      	ldr	r2, [pc, #28]	; (800c480 <vApplicationGetTimerTaskMemory+0x2c>)
 800c464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	4a06      	ldr	r2, [pc, #24]	; (800c484 <vApplicationGetTimerTaskMemory+0x30>)
 800c46a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2280      	movs	r2, #128	; 0x80
 800c470:	601a      	str	r2, [r3, #0]
}
 800c472:	bf00      	nop
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	200069c8 	.word	0x200069c8
 800c484:	20006a88 	.word	0x20006a88

0800c488 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b086      	sub	sp, #24
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10a      	bne.n	800c4ac <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c4a8:	bf00      	nop
 800c4aa:	e7fe      	b.n	800c4aa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c4ac:	2320      	movs	r3, #32
 800c4ae:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b20      	cmp	r3, #32
 800c4b4:	d00a      	beq.n	800c4cc <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	60fb      	str	r3, [r7, #12]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00a      	beq.n	800c4ec <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 f9bf 	bl	800c864 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c4ec:	697b      	ldr	r3, [r7, #20]
	}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c4fc:	2020      	movs	r0, #32
 800c4fe:	f003 fa73 	bl	800f9e8 <pvPortMalloc>
 800c502:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	3304      	adds	r3, #4
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f9a5 	bl	800c864 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c520:	687b      	ldr	r3, [r7, #4]
	}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b090      	sub	sp, #64	; 0x40
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
 800c538:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c542:	2300      	movs	r3, #0
 800c544:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10a      	bne.n	800c562 <xEventGroupWaitBits+0x36>
	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	623b      	str	r3, [r7, #32]
}
 800c55e:	bf00      	nop
 800c560:	e7fe      	b.n	800c560 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <xEventGroupWaitBits+0x56>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	61fb      	str	r3, [r7, #28]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10a      	bne.n	800c59e <xEventGroupWaitBits+0x72>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	61bb      	str	r3, [r7, #24]
}
 800c59a:	bf00      	nop
 800c59c:	e7fe      	b.n	800c59c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c59e:	f002 fa6f 	bl	800ea80 <xTaskGetSchedulerState>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <xEventGroupWaitBits+0x82>
 800c5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <xEventGroupWaitBits+0x86>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e000      	b.n	800c5b4 <xEventGroupWaitBits+0x88>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10a      	bne.n	800c5ce <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	617b      	str	r3, [r7, #20]
}
 800c5ca:	bf00      	nop
 800c5cc:	e7fe      	b.n	800c5cc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c5ce:	f001 fda1 	bl	800e114 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	68b9      	ldr	r1, [r7, #8]
 800c5dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5de:	f000 f90b 	bl	800c7f8 <prvTestWaitCondition>
 800c5e2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00e      	beq.n	800c608 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d028      	beq.n	800c64a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	43db      	mvns	r3, r3
 800c600:	401a      	ands	r2, r3
 800c602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	e020      	b.n	800c64a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d104      	bne.n	800c618 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c612:	2301      	movs	r3, #1
 800c614:	633b      	str	r3, [r7, #48]	; 0x30
 800c616:	e018      	b.n	800c64a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d003      	beq.n	800c626 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c624:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c632:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c636:	1d18      	adds	r0, r3, #4
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	4313      	orrs	r3, r2
 800c63e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c640:	4619      	mov	r1, r3
 800c642:	f001 ff81 	bl	800e548 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c64a:	f001 fd71 	bl	800e130 <xTaskResumeAll>
 800c64e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c652:	2b00      	cmp	r3, #0
 800c654:	d031      	beq.n	800c6ba <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d107      	bne.n	800c66c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c65c:	4b19      	ldr	r3, [pc, #100]	; (800c6c4 <xEventGroupWaitBits+0x198>)
 800c65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c66c:	f002 fb7e 	bl	800ed6c <uxTaskResetEventItemValue>
 800c670:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d11a      	bne.n	800c6b2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c67c:	f003 f892 	bl	800f7a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	68b9      	ldr	r1, [r7, #8]
 800c68a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c68c:	f000 f8b4 	bl	800c7f8 <prvTestWaitCondition>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d009      	beq.n	800c6aa <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d006      	beq.n	800c6aa <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	43db      	mvns	r3, r3
 800c6a4:	401a      	ands	r2, r3
 800c6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c6ae:	f003 f8a9 	bl	800f804 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3740      	adds	r7, #64	; 0x40
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	e000ed04 	.word	0xe000ed04

0800c6c8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08e      	sub	sp, #56	; 0x38
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10a      	bne.n	800c6fa <xEventGroupSetBits+0x32>
	__asm volatile
 800c6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	613b      	str	r3, [r7, #16]
}
 800c6f6:	bf00      	nop
 800c6f8:	e7fe      	b.n	800c6f8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00a      	beq.n	800c71a <xEventGroupSetBits+0x52>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	60fb      	str	r3, [r7, #12]
}
 800c716:	bf00      	nop
 800c718:	e7fe      	b.n	800c718 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	3304      	adds	r3, #4
 800c71e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	3308      	adds	r3, #8
 800c724:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c726:	f001 fcf5 	bl	800e114 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	431a      	orrs	r2, r3
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c73c:	e03c      	b.n	800c7b8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c74a:	2300      	movs	r3, #0
 800c74c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c754:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c75c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c764:	2b00      	cmp	r3, #0
 800c766:	d108      	bne.n	800c77a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	4013      	ands	r3, r2
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00b      	beq.n	800c78c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c774:	2301      	movs	r3, #1
 800c776:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c778:	e008      	b.n	800c78c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	4013      	ands	r3, r2
 800c782:	69ba      	ldr	r2, [r7, #24]
 800c784:	429a      	cmp	r2, r3
 800c786:	d101      	bne.n	800c78c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c788:	2301      	movs	r3, #1
 800c78a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d010      	beq.n	800c7b4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7b0:	f001 ff96 	bl	800e6e0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c7b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d1be      	bne.n	800c73e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c6:	43db      	mvns	r3, r3
 800c7c8:	401a      	ands	r2, r3
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c7ce:	f001 fcaf 	bl	800e130 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d4:	681b      	ldr	r3, [r3, #0]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3738      	adds	r7, #56	; 0x38
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b082      	sub	sp, #8
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ff6c 	bl	800c6c8 <xEventGroupSetBits>
}
 800c7f0:	bf00      	nop
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d107      	bne.n	800c81e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	4013      	ands	r3, r2
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00a      	beq.n	800c82e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e007      	b.n	800c82e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	4013      	ands	r3, r2
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	429a      	cmp	r2, r3
 800c828:	d101      	bne.n	800c82e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c82a:	2301      	movs	r3, #1
 800c82c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c82e:	697b      	ldr	r3, [r7, #20]
}
 800c830:	4618      	mov	r0, r3
 800c832:	371c      	adds	r7, #28
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	68f9      	ldr	r1, [r7, #12]
 800c84e:	4804      	ldr	r0, [pc, #16]	; (800c860 <xEventGroupSetBitsFromISR+0x24>)
 800c850:	f002 fe5a 	bl	800f508 <xTimerPendFunctionCallFromISR>
 800c854:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c856:	697b      	ldr	r3, [r7, #20]
	}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	0800c7df 	.word	0x0800c7df

0800c864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f103 0208 	add.w	r2, r3, #8
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f04f 32ff 	mov.w	r2, #4294967295
 800c87c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f103 0208 	add.w	r2, r3, #8
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f103 0208 	add.w	r2, r3, #8
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8b2:	bf00      	nop
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b085      	sub	sp, #20
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
}
 800c8fa:	bf00      	nop
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c906:	b480      	push	{r7}
 800c908:	b085      	sub	sp, #20
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91c:	d103      	bne.n	800c926 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e00c      	b.n	800c940 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	3308      	adds	r3, #8
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	e002      	b.n	800c934 <vListInsert+0x2e>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d2f6      	bcs.n	800c92e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	601a      	str	r2, [r3, #0]
}
 800c96c:	bf00      	nop
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	6892      	ldr	r2, [r2, #8]
 800c98e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	6852      	ldr	r2, [r2, #4]
 800c998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d103      	bne.n	800c9ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689a      	ldr	r2, [r3, #8]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	1e5a      	subs	r2, r3, #1
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10a      	bne.n	800c9f6 <xQueueGenericReset+0x2a>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	60bb      	str	r3, [r7, #8]
}
 800c9f2:	bf00      	nop
 800c9f4:	e7fe      	b.n	800c9f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c9f6:	f002 fed5 	bl	800f7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca02:	68f9      	ldr	r1, [r7, #12]
 800ca04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca06:	fb01 f303 	mul.w	r3, r1, r3
 800ca0a:	441a      	add	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca26:	3b01      	subs	r3, #1
 800ca28:	68f9      	ldr	r1, [r7, #12]
 800ca2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca2c:	fb01 f303 	mul.w	r3, r1, r3
 800ca30:	441a      	add	r2, r3
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	22ff      	movs	r2, #255	; 0xff
 800ca3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	22ff      	movs	r2, #255	; 0xff
 800ca42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d114      	bne.n	800ca76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d01a      	beq.n	800ca8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3310      	adds	r3, #16
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f001 fddd 	bl	800e618 <xTaskRemoveFromEventList>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d012      	beq.n	800ca8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca64:	4b0c      	ldr	r3, [pc, #48]	; (800ca98 <xQueueGenericReset+0xcc>)
 800ca66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	e009      	b.n	800ca8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3310      	adds	r3, #16
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7ff fef2 	bl	800c864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	3324      	adds	r3, #36	; 0x24
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7ff feed 	bl	800c864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca8a:	f002 febb 	bl	800f804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca8e:	2301      	movs	r3, #1
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3710      	adds	r7, #16
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08e      	sub	sp, #56	; 0x38
 800caa0:	af02      	add	r7, sp, #8
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
 800caa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10a      	bne.n	800cac6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10a      	bne.n	800cae2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cade:	bf00      	nop
 800cae0:	e7fe      	b.n	800cae0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <xQueueGenericCreateStatic+0x52>
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <xQueueGenericCreateStatic+0x56>
 800caee:	2301      	movs	r3, #1
 800caf0:	e000      	b.n	800caf4 <xQueueGenericCreateStatic+0x58>
 800caf2:	2300      	movs	r3, #0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10a      	bne.n	800cb0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	623b      	str	r3, [r7, #32]
}
 800cb0a:	bf00      	nop
 800cb0c:	e7fe      	b.n	800cb0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <xQueueGenericCreateStatic+0x7e>
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <xQueueGenericCreateStatic+0x82>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e000      	b.n	800cb20 <xQueueGenericCreateStatic+0x84>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10a      	bne.n	800cb3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	61fb      	str	r3, [r7, #28]
}
 800cb36:	bf00      	nop
 800cb38:	e7fe      	b.n	800cb38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cb3a:	2350      	movs	r3, #80	; 0x50
 800cb3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b50      	cmp	r3, #80	; 0x50
 800cb42:	d00a      	beq.n	800cb5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	61bb      	str	r3, [r7, #24]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00d      	beq.n	800cb82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	4613      	mov	r3, r2
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f000 f83f 	bl	800cc00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3730      	adds	r7, #48	; 0x30
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08a      	sub	sp, #40	; 0x28
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	4613      	mov	r3, r2
 800cb98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	613b      	str	r3, [r7, #16]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	fb02 f303 	mul.w	r3, r2, r3
 800cbbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	3350      	adds	r3, #80	; 0x50
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f002 ff0f 	bl	800f9e8 <pvPortMalloc>
 800cbca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d011      	beq.n	800cbf6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	3350      	adds	r3, #80	; 0x50
 800cbda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbe4:	79fa      	ldrb	r2, [r7, #7]
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	4613      	mov	r3, r2
 800cbec:	697a      	ldr	r2, [r7, #20]
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f000 f805 	bl	800cc00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbf6:	69bb      	ldr	r3, [r7, #24]
	}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3720      	adds	r7, #32
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d103      	bne.n	800cc1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	e002      	b.n	800cc22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc2e:	2101      	movs	r1, #1
 800cc30:	69b8      	ldr	r0, [r7, #24]
 800cc32:	f7ff fecb 	bl	800c9cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	78fa      	ldrb	r2, [r7, #3]
 800cc3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc3e:	bf00      	nop
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00e      	beq.n	800cc72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cc66:	2300      	movs	r3, #0
 800cc68:	2200      	movs	r2, #0
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f90b 	bl	800ce88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cc72:	bf00      	nop
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b086      	sub	sp, #24
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	4603      	mov	r3, r0
 800cc82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cc84:	2301      	movs	r3, #1
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	6939      	ldr	r1, [r7, #16]
 800cc92:	6978      	ldr	r0, [r7, #20]
 800cc94:	f7ff ff7a 	bl	800cb8c <xQueueGenericCreate>
 800cc98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7ff ffd3 	bl	800cc46 <prvInitialiseMutex>

		return xNewQueue;
 800cca0:	68fb      	ldr	r3, [r7, #12]
	}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b088      	sub	sp, #32
 800ccae:	af02      	add	r7, sp, #8
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	6039      	str	r1, [r7, #0]
 800ccb4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	617b      	str	r3, [r7, #20]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ccbe:	79fb      	ldrb	r3, [r7, #7]
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	6939      	ldr	r1, [r7, #16]
 800ccc8:	6978      	ldr	r0, [r7, #20]
 800ccca:	f7ff fee7 	bl	800ca9c <xQueueGenericCreateStatic>
 800ccce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7ff ffb8 	bl	800cc46 <prvInitialiseMutex>

		return xNewQueue;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
	}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cce0:	b590      	push	{r4, r7, lr}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	60fb      	str	r3, [r7, #12]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	689c      	ldr	r4, [r3, #8]
 800cd0c:	f001 fea8 	bl	800ea60 <xTaskGetCurrentTaskHandle>
 800cd10:	4603      	mov	r3, r0
 800cd12:	429c      	cmp	r4, r3
 800cd14:	d111      	bne.n	800cd3a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	1e5a      	subs	r2, r3, #1
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d105      	bne.n	800cd34 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cd28:	2300      	movs	r3, #0
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	6938      	ldr	r0, [r7, #16]
 800cd30:	f000 f8aa 	bl	800ce88 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cd34:	2301      	movs	r3, #1
 800cd36:	617b      	str	r3, [r7, #20]
 800cd38:	e001      	b.n	800cd3e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cd3e:	697b      	ldr	r3, [r7, #20]
	}
 800cd40:	4618      	mov	r0, r3
 800cd42:	371c      	adds	r7, #28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd90      	pop	{r4, r7, pc}

0800cd48 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cd48:	b590      	push	{r4, r7, lr}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	60fb      	str	r3, [r7, #12]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	689c      	ldr	r4, [r3, #8]
 800cd76:	f001 fe73 	bl	800ea60 <xTaskGetCurrentTaskHandle>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	429c      	cmp	r4, r3
 800cd7e:	d107      	bne.n	800cd90 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	617b      	str	r3, [r7, #20]
 800cd8e:	e00c      	b.n	800cdaa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	6938      	ldr	r0, [r7, #16]
 800cd94:	f000 fb7e 	bl	800d494 <xQueueSemaphoreTake>
 800cd98:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d004      	beq.n	800cdaa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cdaa:	697b      	ldr	r3, [r7, #20]
	}
 800cdac:	4618      	mov	r0, r3
 800cdae:	371c      	adds	r7, #28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd90      	pop	{r4, r7, pc}

0800cdb4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b08a      	sub	sp, #40	; 0x28
 800cdb8:	af02      	add	r7, sp, #8
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10a      	bne.n	800cddc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	61bb      	str	r3, [r7, #24]
}
 800cdd8:	bf00      	nop
 800cdda:	e7fe      	b.n	800cdda <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d90a      	bls.n	800cdfa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	617b      	str	r3, [r7, #20]
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	2100      	movs	r1, #0
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff fe49 	bl	800ca9c <xQueueGenericCreateStatic>
 800ce0a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d002      	beq.n	800ce18 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ce18:	69fb      	ldr	r3, [r7, #28]
	}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3720      	adds	r7, #32
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b086      	sub	sp, #24
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10a      	bne.n	800ce48 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	613b      	str	r3, [r7, #16]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d90a      	bls.n	800ce66 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ce50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	60fb      	str	r3, [r7, #12]
}
 800ce62:	bf00      	nop
 800ce64:	e7fe      	b.n	800ce64 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ce66:	2202      	movs	r2, #2
 800ce68:	2100      	movs	r1, #0
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7ff fe8e 	bl	800cb8c <xQueueGenericCreate>
 800ce70:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ce7e:	697b      	ldr	r3, [r7, #20]
	}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3718      	adds	r7, #24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08e      	sub	sp, #56	; 0x38
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce96:	2300      	movs	r3, #0
 800ce98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <xQueueGenericSend+0x32>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceb6:	bf00      	nop
 800ceb8:	e7fe      	b.n	800ceb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d103      	bne.n	800cec8 <xQueueGenericSend+0x40>
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d101      	bne.n	800cecc <xQueueGenericSend+0x44>
 800cec8:	2301      	movs	r3, #1
 800ceca:	e000      	b.n	800cece <xQueueGenericSend+0x46>
 800cecc:	2300      	movs	r3, #0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <xQueueGenericSend+0x60>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d103      	bne.n	800cef6 <xQueueGenericSend+0x6e>
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d101      	bne.n	800cefa <xQueueGenericSend+0x72>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e000      	b.n	800cefc <xQueueGenericSend+0x74>
 800cefa:	2300      	movs	r3, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10a      	bne.n	800cf16 <xQueueGenericSend+0x8e>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	623b      	str	r3, [r7, #32]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf16:	f001 fdb3 	bl	800ea80 <xTaskGetSchedulerState>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d102      	bne.n	800cf26 <xQueueGenericSend+0x9e>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <xQueueGenericSend+0xa2>
 800cf26:	2301      	movs	r3, #1
 800cf28:	e000      	b.n	800cf2c <xQueueGenericSend+0xa4>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10a      	bne.n	800cf46 <xQueueGenericSend+0xbe>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	61fb      	str	r3, [r7, #28]
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf46:	f002 fc2d 	bl	800f7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d302      	bcc.n	800cf5c <xQueueGenericSend+0xd4>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d129      	bne.n	800cfb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf62:	f000 fc5e 	bl	800d822 <prvCopyDataToQueue>
 800cf66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d010      	beq.n	800cf92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	3324      	adds	r3, #36	; 0x24
 800cf74:	4618      	mov	r0, r3
 800cf76:	f001 fb4f 	bl	800e618 <xTaskRemoveFromEventList>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d013      	beq.n	800cfa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf80:	4b3f      	ldr	r3, [pc, #252]	; (800d080 <xQueueGenericSend+0x1f8>)
 800cf82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf86:	601a      	str	r2, [r3, #0]
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	e00a      	b.n	800cfa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d007      	beq.n	800cfa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf98:	4b39      	ldr	r3, [pc, #228]	; (800d080 <xQueueGenericSend+0x1f8>)
 800cf9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cfa8:	f002 fc2c 	bl	800f804 <vPortExitCritical>
				return pdPASS;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e063      	b.n	800d078 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d103      	bne.n	800cfbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfb6:	f002 fc25 	bl	800f804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	e05c      	b.n	800d078 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d106      	bne.n	800cfd2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfc4:	f107 0314 	add.w	r3, r7, #20
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f001 fbeb 	bl	800e7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfd2:	f002 fc17 	bl	800f804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfd6:	f001 f89d 	bl	800e114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfda:	f002 fbe3 	bl	800f7a4 <vPortEnterCritical>
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfe4:	b25b      	sxtb	r3, r3
 800cfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfea:	d103      	bne.n	800cff4 <xQueueGenericSend+0x16c>
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	2200      	movs	r2, #0
 800cff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cffa:	b25b      	sxtb	r3, r3
 800cffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d000:	d103      	bne.n	800d00a <xQueueGenericSend+0x182>
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d00a:	f002 fbfb 	bl	800f804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d00e:	1d3a      	adds	r2, r7, #4
 800d010:	f107 0314 	add.w	r3, r7, #20
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f001 fbda 	bl	800e7d0 <xTaskCheckForTimeOut>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d124      	bne.n	800d06c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d024:	f000 fcf5 	bl	800da12 <prvIsQueueFull>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d018      	beq.n	800d060 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	3310      	adds	r3, #16
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	4611      	mov	r1, r2
 800d036:	4618      	mov	r0, r3
 800d038:	f001 fa62 	bl	800e500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d03c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d03e:	f000 fc80 	bl	800d942 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d042:	f001 f875 	bl	800e130 <xTaskResumeAll>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f47f af7c 	bne.w	800cf46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d04e:	4b0c      	ldr	r3, [pc, #48]	; (800d080 <xQueueGenericSend+0x1f8>)
 800d050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	e772      	b.n	800cf46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d062:	f000 fc6e 	bl	800d942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d066:	f001 f863 	bl	800e130 <xTaskResumeAll>
 800d06a:	e76c      	b.n	800cf46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d06c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d06e:	f000 fc68 	bl	800d942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d072:	f001 f85d 	bl	800e130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d076:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3738      	adds	r7, #56	; 0x38
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	e000ed04 	.word	0xe000ed04

0800d084 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b090      	sub	sp, #64	; 0x40
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d103      	bne.n	800d0c0 <xQueueGenericSendFromISR+0x3c>
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <xQueueGenericSendFromISR+0x40>
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e000      	b.n	800d0c6 <xQueueGenericSendFromISR+0x42>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10a      	bne.n	800d0e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d103      	bne.n	800d0ee <xQueueGenericSendFromISR+0x6a>
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d101      	bne.n	800d0f2 <xQueueGenericSendFromISR+0x6e>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e000      	b.n	800d0f4 <xQueueGenericSendFromISR+0x70>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10a      	bne.n	800d10e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	623b      	str	r3, [r7, #32]
}
 800d10a:	bf00      	nop
 800d10c:	e7fe      	b.n	800d10c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d10e:	f002 fc2b 	bl	800f968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d112:	f3ef 8211 	mrs	r2, BASEPRI
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	61fa      	str	r2, [r7, #28]
 800d128:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d12a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d12c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d136:	429a      	cmp	r2, r3
 800d138:	d302      	bcc.n	800d140 <xQueueGenericSendFromISR+0xbc>
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d12f      	bne.n	800d1a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	68b9      	ldr	r1, [r7, #8]
 800d154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d156:	f000 fb64 	bl	800d822 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d15a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d112      	bne.n	800d18a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d016      	beq.n	800d19a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	3324      	adds	r3, #36	; 0x24
 800d170:	4618      	mov	r0, r3
 800d172:	f001 fa51 	bl	800e618 <xTaskRemoveFromEventList>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00e      	beq.n	800d19a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00b      	beq.n	800d19a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	601a      	str	r2, [r3, #0]
 800d188:	e007      	b.n	800d19a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d18a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d18e:	3301      	adds	r3, #1
 800d190:	b2db      	uxtb	r3, r3
 800d192:	b25a      	sxtb	r2, r3
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d19a:	2301      	movs	r3, #1
 800d19c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d19e:	e001      	b.n	800d1a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d1ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3740      	adds	r7, #64	; 0x40
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b08e      	sub	sp, #56	; 0x38
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10a      	bne.n	800d1e4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	623b      	str	r3, [r7, #32]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00a      	beq.n	800d202 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	61fb      	str	r3, [r7, #28]
}
 800d1fe:	bf00      	nop
 800d200:	e7fe      	b.n	800d200 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d103      	bne.n	800d212 <xQueueGiveFromISR+0x58>
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <xQueueGiveFromISR+0x5c>
 800d212:	2301      	movs	r3, #1
 800d214:	e000      	b.n	800d218 <xQueueGiveFromISR+0x5e>
 800d216:	2300      	movs	r3, #0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	61bb      	str	r3, [r7, #24]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d232:	f002 fb99 	bl	800f968 <vPortValidateInterruptPriority>
	__asm volatile
 800d236:	f3ef 8211 	mrs	r2, BASEPRI
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	617a      	str	r2, [r7, #20]
 800d24c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d24e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d250:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d256:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d25e:	429a      	cmp	r2, r3
 800d260:	d22b      	bcs.n	800d2ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26e:	1c5a      	adds	r2, r3, #1
 800d270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d272:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27c:	d112      	bne.n	800d2a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	2b00      	cmp	r3, #0
 800d284:	d016      	beq.n	800d2b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d288:	3324      	adds	r3, #36	; 0x24
 800d28a:	4618      	mov	r0, r3
 800d28c:	f001 f9c4 	bl	800e618 <xTaskRemoveFromEventList>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00e      	beq.n	800d2b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00b      	beq.n	800d2b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	e007      	b.n	800d2b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	b25a      	sxtb	r2, r3
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2b8:	e001      	b.n	800d2be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f383 8811 	msr	BASEPRI, r3
}
 800d2c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3738      	adds	r7, #56	; 0x38
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b08c      	sub	sp, #48	; 0x30
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <xQueueReceive+0x30>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	623b      	str	r3, [r7, #32]
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d103      	bne.n	800d312 <xQueueReceive+0x3e>
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <xQueueReceive+0x42>
 800d312:	2301      	movs	r3, #1
 800d314:	e000      	b.n	800d318 <xQueueReceive+0x44>
 800d316:	2300      	movs	r3, #0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <xQueueReceive+0x5e>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	61fb      	str	r3, [r7, #28]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d332:	f001 fba5 	bl	800ea80 <xTaskGetSchedulerState>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <xQueueReceive+0x6e>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <xQueueReceive+0x72>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <xQueueReceive+0x74>
 800d346:	2300      	movs	r3, #0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10a      	bne.n	800d362 <xQueueReceive+0x8e>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	61bb      	str	r3, [r7, #24]
}
 800d35e:	bf00      	nop
 800d360:	e7fe      	b.n	800d360 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d362:	f002 fa1f 	bl	800f7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d01f      	beq.n	800d3b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d372:	68b9      	ldr	r1, [r7, #8]
 800d374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d376:	f000 fabe 	bl	800d8f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	1e5a      	subs	r2, r3, #1
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00f      	beq.n	800d3aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38c:	3310      	adds	r3, #16
 800d38e:	4618      	mov	r0, r3
 800d390:	f001 f942 	bl	800e618 <xTaskRemoveFromEventList>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d007      	beq.n	800d3aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d39a:	4b3d      	ldr	r3, [pc, #244]	; (800d490 <xQueueReceive+0x1bc>)
 800d39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a0:	601a      	str	r2, [r3, #0]
 800d3a2:	f3bf 8f4f 	dsb	sy
 800d3a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3aa:	f002 fa2b 	bl	800f804 <vPortExitCritical>
				return pdPASS;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e069      	b.n	800d486 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d103      	bne.n	800d3c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3b8:	f002 fa24 	bl	800f804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	e062      	b.n	800d486 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d106      	bne.n	800d3d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3c6:	f107 0310 	add.w	r3, r7, #16
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f001 f9ea 	bl	800e7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3d4:	f002 fa16 	bl	800f804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3d8:	f000 fe9c 	bl	800e114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3dc:	f002 f9e2 	bl	800f7a4 <vPortEnterCritical>
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3e6:	b25b      	sxtb	r3, r3
 800d3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ec:	d103      	bne.n	800d3f6 <xQueueReceive+0x122>
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3fc:	b25b      	sxtb	r3, r3
 800d3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d402:	d103      	bne.n	800d40c <xQueueReceive+0x138>
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	2200      	movs	r2, #0
 800d408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d40c:	f002 f9fa 	bl	800f804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d410:	1d3a      	adds	r2, r7, #4
 800d412:	f107 0310 	add.w	r3, r7, #16
 800d416:	4611      	mov	r1, r2
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 f9d9 	bl	800e7d0 <xTaskCheckForTimeOut>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d123      	bne.n	800d46c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d426:	f000 fade 	bl	800d9e6 <prvIsQueueEmpty>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d017      	beq.n	800d460 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	3324      	adds	r3, #36	; 0x24
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f001 f861 	bl	800e500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d440:	f000 fa7f 	bl	800d942 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d444:	f000 fe74 	bl	800e130 <xTaskResumeAll>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d189      	bne.n	800d362 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d44e:	4b10      	ldr	r3, [pc, #64]	; (800d490 <xQueueReceive+0x1bc>)
 800d450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d454:	601a      	str	r2, [r3, #0]
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	e780      	b.n	800d362 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d462:	f000 fa6e 	bl	800d942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d466:	f000 fe63 	bl	800e130 <xTaskResumeAll>
 800d46a:	e77a      	b.n	800d362 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d46c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d46e:	f000 fa68 	bl	800d942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d472:	f000 fe5d 	bl	800e130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d478:	f000 fab5 	bl	800d9e6 <prvIsQueueEmpty>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f43f af6f 	beq.w	800d362 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d484:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d486:	4618      	mov	r0, r3
 800d488:	3730      	adds	r7, #48	; 0x30
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08e      	sub	sp, #56	; 0x38
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10a      	bne.n	800d4c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	623b      	str	r3, [r7, #32]
}
 800d4c2:	bf00      	nop
 800d4c4:	e7fe      	b.n	800d4c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00a      	beq.n	800d4e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	61fb      	str	r3, [r7, #28]
}
 800d4e0:	bf00      	nop
 800d4e2:	e7fe      	b.n	800d4e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4e4:	f001 facc 	bl	800ea80 <xTaskGetSchedulerState>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d102      	bne.n	800d4f4 <xQueueSemaphoreTake+0x60>
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d101      	bne.n	800d4f8 <xQueueSemaphoreTake+0x64>
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e000      	b.n	800d4fa <xQueueSemaphoreTake+0x66>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	61bb      	str	r3, [r7, #24]
}
 800d510:	bf00      	nop
 800d512:	e7fe      	b.n	800d512 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d514:	f002 f946 	bl	800f7a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	2b00      	cmp	r3, #0
 800d522:	d024      	beq.n	800d56e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	1e5a      	subs	r2, r3, #1
 800d528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d104      	bne.n	800d53e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d534:	f001 fc32 	bl	800ed9c <pvTaskIncrementMutexHeldCount>
 800d538:	4602      	mov	r2, r0
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00f      	beq.n	800d566 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	3310      	adds	r3, #16
 800d54a:	4618      	mov	r0, r3
 800d54c:	f001 f864 	bl	800e618 <xTaskRemoveFromEventList>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d007      	beq.n	800d566 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d556:	4b54      	ldr	r3, [pc, #336]	; (800d6a8 <xQueueSemaphoreTake+0x214>)
 800d558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d566:	f002 f94d 	bl	800f804 <vPortExitCritical>
				return pdPASS;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e097      	b.n	800d69e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d111      	bne.n	800d598 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	617b      	str	r3, [r7, #20]
}
 800d58c:	bf00      	nop
 800d58e:	e7fe      	b.n	800d58e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d590:	f002 f938 	bl	800f804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d594:	2300      	movs	r3, #0
 800d596:	e082      	b.n	800d69e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d106      	bne.n	800d5ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d59e:	f107 030c 	add.w	r3, r7, #12
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f001 f8fe 	bl	800e7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5ac:	f002 f92a 	bl	800f804 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5b0:	f000 fdb0 	bl	800e114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5b4:	f002 f8f6 	bl	800f7a4 <vPortEnterCritical>
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5be:	b25b      	sxtb	r3, r3
 800d5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c4:	d103      	bne.n	800d5ce <xQueueSemaphoreTake+0x13a>
 800d5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5d4:	b25b      	sxtb	r3, r3
 800d5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5da:	d103      	bne.n	800d5e4 <xQueueSemaphoreTake+0x150>
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5e4:	f002 f90e 	bl	800f804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5e8:	463a      	mov	r2, r7
 800d5ea:	f107 030c 	add.w	r3, r7, #12
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f001 f8ed 	bl	800e7d0 <xTaskCheckForTimeOut>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d132      	bne.n	800d662 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5fe:	f000 f9f2 	bl	800d9e6 <prvIsQueueEmpty>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d026      	beq.n	800d656 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d109      	bne.n	800d624 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d610:	f002 f8c8 	bl	800f7a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	4618      	mov	r0, r3
 800d61a:	f001 fa4f 	bl	800eabc <xTaskPriorityInherit>
 800d61e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d620:	f002 f8f0 	bl	800f804 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	3324      	adds	r3, #36	; 0x24
 800d628:	683a      	ldr	r2, [r7, #0]
 800d62a:	4611      	mov	r1, r2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f000 ff67 	bl	800e500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d634:	f000 f985 	bl	800d942 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d638:	f000 fd7a 	bl	800e130 <xTaskResumeAll>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f47f af68 	bne.w	800d514 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d644:	4b18      	ldr	r3, [pc, #96]	; (800d6a8 <xQueueSemaphoreTake+0x214>)
 800d646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	e75e      	b.n	800d514 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d658:	f000 f973 	bl	800d942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d65c:	f000 fd68 	bl	800e130 <xTaskResumeAll>
 800d660:	e758      	b.n	800d514 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d664:	f000 f96d 	bl	800d942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d668:	f000 fd62 	bl	800e130 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d66c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d66e:	f000 f9ba 	bl	800d9e6 <prvIsQueueEmpty>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	f43f af4d 	beq.w	800d514 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00d      	beq.n	800d69c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d680:	f002 f890 	bl	800f7a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d686:	f000 f8b4 	bl	800d7f2 <prvGetDisinheritPriorityAfterTimeout>
 800d68a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d692:	4618      	mov	r0, r3
 800d694:	f001 fae8 	bl	800ec68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d698:	f002 f8b4 	bl	800f804 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d69c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3738      	adds	r7, #56	; 0x38
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	e000ed04 	.word	0xe000ed04

0800d6ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08e      	sub	sp, #56	; 0x38
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10a      	bne.n	800d6d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	623b      	str	r3, [r7, #32]
}
 800d6d4:	bf00      	nop
 800d6d6:	e7fe      	b.n	800d6d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d103      	bne.n	800d6e6 <xQueueReceiveFromISR+0x3a>
 800d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <xQueueReceiveFromISR+0x3e>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e000      	b.n	800d6ec <xQueueReceiveFromISR+0x40>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10a      	bne.n	800d706 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	f383 8811 	msr	BASEPRI, r3
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	61fb      	str	r3, [r7, #28]
}
 800d702:	bf00      	nop
 800d704:	e7fe      	b.n	800d704 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d706:	f002 f92f 	bl	800f968 <vPortValidateInterruptPriority>
	__asm volatile
 800d70a:	f3ef 8211 	mrs	r2, BASEPRI
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	61ba      	str	r2, [r7, #24]
 800d720:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d722:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d724:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d02f      	beq.n	800d792 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d73c:	68b9      	ldr	r1, [r7, #8]
 800d73e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d740:	f000 f8d9 	bl	800d8f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	1e5a      	subs	r2, r3, #1
 800d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d74c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d754:	d112      	bne.n	800d77c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d016      	beq.n	800d78c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	3310      	adds	r3, #16
 800d762:	4618      	mov	r0, r3
 800d764:	f000 ff58 	bl	800e618 <xTaskRemoveFromEventList>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00e      	beq.n	800d78c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	e007      	b.n	800d78c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d780:	3301      	adds	r3, #1
 800d782:	b2db      	uxtb	r3, r3
 800d784:	b25a      	sxtb	r2, r3
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d78c:	2301      	movs	r3, #1
 800d78e:	637b      	str	r3, [r7, #52]	; 0x34
 800d790:	e001      	b.n	800d796 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d792:	2300      	movs	r3, #0
 800d794:	637b      	str	r3, [r7, #52]	; 0x34
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	f383 8811 	msr	BASEPRI, r3
}
 800d7a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3738      	adds	r7, #56	; 0x38
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <vQueueDelete+0x28>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	60bb      	str	r3, [r7, #8]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f000 f95f 	bl	800da98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d102      	bne.n	800d7ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f002 f9cb 	bl	800fb80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d7ea:	bf00      	nop
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b085      	sub	sp, #20
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d006      	beq.n	800d810 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d80c:	60fb      	str	r3, [r7, #12]
 800d80e:	e001      	b.n	800d814 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d810:	2300      	movs	r3, #0
 800d812:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d814:	68fb      	ldr	r3, [r7, #12]
	}
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b086      	sub	sp, #24
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d82e:	2300      	movs	r3, #0
 800d830:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d836:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10d      	bne.n	800d85c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d14d      	bne.n	800d8e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f001 f99d 	bl	800eb8c <xTaskPriorityDisinherit>
 800d852:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	609a      	str	r2, [r3, #8]
 800d85a:	e043      	b.n	800d8e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d119      	bne.n	800d896 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6858      	ldr	r0, [r3, #4]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86a:	461a      	mov	r2, r3
 800d86c:	68b9      	ldr	r1, [r7, #8]
 800d86e:	f002 fad1 	bl	800fe14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	441a      	add	r2, r3
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d32b      	bcc.n	800d8e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	605a      	str	r2, [r3, #4]
 800d894:	e026      	b.n	800d8e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	68d8      	ldr	r0, [r3, #12]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89e:	461a      	mov	r2, r3
 800d8a0:	68b9      	ldr	r1, [r7, #8]
 800d8a2:	f002 fab7 	bl	800fe14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ae:	425b      	negs	r3, r3
 800d8b0:	441a      	add	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	68da      	ldr	r2, [r3, #12]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d207      	bcs.n	800d8d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	689a      	ldr	r2, [r3, #8]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ca:	425b      	negs	r3, r3
 800d8cc:	441a      	add	r2, r3
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d105      	bne.n	800d8e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8ec:	697b      	ldr	r3, [r7, #20]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d904:	2b00      	cmp	r3, #0
 800d906:	d018      	beq.n	800d93a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	68da      	ldr	r2, [r3, #12]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	441a      	add	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d303      	bcc.n	800d92a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68d9      	ldr	r1, [r3, #12]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d932:	461a      	mov	r2, r3
 800d934:	6838      	ldr	r0, [r7, #0]
 800d936:	f002 fa6d 	bl	800fe14 <memcpy>
	}
}
 800d93a:	bf00      	nop
 800d93c:	3708      	adds	r7, #8
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d942:	b580      	push	{r7, lr}
 800d944:	b084      	sub	sp, #16
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d94a:	f001 ff2b 	bl	800f7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d954:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d956:	e011      	b.n	800d97c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d012      	beq.n	800d986 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	3324      	adds	r3, #36	; 0x24
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fe57 	bl	800e618 <xTaskRemoveFromEventList>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d970:	f000 ff90 	bl	800e894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
 800d976:	3b01      	subs	r3, #1
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d97c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d980:	2b00      	cmp	r3, #0
 800d982:	dce9      	bgt.n	800d958 <prvUnlockQueue+0x16>
 800d984:	e000      	b.n	800d988 <prvUnlockQueue+0x46>
					break;
 800d986:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	22ff      	movs	r2, #255	; 0xff
 800d98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d990:	f001 ff38 	bl	800f804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d994:	f001 ff06 	bl	800f7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d99e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9a0:	e011      	b.n	800d9c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d012      	beq.n	800d9d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3310      	adds	r3, #16
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 fe32 	bl	800e618 <xTaskRemoveFromEventList>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d9ba:	f000 ff6b 	bl	800e894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d9be:	7bbb      	ldrb	r3, [r7, #14]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	dce9      	bgt.n	800d9a2 <prvUnlockQueue+0x60>
 800d9ce:	e000      	b.n	800d9d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d9d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	22ff      	movs	r2, #255	; 0xff
 800d9d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d9da:	f001 ff13 	bl	800f804 <vPortExitCritical>
}
 800d9de:	bf00      	nop
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9ee:	f001 fed9 	bl	800f7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	e001      	b.n	800da04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da00:	2300      	movs	r3, #0
 800da02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da04:	f001 fefe 	bl	800f804 <vPortExitCritical>

	return xReturn;
 800da08:	68fb      	ldr	r3, [r7, #12]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b084      	sub	sp, #16
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da1a:	f001 fec3 	bl	800f7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da26:	429a      	cmp	r2, r3
 800da28:	d102      	bne.n	800da30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da2a:	2301      	movs	r3, #1
 800da2c:	60fb      	str	r3, [r7, #12]
 800da2e:	e001      	b.n	800da34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da34:	f001 fee6 	bl	800f804 <vPortExitCritical>

	return xReturn;
 800da38:	68fb      	ldr	r3, [r7, #12]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
	...

0800da44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da4e:	2300      	movs	r3, #0
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	e014      	b.n	800da7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da54:	4a0f      	ldr	r2, [pc, #60]	; (800da94 <vQueueAddToRegistry+0x50>)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10b      	bne.n	800da78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da60:	490c      	ldr	r1, [pc, #48]	; (800da94 <vQueueAddToRegistry+0x50>)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	683a      	ldr	r2, [r7, #0]
 800da66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800da6a:	4a0a      	ldr	r2, [pc, #40]	; (800da94 <vQueueAddToRegistry+0x50>)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	4413      	add	r3, r2
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800da76:	e006      	b.n	800da86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	3301      	adds	r3, #1
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b07      	cmp	r3, #7
 800da82:	d9e7      	bls.n	800da54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da84:	bf00      	nop
 800da86:	bf00      	nop
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20006c88 	.word	0x20006c88

0800da98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800daa0:	2300      	movs	r3, #0
 800daa2:	60fb      	str	r3, [r7, #12]
 800daa4:	e016      	b.n	800dad4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800daa6:	4a10      	ldr	r2, [pc, #64]	; (800dae8 <vQueueUnregisterQueue+0x50>)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	4413      	add	r3, r2
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d10b      	bne.n	800dace <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dab6:	4a0c      	ldr	r2, [pc, #48]	; (800dae8 <vQueueUnregisterQueue+0x50>)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2100      	movs	r1, #0
 800dabc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dac0:	4a09      	ldr	r2, [pc, #36]	; (800dae8 <vQueueUnregisterQueue+0x50>)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	00db      	lsls	r3, r3, #3
 800dac6:	4413      	add	r3, r2
 800dac8:	2200      	movs	r2, #0
 800daca:	605a      	str	r2, [r3, #4]
				break;
 800dacc:	e006      	b.n	800dadc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3301      	adds	r3, #1
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2b07      	cmp	r3, #7
 800dad8:	d9e5      	bls.n	800daa6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dada:	bf00      	nop
 800dadc:	bf00      	nop
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	20006c88 	.word	0x20006c88

0800daec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dafc:	f001 fe52 	bl	800f7a4 <vPortEnterCritical>
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db06:	b25b      	sxtb	r3, r3
 800db08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0c:	d103      	bne.n	800db16 <vQueueWaitForMessageRestricted+0x2a>
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	2200      	movs	r2, #0
 800db12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db1c:	b25b      	sxtb	r3, r3
 800db1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db22:	d103      	bne.n	800db2c <vQueueWaitForMessageRestricted+0x40>
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	2200      	movs	r2, #0
 800db28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db2c:	f001 fe6a 	bl	800f804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db34:	2b00      	cmp	r3, #0
 800db36:	d106      	bne.n	800db46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	3324      	adds	r3, #36	; 0x24
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	68b9      	ldr	r1, [r7, #8]
 800db40:	4618      	mov	r0, r3
 800db42:	f000 fd3d 	bl	800e5c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800db46:	6978      	ldr	r0, [r7, #20]
 800db48:	f7ff fefb 	bl	800d942 <prvUnlockQueue>
	}
 800db4c:	bf00      	nop
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db54:	b580      	push	{r7, lr}
 800db56:	b08e      	sub	sp, #56	; 0x38
 800db58:	af04      	add	r7, sp, #16
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
 800db60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10a      	bne.n	800db7e <xTaskCreateStatic+0x2a>
	__asm volatile
 800db68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	623b      	str	r3, [r7, #32]
}
 800db7a:	bf00      	nop
 800db7c:	e7fe      	b.n	800db7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <xTaskCreateStatic+0x46>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	61fb      	str	r3, [r7, #28]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db9a:	23c0      	movs	r3, #192	; 0xc0
 800db9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	2bc0      	cmp	r3, #192	; 0xc0
 800dba2:	d00a      	beq.n	800dbba <xTaskCreateStatic+0x66>
	__asm volatile
 800dba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba8:	f383 8811 	msr	BASEPRI, r3
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	61bb      	str	r3, [r7, #24]
}
 800dbb6:	bf00      	nop
 800dbb8:	e7fe      	b.n	800dbb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dbba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d01e      	beq.n	800dc00 <xTaskCreateStatic+0xac>
 800dbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d01b      	beq.n	800dc00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	2202      	movs	r2, #2
 800dbd6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dbda:	2300      	movs	r3, #0
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	9302      	str	r3, [sp, #8]
 800dbe2:	f107 0314 	add.w	r3, r7, #20
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	68b9      	ldr	r1, [r7, #8]
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f000 f850 	bl	800dc98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbfa:	f000 f8f7 	bl	800ddec <prvAddNewTaskToReadyList>
 800dbfe:	e001      	b.n	800dc04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dc00:	2300      	movs	r3, #0
 800dc02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc04:	697b      	ldr	r3, [r7, #20]
	}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3728      	adds	r7, #40	; 0x28
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b08c      	sub	sp, #48	; 0x30
 800dc12:	af04      	add	r7, sp, #16
 800dc14:	60f8      	str	r0, [r7, #12]
 800dc16:	60b9      	str	r1, [r7, #8]
 800dc18:	603b      	str	r3, [r7, #0]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc1e:	88fb      	ldrh	r3, [r7, #6]
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f001 fee0 	bl	800f9e8 <pvPortMalloc>
 800dc28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00e      	beq.n	800dc4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc30:	20c0      	movs	r0, #192	; 0xc0
 800dc32:	f001 fed9 	bl	800f9e8 <pvPortMalloc>
 800dc36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	697a      	ldr	r2, [r7, #20]
 800dc42:	631a      	str	r2, [r3, #48]	; 0x30
 800dc44:	e005      	b.n	800dc52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc46:	6978      	ldr	r0, [r7, #20]
 800dc48:	f001 ff9a 	bl	800fb80 <vPortFree>
 800dc4c:	e001      	b.n	800dc52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d017      	beq.n	800dc88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc60:	88fa      	ldrh	r2, [r7, #6]
 800dc62:	2300      	movs	r3, #0
 800dc64:	9303      	str	r3, [sp, #12]
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	9302      	str	r3, [sp, #8]
 800dc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	68b9      	ldr	r1, [r7, #8]
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f000 f80e 	bl	800dc98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc7c:	69f8      	ldr	r0, [r7, #28]
 800dc7e:	f000 f8b5 	bl	800ddec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc82:	2301      	movs	r3, #1
 800dc84:	61bb      	str	r3, [r7, #24]
 800dc86:	e002      	b.n	800dc8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc88:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc8e:	69bb      	ldr	r3, [r7, #24]
	}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3720      	adds	r7, #32
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	461a      	mov	r2, r3
 800dcb0:	21a5      	movs	r1, #165	; 0xa5
 800dcb2:	f002 f8bd 	bl	800fe30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4413      	add	r3, r2
 800dcc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	f023 0307 	bic.w	r3, r3, #7
 800dcce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	f003 0307 	and.w	r3, r3, #7
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00a      	beq.n	800dcf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	617b      	str	r3, [r7, #20]
}
 800dcec:	bf00      	nop
 800dcee:	e7fe      	b.n	800dcee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d01f      	beq.n	800dd36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	61fb      	str	r3, [r7, #28]
 800dcfa:	e012      	b.n	800dd22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dcfc:	68ba      	ldr	r2, [r7, #8]
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	4413      	add	r3, r2
 800dd02:	7819      	ldrb	r1, [r3, #0]
 800dd04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	4413      	add	r3, r2
 800dd0a:	3334      	adds	r3, #52	; 0x34
 800dd0c:	460a      	mov	r2, r1
 800dd0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	4413      	add	r3, r2
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d006      	beq.n	800dd2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	61fb      	str	r3, [r7, #28]
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	2b0f      	cmp	r3, #15
 800dd26:	d9e9      	bls.n	800dcfc <prvInitialiseNewTask+0x64>
 800dd28:	e000      	b.n	800dd2c <prvInitialiseNewTask+0x94>
			{
				break;
 800dd2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd34:	e003      	b.n	800dd3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	2b37      	cmp	r3, #55	; 0x37
 800dd42:	d901      	bls.n	800dd48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd44:	2337      	movs	r3, #55	; 0x37
 800dd46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	2200      	movs	r2, #0
 800dd58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fe fda0 	bl	800c8a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd66:	3318      	adds	r3, #24
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fe fd9b 	bl	800c8a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	2200      	movs	r2, #0
 800dd88:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9c:	3358      	adds	r3, #88	; 0x58
 800dd9e:	2260      	movs	r2, #96	; 0x60
 800dda0:	2100      	movs	r1, #0
 800dda2:	4618      	mov	r0, r3
 800dda4:	f002 f844 	bl	800fe30 <memset>
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	4a0d      	ldr	r2, [pc, #52]	; (800dde0 <prvInitialiseNewTask+0x148>)
 800ddac:	65da      	str	r2, [r3, #92]	; 0x5c
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	4a0c      	ldr	r2, [pc, #48]	; (800dde4 <prvInitialiseNewTask+0x14c>)
 800ddb2:	661a      	str	r2, [r3, #96]	; 0x60
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb6:	4a0c      	ldr	r2, [pc, #48]	; (800dde8 <prvInitialiseNewTask+0x150>)
 800ddb8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	68f9      	ldr	r1, [r7, #12]
 800ddbe:	69b8      	ldr	r0, [r7, #24]
 800ddc0:	f001 fbc2 	bl	800f548 <pxPortInitialiseStack>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ddca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d002      	beq.n	800ddd6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddd6:	bf00      	nop
 800ddd8:	3720      	adds	r7, #32
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	0801f6a4 	.word	0x0801f6a4
 800dde4:	0801f6c4 	.word	0x0801f6c4
 800dde8:	0801f684 	.word	0x0801f684

0800ddec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ddf4:	f001 fcd6 	bl	800f7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ddf8:	4b2d      	ldr	r3, [pc, #180]	; (800deb0 <prvAddNewTaskToReadyList+0xc4>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	4a2c      	ldr	r2, [pc, #176]	; (800deb0 <prvAddNewTaskToReadyList+0xc4>)
 800de00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de02:	4b2c      	ldr	r3, [pc, #176]	; (800deb4 <prvAddNewTaskToReadyList+0xc8>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d109      	bne.n	800de1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de0a:	4a2a      	ldr	r2, [pc, #168]	; (800deb4 <prvAddNewTaskToReadyList+0xc8>)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de10:	4b27      	ldr	r3, [pc, #156]	; (800deb0 <prvAddNewTaskToReadyList+0xc4>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d110      	bne.n	800de3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de18:	f000 fd60 	bl	800e8dc <prvInitialiseTaskLists>
 800de1c:	e00d      	b.n	800de3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de1e:	4b26      	ldr	r3, [pc, #152]	; (800deb8 <prvAddNewTaskToReadyList+0xcc>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d109      	bne.n	800de3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de26:	4b23      	ldr	r3, [pc, #140]	; (800deb4 <prvAddNewTaskToReadyList+0xc8>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de30:	429a      	cmp	r2, r3
 800de32:	d802      	bhi.n	800de3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de34:	4a1f      	ldr	r2, [pc, #124]	; (800deb4 <prvAddNewTaskToReadyList+0xc8>)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de3a:	4b20      	ldr	r3, [pc, #128]	; (800debc <prvAddNewTaskToReadyList+0xd0>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3301      	adds	r3, #1
 800de40:	4a1e      	ldr	r2, [pc, #120]	; (800debc <prvAddNewTaskToReadyList+0xd0>)
 800de42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800de44:	4b1d      	ldr	r3, [pc, #116]	; (800debc <prvAddNewTaskToReadyList+0xd0>)
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de50:	4b1b      	ldr	r3, [pc, #108]	; (800dec0 <prvAddNewTaskToReadyList+0xd4>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	429a      	cmp	r2, r3
 800de56:	d903      	bls.n	800de60 <prvAddNewTaskToReadyList+0x74>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5c:	4a18      	ldr	r2, [pc, #96]	; (800dec0 <prvAddNewTaskToReadyList+0xd4>)
 800de5e:	6013      	str	r3, [r2, #0]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de64:	4613      	mov	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4a15      	ldr	r2, [pc, #84]	; (800dec4 <prvAddNewTaskToReadyList+0xd8>)
 800de6e:	441a      	add	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3304      	adds	r3, #4
 800de74:	4619      	mov	r1, r3
 800de76:	4610      	mov	r0, r2
 800de78:	f7fe fd21 	bl	800c8be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de7c:	f001 fcc2 	bl	800f804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de80:	4b0d      	ldr	r3, [pc, #52]	; (800deb8 <prvAddNewTaskToReadyList+0xcc>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00e      	beq.n	800dea6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de88:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <prvAddNewTaskToReadyList+0xc8>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de92:	429a      	cmp	r2, r3
 800de94:	d207      	bcs.n	800dea6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de96:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <prvAddNewTaskToReadyList+0xdc>)
 800de98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dea6:	bf00      	nop
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	2000719c 	.word	0x2000719c
 800deb4:	20006cc8 	.word	0x20006cc8
 800deb8:	200071a8 	.word	0x200071a8
 800debc:	200071b8 	.word	0x200071b8
 800dec0:	200071a4 	.word	0x200071a4
 800dec4:	20006ccc 	.word	0x20006ccc
 800dec8:	e000ed04 	.word	0xe000ed04

0800decc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800decc:	b580      	push	{r7, lr}
 800dece:	b08a      	sub	sp, #40	; 0x28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ded6:	2300      	movs	r3, #0
 800ded8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10a      	bne.n	800def6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	617b      	str	r3, [r7, #20]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10a      	bne.n	800df12 <vTaskDelayUntil+0x46>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	613b      	str	r3, [r7, #16]
}
 800df0e:	bf00      	nop
 800df10:	e7fe      	b.n	800df10 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800df12:	4b2a      	ldr	r3, [pc, #168]	; (800dfbc <vTaskDelayUntil+0xf0>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <vTaskDelayUntil+0x64>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	60fb      	str	r3, [r7, #12]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800df30:	f000 f8f0 	bl	800e114 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800df34:	4b22      	ldr	r3, [pc, #136]	; (800dfc0 <vTaskDelayUntil+0xf4>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	4413      	add	r3, r2
 800df42:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6a3a      	ldr	r2, [r7, #32]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d20b      	bcs.n	800df66 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	429a      	cmp	r2, r3
 800df56:	d211      	bcs.n	800df7c <vTaskDelayUntil+0xb0>
 800df58:	69fa      	ldr	r2, [r7, #28]
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d90d      	bls.n	800df7c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800df60:	2301      	movs	r3, #1
 800df62:	627b      	str	r3, [r7, #36]	; 0x24
 800df64:	e00a      	b.n	800df7c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	69fa      	ldr	r2, [r7, #28]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d303      	bcc.n	800df78 <vTaskDelayUntil+0xac>
 800df70:	69fa      	ldr	r2, [r7, #28]
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	429a      	cmp	r2, r3
 800df76:	d901      	bls.n	800df7c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800df78:	2301      	movs	r3, #1
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	69fa      	ldr	r2, [r7, #28]
 800df80:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800df88:	69fa      	ldr	r2, [r7, #28]
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	2100      	movs	r1, #0
 800df90:	4618      	mov	r0, r3
 800df92:	f000 ff17 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800df96:	f000 f8cb 	bl	800e130 <xTaskResumeAll>
 800df9a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d107      	bne.n	800dfb2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800dfa2:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <vTaskDelayUntil+0xf8>)
 800dfa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfb2:	bf00      	nop
 800dfb4:	3728      	adds	r7, #40	; 0x28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	200071c4 	.word	0x200071c4
 800dfc0:	200071a0 	.word	0x200071a0
 800dfc4:	e000ed04 	.word	0xe000ed04

0800dfc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d017      	beq.n	800e00a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dfda:	4b13      	ldr	r3, [pc, #76]	; (800e028 <vTaskDelay+0x60>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00a      	beq.n	800dff8 <vTaskDelay+0x30>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	60bb      	str	r3, [r7, #8]
}
 800dff4:	bf00      	nop
 800dff6:	e7fe      	b.n	800dff6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dff8:	f000 f88c 	bl	800e114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dffc:	2100      	movs	r1, #0
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fee0 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e004:	f000 f894 	bl	800e130 <xTaskResumeAll>
 800e008:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d107      	bne.n	800e020 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e010:	4b06      	ldr	r3, [pc, #24]	; (800e02c <vTaskDelay+0x64>)
 800e012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e016:	601a      	str	r2, [r3, #0]
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e020:	bf00      	nop
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	200071c4 	.word	0x200071c4
 800e02c:	e000ed04 	.word	0xe000ed04

0800e030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b08a      	sub	sp, #40	; 0x28
 800e034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e036:	2300      	movs	r3, #0
 800e038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e03e:	463a      	mov	r2, r7
 800e040:	1d39      	adds	r1, r7, #4
 800e042:	f107 0308 	add.w	r3, r7, #8
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe f9ea 	bl	800c420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	9202      	str	r2, [sp, #8]
 800e054:	9301      	str	r3, [sp, #4]
 800e056:	2300      	movs	r3, #0
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	2300      	movs	r3, #0
 800e05c:	460a      	mov	r2, r1
 800e05e:	4925      	ldr	r1, [pc, #148]	; (800e0f4 <vTaskStartScheduler+0xc4>)
 800e060:	4825      	ldr	r0, [pc, #148]	; (800e0f8 <vTaskStartScheduler+0xc8>)
 800e062:	f7ff fd77 	bl	800db54 <xTaskCreateStatic>
 800e066:	4603      	mov	r3, r0
 800e068:	4a24      	ldr	r2, [pc, #144]	; (800e0fc <vTaskStartScheduler+0xcc>)
 800e06a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e06c:	4b23      	ldr	r3, [pc, #140]	; (800e0fc <vTaskStartScheduler+0xcc>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e074:	2301      	movs	r3, #1
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	e001      	b.n	800e07e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d102      	bne.n	800e08a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e084:	f000 fef2 	bl	800ee6c <xTimerCreateTimerTask>
 800e088:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d11d      	bne.n	800e0cc <vTaskStartScheduler+0x9c>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	613b      	str	r3, [r7, #16]
}
 800e0a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0a4:	4b16      	ldr	r3, [pc, #88]	; (800e100 <vTaskStartScheduler+0xd0>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	3358      	adds	r3, #88	; 0x58
 800e0aa:	4a16      	ldr	r2, [pc, #88]	; (800e104 <vTaskStartScheduler+0xd4>)
 800e0ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0ae:	4b16      	ldr	r3, [pc, #88]	; (800e108 <vTaskStartScheduler+0xd8>)
 800e0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0b6:	4b15      	ldr	r3, [pc, #84]	; (800e10c <vTaskStartScheduler+0xdc>)
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0bc:	4b14      	ldr	r3, [pc, #80]	; (800e110 <vTaskStartScheduler+0xe0>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e0c2:	f7f5 fa8d 	bl	80035e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0c6:	f001 facb 	bl	800f660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0ca:	e00e      	b.n	800e0ea <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d2:	d10a      	bne.n	800e0ea <vTaskStartScheduler+0xba>
	__asm volatile
 800e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	60fb      	str	r3, [r7, #12]
}
 800e0e6:	bf00      	nop
 800e0e8:	e7fe      	b.n	800e0e8 <vTaskStartScheduler+0xb8>
}
 800e0ea:	bf00      	nop
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	0801271c 	.word	0x0801271c
 800e0f8:	0800e8ad 	.word	0x0800e8ad
 800e0fc:	200071c0 	.word	0x200071c0
 800e100:	20006cc8 	.word	0x20006cc8
 800e104:	2000008c 	.word	0x2000008c
 800e108:	200071bc 	.word	0x200071bc
 800e10c:	200071a8 	.word	0x200071a8
 800e110:	200071a0 	.word	0x200071a0

0800e114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e114:	b480      	push	{r7}
 800e116:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e118:	4b04      	ldr	r3, [pc, #16]	; (800e12c <vTaskSuspendAll+0x18>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3301      	adds	r3, #1
 800e11e:	4a03      	ldr	r2, [pc, #12]	; (800e12c <vTaskSuspendAll+0x18>)
 800e120:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e122:	bf00      	nop
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	200071c4 	.word	0x200071c4

0800e130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e136:	2300      	movs	r3, #0
 800e138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e13a:	2300      	movs	r3, #0
 800e13c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e13e:	4b42      	ldr	r3, [pc, #264]	; (800e248 <xTaskResumeAll+0x118>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10a      	bne.n	800e15c <xTaskResumeAll+0x2c>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	603b      	str	r3, [r7, #0]
}
 800e158:	bf00      	nop
 800e15a:	e7fe      	b.n	800e15a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e15c:	f001 fb22 	bl	800f7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e160:	4b39      	ldr	r3, [pc, #228]	; (800e248 <xTaskResumeAll+0x118>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3b01      	subs	r3, #1
 800e166:	4a38      	ldr	r2, [pc, #224]	; (800e248 <xTaskResumeAll+0x118>)
 800e168:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e16a:	4b37      	ldr	r3, [pc, #220]	; (800e248 <xTaskResumeAll+0x118>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d162      	bne.n	800e238 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e172:	4b36      	ldr	r3, [pc, #216]	; (800e24c <xTaskResumeAll+0x11c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d05e      	beq.n	800e238 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e17a:	e02f      	b.n	800e1dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e17c:	4b34      	ldr	r3, [pc, #208]	; (800e250 <xTaskResumeAll+0x120>)
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	3318      	adds	r3, #24
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fe fbf5 	bl	800c978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3304      	adds	r3, #4
 800e192:	4618      	mov	r0, r3
 800e194:	f7fe fbf0 	bl	800c978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19c:	4b2d      	ldr	r3, [pc, #180]	; (800e254 <xTaskResumeAll+0x124>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d903      	bls.n	800e1ac <xTaskResumeAll+0x7c>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	4a2a      	ldr	r2, [pc, #168]	; (800e254 <xTaskResumeAll+0x124>)
 800e1aa:	6013      	str	r3, [r2, #0]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4413      	add	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4a27      	ldr	r2, [pc, #156]	; (800e258 <xTaskResumeAll+0x128>)
 800e1ba:	441a      	add	r2, r3
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	3304      	adds	r3, #4
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	f7fe fb7b 	bl	800c8be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1cc:	4b23      	ldr	r3, [pc, #140]	; (800e25c <xTaskResumeAll+0x12c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d302      	bcc.n	800e1dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e1d6:	4b22      	ldr	r3, [pc, #136]	; (800e260 <xTaskResumeAll+0x130>)
 800e1d8:	2201      	movs	r2, #1
 800e1da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1dc:	4b1c      	ldr	r3, [pc, #112]	; (800e250 <xTaskResumeAll+0x120>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1cb      	bne.n	800e17c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e1ea:	f000 fc19 	bl	800ea20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e1ee:	4b1d      	ldr	r3, [pc, #116]	; (800e264 <xTaskResumeAll+0x134>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d010      	beq.n	800e21c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1fa:	f000 f847 	bl	800e28c <xTaskIncrementTick>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e204:	4b16      	ldr	r3, [pc, #88]	; (800e260 <xTaskResumeAll+0x130>)
 800e206:	2201      	movs	r2, #1
 800e208:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3b01      	subs	r3, #1
 800e20e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1f1      	bne.n	800e1fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e216:	4b13      	ldr	r3, [pc, #76]	; (800e264 <xTaskResumeAll+0x134>)
 800e218:	2200      	movs	r2, #0
 800e21a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e21c:	4b10      	ldr	r3, [pc, #64]	; (800e260 <xTaskResumeAll+0x130>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d009      	beq.n	800e238 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e224:	2301      	movs	r3, #1
 800e226:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e228:	4b0f      	ldr	r3, [pc, #60]	; (800e268 <xTaskResumeAll+0x138>)
 800e22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e238:	f001 fae4 	bl	800f804 <vPortExitCritical>

	return xAlreadyYielded;
 800e23c:	68bb      	ldr	r3, [r7, #8]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	200071c4 	.word	0x200071c4
 800e24c:	2000719c 	.word	0x2000719c
 800e250:	2000715c 	.word	0x2000715c
 800e254:	200071a4 	.word	0x200071a4
 800e258:	20006ccc 	.word	0x20006ccc
 800e25c:	20006cc8 	.word	0x20006cc8
 800e260:	200071b0 	.word	0x200071b0
 800e264:	200071ac 	.word	0x200071ac
 800e268:	e000ed04 	.word	0xe000ed04

0800e26c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e272:	4b05      	ldr	r3, [pc, #20]	; (800e288 <xTaskGetTickCount+0x1c>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e278:	687b      	ldr	r3, [r7, #4]
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	200071a0 	.word	0x200071a0

0800e28c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b086      	sub	sp, #24
 800e290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e292:	2300      	movs	r3, #0
 800e294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e296:	4b4f      	ldr	r3, [pc, #316]	; (800e3d4 <xTaskIncrementTick+0x148>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f040 808f 	bne.w	800e3be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e2a0:	4b4d      	ldr	r3, [pc, #308]	; (800e3d8 <xTaskIncrementTick+0x14c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2a8:	4a4b      	ldr	r2, [pc, #300]	; (800e3d8 <xTaskIncrementTick+0x14c>)
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d120      	bne.n	800e2f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2b4:	4b49      	ldr	r3, [pc, #292]	; (800e3dc <xTaskIncrementTick+0x150>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00a      	beq.n	800e2d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	603b      	str	r3, [r7, #0]
}
 800e2d0:	bf00      	nop
 800e2d2:	e7fe      	b.n	800e2d2 <xTaskIncrementTick+0x46>
 800e2d4:	4b41      	ldr	r3, [pc, #260]	; (800e3dc <xTaskIncrementTick+0x150>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	60fb      	str	r3, [r7, #12]
 800e2da:	4b41      	ldr	r3, [pc, #260]	; (800e3e0 <xTaskIncrementTick+0x154>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a3f      	ldr	r2, [pc, #252]	; (800e3dc <xTaskIncrementTick+0x150>)
 800e2e0:	6013      	str	r3, [r2, #0]
 800e2e2:	4a3f      	ldr	r2, [pc, #252]	; (800e3e0 <xTaskIncrementTick+0x154>)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	4b3e      	ldr	r3, [pc, #248]	; (800e3e4 <xTaskIncrementTick+0x158>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	4a3d      	ldr	r2, [pc, #244]	; (800e3e4 <xTaskIncrementTick+0x158>)
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	f000 fb95 	bl	800ea20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e2f6:	4b3c      	ldr	r3, [pc, #240]	; (800e3e8 <xTaskIncrementTick+0x15c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d349      	bcc.n	800e394 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e300:	4b36      	ldr	r3, [pc, #216]	; (800e3dc <xTaskIncrementTick+0x150>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d104      	bne.n	800e314 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e30a:	4b37      	ldr	r3, [pc, #220]	; (800e3e8 <xTaskIncrementTick+0x15c>)
 800e30c:	f04f 32ff 	mov.w	r2, #4294967295
 800e310:	601a      	str	r2, [r3, #0]
					break;
 800e312:	e03f      	b.n	800e394 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e314:	4b31      	ldr	r3, [pc, #196]	; (800e3dc <xTaskIncrementTick+0x150>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e324:	693a      	ldr	r2, [r7, #16]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d203      	bcs.n	800e334 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e32c:	4a2e      	ldr	r2, [pc, #184]	; (800e3e8 <xTaskIncrementTick+0x15c>)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e332:	e02f      	b.n	800e394 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	3304      	adds	r3, #4
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe fb1d 	bl	800c978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e342:	2b00      	cmp	r3, #0
 800e344:	d004      	beq.n	800e350 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	3318      	adds	r3, #24
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fb14 	bl	800c978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e354:	4b25      	ldr	r3, [pc, #148]	; (800e3ec <xTaskIncrementTick+0x160>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d903      	bls.n	800e364 <xTaskIncrementTick+0xd8>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e360:	4a22      	ldr	r2, [pc, #136]	; (800e3ec <xTaskIncrementTick+0x160>)
 800e362:	6013      	str	r3, [r2, #0]
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4a1f      	ldr	r2, [pc, #124]	; (800e3f0 <xTaskIncrementTick+0x164>)
 800e372:	441a      	add	r2, r3
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	3304      	adds	r3, #4
 800e378:	4619      	mov	r1, r3
 800e37a:	4610      	mov	r0, r2
 800e37c:	f7fe fa9f 	bl	800c8be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e384:	4b1b      	ldr	r3, [pc, #108]	; (800e3f4 <xTaskIncrementTick+0x168>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d3b8      	bcc.n	800e300 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e38e:	2301      	movs	r3, #1
 800e390:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e392:	e7b5      	b.n	800e300 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e394:	4b17      	ldr	r3, [pc, #92]	; (800e3f4 <xTaskIncrementTick+0x168>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e39a:	4915      	ldr	r1, [pc, #84]	; (800e3f0 <xTaskIncrementTick+0x164>)
 800e39c:	4613      	mov	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	440b      	add	r3, r1
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d901      	bls.n	800e3b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e3b0:	4b11      	ldr	r3, [pc, #68]	; (800e3f8 <xTaskIncrementTick+0x16c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d007      	beq.n	800e3c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	617b      	str	r3, [r7, #20]
 800e3bc:	e004      	b.n	800e3c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e3be:	4b0f      	ldr	r3, [pc, #60]	; (800e3fc <xTaskIncrementTick+0x170>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	4a0d      	ldr	r2, [pc, #52]	; (800e3fc <xTaskIncrementTick+0x170>)
 800e3c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e3c8:	697b      	ldr	r3, [r7, #20]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3718      	adds	r7, #24
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	200071c4 	.word	0x200071c4
 800e3d8:	200071a0 	.word	0x200071a0
 800e3dc:	20007154 	.word	0x20007154
 800e3e0:	20007158 	.word	0x20007158
 800e3e4:	200071b4 	.word	0x200071b4
 800e3e8:	200071bc 	.word	0x200071bc
 800e3ec:	200071a4 	.word	0x200071a4
 800e3f0:	20006ccc 	.word	0x20006ccc
 800e3f4:	20006cc8 	.word	0x20006cc8
 800e3f8:	200071b0 	.word	0x200071b0
 800e3fc:	200071ac 	.word	0x200071ac

0800e400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e406:	4b36      	ldr	r3, [pc, #216]	; (800e4e0 <vTaskSwitchContext+0xe0>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e40e:	4b35      	ldr	r3, [pc, #212]	; (800e4e4 <vTaskSwitchContext+0xe4>)
 800e410:	2201      	movs	r2, #1
 800e412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e414:	e05f      	b.n	800e4d6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800e416:	4b33      	ldr	r3, [pc, #204]	; (800e4e4 <vTaskSwitchContext+0xe4>)
 800e418:	2200      	movs	r2, #0
 800e41a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e41c:	f7f5 f8e7 	bl	80035ee <getRunTimeCounterValue>
 800e420:	4603      	mov	r3, r0
 800e422:	4a31      	ldr	r2, [pc, #196]	; (800e4e8 <vTaskSwitchContext+0xe8>)
 800e424:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e426:	4b30      	ldr	r3, [pc, #192]	; (800e4e8 <vTaskSwitchContext+0xe8>)
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	4b30      	ldr	r3, [pc, #192]	; (800e4ec <vTaskSwitchContext+0xec>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d909      	bls.n	800e446 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e432:	4b2f      	ldr	r3, [pc, #188]	; (800e4f0 <vTaskSwitchContext+0xf0>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e438:	4a2b      	ldr	r2, [pc, #172]	; (800e4e8 <vTaskSwitchContext+0xe8>)
 800e43a:	6810      	ldr	r0, [r2, #0]
 800e43c:	4a2b      	ldr	r2, [pc, #172]	; (800e4ec <vTaskSwitchContext+0xec>)
 800e43e:	6812      	ldr	r2, [r2, #0]
 800e440:	1a82      	subs	r2, r0, r2
 800e442:	440a      	add	r2, r1
 800e444:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e446:	4b28      	ldr	r3, [pc, #160]	; (800e4e8 <vTaskSwitchContext+0xe8>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a28      	ldr	r2, [pc, #160]	; (800e4ec <vTaskSwitchContext+0xec>)
 800e44c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e44e:	4b29      	ldr	r3, [pc, #164]	; (800e4f4 <vTaskSwitchContext+0xf4>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	60fb      	str	r3, [r7, #12]
 800e454:	e010      	b.n	800e478 <vTaskSwitchContext+0x78>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d10a      	bne.n	800e472 <vTaskSwitchContext+0x72>
	__asm volatile
 800e45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e460:	f383 8811 	msr	BASEPRI, r3
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	607b      	str	r3, [r7, #4]
}
 800e46e:	bf00      	nop
 800e470:	e7fe      	b.n	800e470 <vTaskSwitchContext+0x70>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3b01      	subs	r3, #1
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	491f      	ldr	r1, [pc, #124]	; (800e4f8 <vTaskSwitchContext+0xf8>)
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	4613      	mov	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4413      	add	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	440b      	add	r3, r1
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d0e4      	beq.n	800e456 <vTaskSwitchContext+0x56>
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	4613      	mov	r3, r2
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	4413      	add	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4a18      	ldr	r2, [pc, #96]	; (800e4f8 <vTaskSwitchContext+0xf8>)
 800e498:	4413      	add	r3, r2
 800e49a:	60bb      	str	r3, [r7, #8]
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	605a      	str	r2, [r3, #4]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d104      	bne.n	800e4bc <vTaskSwitchContext+0xbc>
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	605a      	str	r2, [r3, #4]
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	4a0b      	ldr	r2, [pc, #44]	; (800e4f0 <vTaskSwitchContext+0xf0>)
 800e4c4:	6013      	str	r3, [r2, #0]
 800e4c6:	4a0b      	ldr	r2, [pc, #44]	; (800e4f4 <vTaskSwitchContext+0xf4>)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e4cc:	4b08      	ldr	r3, [pc, #32]	; (800e4f0 <vTaskSwitchContext+0xf0>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	3358      	adds	r3, #88	; 0x58
 800e4d2:	4a0a      	ldr	r2, [pc, #40]	; (800e4fc <vTaskSwitchContext+0xfc>)
 800e4d4:	6013      	str	r3, [r2, #0]
}
 800e4d6:	bf00      	nop
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	200071c4 	.word	0x200071c4
 800e4e4:	200071b0 	.word	0x200071b0
 800e4e8:	200071cc 	.word	0x200071cc
 800e4ec:	200071c8 	.word	0x200071c8
 800e4f0:	20006cc8 	.word	0x20006cc8
 800e4f4:	200071a4 	.word	0x200071a4
 800e4f8:	20006ccc 	.word	0x20006ccc
 800e4fc:	2000008c 	.word	0x2000008c

0800e500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10a      	bne.n	800e526 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	60fb      	str	r3, [r7, #12]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e526:	4b07      	ldr	r3, [pc, #28]	; (800e544 <vTaskPlaceOnEventList+0x44>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	3318      	adds	r3, #24
 800e52c:	4619      	mov	r1, r3
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7fe f9e9 	bl	800c906 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e534:	2101      	movs	r1, #1
 800e536:	6838      	ldr	r0, [r7, #0]
 800e538:	f000 fc44 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
}
 800e53c:	bf00      	nop
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	20006cc8 	.word	0x20006cc8

0800e548 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10a      	bne.n	800e570 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	617b      	str	r3, [r7, #20]
}
 800e56c:	bf00      	nop
 800e56e:	e7fe      	b.n	800e56e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e570:	4b11      	ldr	r3, [pc, #68]	; (800e5b8 <vTaskPlaceOnUnorderedEventList+0x70>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10a      	bne.n	800e58e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	613b      	str	r3, [r7, #16]
}
 800e58a:	bf00      	nop
 800e58c:	e7fe      	b.n	800e58c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e58e:	4b0b      	ldr	r3, [pc, #44]	; (800e5bc <vTaskPlaceOnUnorderedEventList+0x74>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68ba      	ldr	r2, [r7, #8]
 800e594:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e598:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e59a:	4b08      	ldr	r3, [pc, #32]	; (800e5bc <vTaskPlaceOnUnorderedEventList+0x74>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3318      	adds	r3, #24
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7fe f98b 	bl	800c8be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 fc0a 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
}
 800e5b0:	bf00      	nop
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	200071c4 	.word	0x200071c4
 800e5bc:	20006cc8 	.word	0x20006cc8

0800e5c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b086      	sub	sp, #24
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d10a      	bne.n	800e5e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	617b      	str	r3, [r7, #20]
}
 800e5e4:	bf00      	nop
 800e5e6:	e7fe      	b.n	800e5e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5e8:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <vTaskPlaceOnEventListRestricted+0x54>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3318      	adds	r3, #24
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f7fe f964 	bl	800c8be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e600:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	68b8      	ldr	r0, [r7, #8]
 800e606:	f000 fbdd 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
	}
 800e60a:	bf00      	nop
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	20006cc8 	.word	0x20006cc8

0800e618 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10a      	bne.n	800e644 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	60fb      	str	r3, [r7, #12]
}
 800e640:	bf00      	nop
 800e642:	e7fe      	b.n	800e642 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	3318      	adds	r3, #24
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe f995 	bl	800c978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e64e:	4b1e      	ldr	r3, [pc, #120]	; (800e6c8 <xTaskRemoveFromEventList+0xb0>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d11d      	bne.n	800e692 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	3304      	adds	r3, #4
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe f98c 	bl	800c978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e664:	4b19      	ldr	r3, [pc, #100]	; (800e6cc <xTaskRemoveFromEventList+0xb4>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d903      	bls.n	800e674 <xTaskRemoveFromEventList+0x5c>
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e670:	4a16      	ldr	r2, [pc, #88]	; (800e6cc <xTaskRemoveFromEventList+0xb4>)
 800e672:	6013      	str	r3, [r2, #0]
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e678:	4613      	mov	r3, r2
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	4413      	add	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4a13      	ldr	r2, [pc, #76]	; (800e6d0 <xTaskRemoveFromEventList+0xb8>)
 800e682:	441a      	add	r2, r3
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	3304      	adds	r3, #4
 800e688:	4619      	mov	r1, r3
 800e68a:	4610      	mov	r0, r2
 800e68c:	f7fe f917 	bl	800c8be <vListInsertEnd>
 800e690:	e005      	b.n	800e69e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	3318      	adds	r3, #24
 800e696:	4619      	mov	r1, r3
 800e698:	480e      	ldr	r0, [pc, #56]	; (800e6d4 <xTaskRemoveFromEventList+0xbc>)
 800e69a:	f7fe f910 	bl	800c8be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a2:	4b0d      	ldr	r3, [pc, #52]	; (800e6d8 <xTaskRemoveFromEventList+0xc0>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d905      	bls.n	800e6b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <xTaskRemoveFromEventList+0xc4>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	e001      	b.n	800e6bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e6bc:	697b      	ldr	r3, [r7, #20]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	200071c4 	.word	0x200071c4
 800e6cc:	200071a4 	.word	0x200071a4
 800e6d0:	20006ccc 	.word	0x20006ccc
 800e6d4:	2000715c 	.word	0x2000715c
 800e6d8:	20006cc8 	.word	0x20006cc8
 800e6dc:	200071b0 	.word	0x200071b0

0800e6e0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e6ea:	4b29      	ldr	r3, [pc, #164]	; (800e790 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10a      	bne.n	800e708 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f6:	f383 8811 	msr	BASEPRI, r3
 800e6fa:	f3bf 8f6f 	isb	sy
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	613b      	str	r3, [r7, #16]
}
 800e704:	bf00      	nop
 800e706:	e7fe      	b.n	800e706 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d10a      	bne.n	800e734 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e722:	f383 8811 	msr	BASEPRI, r3
 800e726:	f3bf 8f6f 	isb	sy
 800e72a:	f3bf 8f4f 	dsb	sy
 800e72e:	60fb      	str	r3, [r7, #12]
}
 800e730:	bf00      	nop
 800e732:	e7fe      	b.n	800e732 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7fe f91f 	bl	800c978 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	3304      	adds	r3, #4
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe f91a 	bl	800c978 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e748:	4b12      	ldr	r3, [pc, #72]	; (800e794 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d903      	bls.n	800e758 <vTaskRemoveFromUnorderedEventList+0x78>
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e754:	4a0f      	ldr	r2, [pc, #60]	; (800e794 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75c:	4613      	mov	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4413      	add	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	4a0c      	ldr	r2, [pc, #48]	; (800e798 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e766:	441a      	add	r2, r3
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	3304      	adds	r3, #4
 800e76c:	4619      	mov	r1, r3
 800e76e:	4610      	mov	r0, r2
 800e770:	f7fe f8a5 	bl	800c8be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e778:	4b08      	ldr	r3, [pc, #32]	; (800e79c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77e:	429a      	cmp	r2, r3
 800e780:	d902      	bls.n	800e788 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e782:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e784:	2201      	movs	r2, #1
 800e786:	601a      	str	r2, [r3, #0]
	}
}
 800e788:	bf00      	nop
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	200071c4 	.word	0x200071c4
 800e794:	200071a4 	.word	0x200071a4
 800e798:	20006ccc 	.word	0x20006ccc
 800e79c:	20006cc8 	.word	0x20006cc8
 800e7a0:	200071b0 	.word	0x200071b0

0800e7a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7ac:	4b06      	ldr	r3, [pc, #24]	; (800e7c8 <vTaskInternalSetTimeOutState+0x24>)
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7b4:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <vTaskInternalSetTimeOutState+0x28>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	605a      	str	r2, [r3, #4]
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr
 800e7c8:	200071b4 	.word	0x200071b4
 800e7cc:	200071a0 	.word	0x200071a0

0800e7d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b088      	sub	sp, #32
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10a      	bne.n	800e7f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	613b      	str	r3, [r7, #16]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10a      	bne.n	800e812 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e800:	f383 8811 	msr	BASEPRI, r3
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	60fb      	str	r3, [r7, #12]
}
 800e80e:	bf00      	nop
 800e810:	e7fe      	b.n	800e810 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e812:	f000 ffc7 	bl	800f7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e816:	4b1d      	ldr	r3, [pc, #116]	; (800e88c <xTaskCheckForTimeOut+0xbc>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	1ad3      	subs	r3, r2, r3
 800e824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82e:	d102      	bne.n	800e836 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e830:	2300      	movs	r3, #0
 800e832:	61fb      	str	r3, [r7, #28]
 800e834:	e023      	b.n	800e87e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4b15      	ldr	r3, [pc, #84]	; (800e890 <xTaskCheckForTimeOut+0xc0>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d007      	beq.n	800e852 <xTaskCheckForTimeOut+0x82>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	69ba      	ldr	r2, [r7, #24]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d302      	bcc.n	800e852 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e84c:	2301      	movs	r3, #1
 800e84e:	61fb      	str	r3, [r7, #28]
 800e850:	e015      	b.n	800e87e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d20b      	bcs.n	800e874 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	1ad2      	subs	r2, r2, r3
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7ff ff9b 	bl	800e7a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e86e:	2300      	movs	r3, #0
 800e870:	61fb      	str	r3, [r7, #28]
 800e872:	e004      	b.n	800e87e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e87a:	2301      	movs	r3, #1
 800e87c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e87e:	f000 ffc1 	bl	800f804 <vPortExitCritical>

	return xReturn;
 800e882:	69fb      	ldr	r3, [r7, #28]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3720      	adds	r7, #32
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	200071a0 	.word	0x200071a0
 800e890:	200071b4 	.word	0x200071b4

0800e894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e894:	b480      	push	{r7}
 800e896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e898:	4b03      	ldr	r3, [pc, #12]	; (800e8a8 <vTaskMissedYield+0x14>)
 800e89a:	2201      	movs	r2, #1
 800e89c:	601a      	str	r2, [r3, #0]
}
 800e89e:	bf00      	nop
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	200071b0 	.word	0x200071b0

0800e8ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8b4:	f000 f852 	bl	800e95c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8b8:	4b06      	ldr	r3, [pc, #24]	; (800e8d4 <prvIdleTask+0x28>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d9f9      	bls.n	800e8b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8c0:	4b05      	ldr	r3, [pc, #20]	; (800e8d8 <prvIdleTask+0x2c>)
 800e8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8d0:	e7f0      	b.n	800e8b4 <prvIdleTask+0x8>
 800e8d2:	bf00      	nop
 800e8d4:	20006ccc 	.word	0x20006ccc
 800e8d8:	e000ed04 	.word	0xe000ed04

0800e8dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	607b      	str	r3, [r7, #4]
 800e8e6:	e00c      	b.n	800e902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4413      	add	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4a12      	ldr	r2, [pc, #72]	; (800e93c <prvInitialiseTaskLists+0x60>)
 800e8f4:	4413      	add	r3, r2
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fd ffb4 	bl	800c864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	3301      	adds	r3, #1
 800e900:	607b      	str	r3, [r7, #4]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b37      	cmp	r3, #55	; 0x37
 800e906:	d9ef      	bls.n	800e8e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e908:	480d      	ldr	r0, [pc, #52]	; (800e940 <prvInitialiseTaskLists+0x64>)
 800e90a:	f7fd ffab 	bl	800c864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e90e:	480d      	ldr	r0, [pc, #52]	; (800e944 <prvInitialiseTaskLists+0x68>)
 800e910:	f7fd ffa8 	bl	800c864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e914:	480c      	ldr	r0, [pc, #48]	; (800e948 <prvInitialiseTaskLists+0x6c>)
 800e916:	f7fd ffa5 	bl	800c864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e91a:	480c      	ldr	r0, [pc, #48]	; (800e94c <prvInitialiseTaskLists+0x70>)
 800e91c:	f7fd ffa2 	bl	800c864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e920:	480b      	ldr	r0, [pc, #44]	; (800e950 <prvInitialiseTaskLists+0x74>)
 800e922:	f7fd ff9f 	bl	800c864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e926:	4b0b      	ldr	r3, [pc, #44]	; (800e954 <prvInitialiseTaskLists+0x78>)
 800e928:	4a05      	ldr	r2, [pc, #20]	; (800e940 <prvInitialiseTaskLists+0x64>)
 800e92a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e92c:	4b0a      	ldr	r3, [pc, #40]	; (800e958 <prvInitialiseTaskLists+0x7c>)
 800e92e:	4a05      	ldr	r2, [pc, #20]	; (800e944 <prvInitialiseTaskLists+0x68>)
 800e930:	601a      	str	r2, [r3, #0]
}
 800e932:	bf00      	nop
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	20006ccc 	.word	0x20006ccc
 800e940:	2000712c 	.word	0x2000712c
 800e944:	20007140 	.word	0x20007140
 800e948:	2000715c 	.word	0x2000715c
 800e94c:	20007170 	.word	0x20007170
 800e950:	20007188 	.word	0x20007188
 800e954:	20007154 	.word	0x20007154
 800e958:	20007158 	.word	0x20007158

0800e95c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e962:	e019      	b.n	800e998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e964:	f000 ff1e 	bl	800f7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e968:	4b10      	ldr	r3, [pc, #64]	; (800e9ac <prvCheckTasksWaitingTermination+0x50>)
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3304      	adds	r3, #4
 800e974:	4618      	mov	r0, r3
 800e976:	f7fd ffff 	bl	800c978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <prvCheckTasksWaitingTermination+0x54>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	3b01      	subs	r3, #1
 800e980:	4a0b      	ldr	r2, [pc, #44]	; (800e9b0 <prvCheckTasksWaitingTermination+0x54>)
 800e982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e984:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <prvCheckTasksWaitingTermination+0x58>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	3b01      	subs	r3, #1
 800e98a:	4a0a      	ldr	r2, [pc, #40]	; (800e9b4 <prvCheckTasksWaitingTermination+0x58>)
 800e98c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e98e:	f000 ff39 	bl	800f804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 f810 	bl	800e9b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e998:	4b06      	ldr	r3, [pc, #24]	; (800e9b4 <prvCheckTasksWaitingTermination+0x58>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d1e1      	bne.n	800e964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e9a0:	bf00      	nop
 800e9a2:	bf00      	nop
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20007170 	.word	0x20007170
 800e9b0:	2000719c 	.word	0x2000719c
 800e9b4:	20007184 	.word	0x20007184

0800e9b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	3358      	adds	r3, #88	; 0x58
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f001 fadd 	bl	800ff84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d108      	bne.n	800e9e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f001 f8d1 	bl	800fb80 <vPortFree>
				vPortFree( pxTCB );
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f001 f8ce 	bl	800fb80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9e4:	e018      	b.n	800ea18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d103      	bne.n	800e9f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f001 f8c5 	bl	800fb80 <vPortFree>
	}
 800e9f6:	e00f      	b.n	800ea18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d00a      	beq.n	800ea18 <prvDeleteTCB+0x60>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60fb      	str	r3, [r7, #12]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <prvDeleteTCB+0x5e>
	}
 800ea18:	bf00      	nop
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea26:	4b0c      	ldr	r3, [pc, #48]	; (800ea58 <prvResetNextTaskUnblockTime+0x38>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d104      	bne.n	800ea3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <prvResetNextTaskUnblockTime+0x3c>)
 800ea32:	f04f 32ff 	mov.w	r2, #4294967295
 800ea36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea38:	e008      	b.n	800ea4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea3a:	4b07      	ldr	r3, [pc, #28]	; (800ea58 <prvResetNextTaskUnblockTime+0x38>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	4a04      	ldr	r2, [pc, #16]	; (800ea5c <prvResetNextTaskUnblockTime+0x3c>)
 800ea4a:	6013      	str	r3, [r2, #0]
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	20007154 	.word	0x20007154
 800ea5c:	200071bc 	.word	0x200071bc

0800ea60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ea66:	4b05      	ldr	r3, [pc, #20]	; (800ea7c <xTaskGetCurrentTaskHandle+0x1c>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ea6c:	687b      	ldr	r3, [r7, #4]
	}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	20006cc8 	.word	0x20006cc8

0800ea80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea86:	4b0b      	ldr	r3, [pc, #44]	; (800eab4 <xTaskGetSchedulerState+0x34>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d102      	bne.n	800ea94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	607b      	str	r3, [r7, #4]
 800ea92:	e008      	b.n	800eaa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea94:	4b08      	ldr	r3, [pc, #32]	; (800eab8 <xTaskGetSchedulerState+0x38>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d102      	bne.n	800eaa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea9c:	2302      	movs	r3, #2
 800ea9e:	607b      	str	r3, [r7, #4]
 800eaa0:	e001      	b.n	800eaa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eaa6:	687b      	ldr	r3, [r7, #4]
	}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	200071a8 	.word	0x200071a8
 800eab8:	200071c4 	.word	0x200071c4

0800eabc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eac8:	2300      	movs	r3, #0
 800eaca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d051      	beq.n	800eb76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead6:	4b2a      	ldr	r3, [pc, #168]	; (800eb80 <xTaskPriorityInherit+0xc4>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eadc:	429a      	cmp	r2, r3
 800eade:	d241      	bcs.n	800eb64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	699b      	ldr	r3, [r3, #24]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	db06      	blt.n	800eaf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae8:	4b25      	ldr	r3, [pc, #148]	; (800eb80 <xTaskPriorityInherit+0xc4>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	6959      	ldr	r1, [r3, #20]
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafe:	4613      	mov	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	4413      	add	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4a1f      	ldr	r2, [pc, #124]	; (800eb84 <xTaskPriorityInherit+0xc8>)
 800eb08:	4413      	add	r3, r2
 800eb0a:	4299      	cmp	r1, r3
 800eb0c:	d122      	bne.n	800eb54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	3304      	adds	r3, #4
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fd ff30 	bl	800c978 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb18:	4b19      	ldr	r3, [pc, #100]	; (800eb80 <xTaskPriorityInherit+0xc4>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb26:	4b18      	ldr	r3, [pc, #96]	; (800eb88 <xTaskPriorityInherit+0xcc>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d903      	bls.n	800eb36 <xTaskPriorityInherit+0x7a>
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb32:	4a15      	ldr	r2, [pc, #84]	; (800eb88 <xTaskPriorityInherit+0xcc>)
 800eb34:	6013      	str	r3, [r2, #0]
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4413      	add	r3, r2
 800eb40:	009b      	lsls	r3, r3, #2
 800eb42:	4a10      	ldr	r2, [pc, #64]	; (800eb84 <xTaskPriorityInherit+0xc8>)
 800eb44:	441a      	add	r2, r3
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	3304      	adds	r3, #4
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	f7fd feb6 	bl	800c8be <vListInsertEnd>
 800eb52:	e004      	b.n	800eb5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb54:	4b0a      	ldr	r3, [pc, #40]	; (800eb80 <xTaskPriorityInherit+0xc4>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	60fb      	str	r3, [r7, #12]
 800eb62:	e008      	b.n	800eb76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb68:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <xTaskPriorityInherit+0xc4>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d201      	bcs.n	800eb76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb72:	2301      	movs	r3, #1
 800eb74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb76:	68fb      	ldr	r3, [r7, #12]
	}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	20006cc8 	.word	0x20006cc8
 800eb84:	20006ccc 	.word	0x20006ccc
 800eb88:	200071a4 	.word	0x200071a4

0800eb8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d056      	beq.n	800ec50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eba2:	4b2e      	ldr	r3, [pc, #184]	; (800ec5c <xTaskPriorityDisinherit+0xd0>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	693a      	ldr	r2, [r7, #16]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d00a      	beq.n	800ebc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	60fb      	str	r3, [r7, #12]
}
 800ebbe:	bf00      	nop
 800ebc0:	e7fe      	b.n	800ebc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10a      	bne.n	800ebe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	60bb      	str	r3, [r7, #8]
}
 800ebdc:	bf00      	nop
 800ebde:	e7fe      	b.n	800ebde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebe4:	1e5a      	subs	r2, r3, #1
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d02c      	beq.n	800ec50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d128      	bne.n	800ec50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	3304      	adds	r3, #4
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fd feb8 	bl	800c978 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec20:	4b0f      	ldr	r3, [pc, #60]	; (800ec60 <xTaskPriorityDisinherit+0xd4>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d903      	bls.n	800ec30 <xTaskPriorityDisinherit+0xa4>
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2c:	4a0c      	ldr	r2, [pc, #48]	; (800ec60 <xTaskPriorityDisinherit+0xd4>)
 800ec2e:	6013      	str	r3, [r2, #0]
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec34:	4613      	mov	r3, r2
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4413      	add	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4a09      	ldr	r2, [pc, #36]	; (800ec64 <xTaskPriorityDisinherit+0xd8>)
 800ec3e:	441a      	add	r2, r3
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	3304      	adds	r3, #4
 800ec44:	4619      	mov	r1, r3
 800ec46:	4610      	mov	r0, r2
 800ec48:	f7fd fe39 	bl	800c8be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec50:	697b      	ldr	r3, [r7, #20]
	}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3718      	adds	r7, #24
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20006cc8 	.word	0x20006cc8
 800ec60:	200071a4 	.word	0x200071a4
 800ec64:	20006ccc 	.word	0x20006ccc

0800ec68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec76:	2301      	movs	r3, #1
 800ec78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d06a      	beq.n	800ed56 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d10a      	bne.n	800ec9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ec88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8c:	f383 8811 	msr	BASEPRI, r3
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	60fb      	str	r3, [r7, #12]
}
 800ec9a:	bf00      	nop
 800ec9c:	e7fe      	b.n	800ec9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eca2:	683a      	ldr	r2, [r7, #0]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d902      	bls.n	800ecae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	61fb      	str	r3, [r7, #28]
 800ecac:	e002      	b.n	800ecb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb8:	69fa      	ldr	r2, [r7, #28]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d04b      	beq.n	800ed56 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecc2:	697a      	ldr	r2, [r7, #20]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d146      	bne.n	800ed56 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ecc8:	4b25      	ldr	r3, [pc, #148]	; (800ed60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	69ba      	ldr	r2, [r7, #24]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d10a      	bne.n	800ece8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ecd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd6:	f383 8811 	msr	BASEPRI, r3
 800ecda:	f3bf 8f6f 	isb	sy
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	60bb      	str	r3, [r7, #8]
}
 800ece4:	bf00      	nop
 800ece6:	e7fe      	b.n	800ece6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	69fa      	ldr	r2, [r7, #28]
 800ecf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	699b      	ldr	r3, [r3, #24]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	db04      	blt.n	800ed06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	6959      	ldr	r1, [r3, #20]
 800ed0a:	693a      	ldr	r2, [r7, #16]
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4413      	add	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4a13      	ldr	r2, [pc, #76]	; (800ed64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed16:	4413      	add	r3, r2
 800ed18:	4299      	cmp	r1, r3
 800ed1a:	d11c      	bne.n	800ed56 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	3304      	adds	r3, #4
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fd fe29 	bl	800c978 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed2a:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d903      	bls.n	800ed3a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed36:	4a0c      	ldr	r2, [pc, #48]	; (800ed68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed38:	6013      	str	r3, [r2, #0]
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3e:	4613      	mov	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4413      	add	r3, r2
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4a07      	ldr	r2, [pc, #28]	; (800ed64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed48:	441a      	add	r2, r3
 800ed4a:	69bb      	ldr	r3, [r7, #24]
 800ed4c:	3304      	adds	r3, #4
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4610      	mov	r0, r2
 800ed52:	f7fd fdb4 	bl	800c8be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed56:	bf00      	nop
 800ed58:	3720      	adds	r7, #32
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	20006cc8 	.word	0x20006cc8
 800ed64:	20006ccc 	.word	0x20006ccc
 800ed68:	200071a4 	.word	0x200071a4

0800ed6c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ed72:	4b09      	ldr	r3, [pc, #36]	; (800ed98 <uxTaskResetEventItemValue+0x2c>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	699b      	ldr	r3, [r3, #24]
 800ed78:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed7a:	4b07      	ldr	r3, [pc, #28]	; (800ed98 <uxTaskResetEventItemValue+0x2c>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed80:	4b05      	ldr	r3, [pc, #20]	; (800ed98 <uxTaskResetEventItemValue+0x2c>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ed88:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ed8a:	687b      	ldr	r3, [r7, #4]
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr
 800ed98:	20006cc8 	.word	0x20006cc8

0800ed9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed9c:	b480      	push	{r7}
 800ed9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eda0:	4b07      	ldr	r3, [pc, #28]	; (800edc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d004      	beq.n	800edb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eda8:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edae:	3201      	adds	r2, #1
 800edb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800edb2:	4b03      	ldr	r3, [pc, #12]	; (800edc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800edb4:	681b      	ldr	r3, [r3, #0]
	}
 800edb6:	4618      	mov	r0, r3
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	20006cc8 	.word	0x20006cc8

0800edc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edce:	4b21      	ldr	r3, [pc, #132]	; (800ee54 <prvAddCurrentTaskToDelayedList+0x90>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edd4:	4b20      	ldr	r3, [pc, #128]	; (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3304      	adds	r3, #4
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fd fdcc 	bl	800c978 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede6:	d10a      	bne.n	800edfe <prvAddCurrentTaskToDelayedList+0x3a>
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d007      	beq.n	800edfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edee:	4b1a      	ldr	r3, [pc, #104]	; (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3304      	adds	r3, #4
 800edf4:	4619      	mov	r1, r3
 800edf6:	4819      	ldr	r0, [pc, #100]	; (800ee5c <prvAddCurrentTaskToDelayedList+0x98>)
 800edf8:	f7fd fd61 	bl	800c8be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edfc:	e026      	b.n	800ee4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800edfe:	68fa      	ldr	r2, [r7, #12]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4413      	add	r3, r2
 800ee04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee06:	4b14      	ldr	r3, [pc, #80]	; (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee0e:	68ba      	ldr	r2, [r7, #8]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d209      	bcs.n	800ee2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee16:	4b12      	ldr	r3, [pc, #72]	; (800ee60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	4b0f      	ldr	r3, [pc, #60]	; (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	3304      	adds	r3, #4
 800ee20:	4619      	mov	r1, r3
 800ee22:	4610      	mov	r0, r2
 800ee24:	f7fd fd6f 	bl	800c906 <vListInsert>
}
 800ee28:	e010      	b.n	800ee4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee2a:	4b0e      	ldr	r3, [pc, #56]	; (800ee64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	4b0a      	ldr	r3, [pc, #40]	; (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	3304      	adds	r3, #4
 800ee34:	4619      	mov	r1, r3
 800ee36:	4610      	mov	r0, r2
 800ee38:	f7fd fd65 	bl	800c906 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee3c:	4b0a      	ldr	r3, [pc, #40]	; (800ee68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d202      	bcs.n	800ee4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee46:	4a08      	ldr	r2, [pc, #32]	; (800ee68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	6013      	str	r3, [r2, #0]
}
 800ee4c:	bf00      	nop
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	200071a0 	.word	0x200071a0
 800ee58:	20006cc8 	.word	0x20006cc8
 800ee5c:	20007188 	.word	0x20007188
 800ee60:	20007158 	.word	0x20007158
 800ee64:	20007154 	.word	0x20007154
 800ee68:	200071bc 	.word	0x200071bc

0800ee6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b08a      	sub	sp, #40	; 0x28
 800ee70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee72:	2300      	movs	r3, #0
 800ee74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee76:	f000 fb07 	bl	800f488 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee7a:	4b1c      	ldr	r3, [pc, #112]	; (800eeec <xTimerCreateTimerTask+0x80>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d021      	beq.n	800eec6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee82:	2300      	movs	r3, #0
 800ee84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee86:	2300      	movs	r3, #0
 800ee88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee8a:	1d3a      	adds	r2, r7, #4
 800ee8c:	f107 0108 	add.w	r1, r7, #8
 800ee90:	f107 030c 	add.w	r3, r7, #12
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fd fadd 	bl	800c454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	9202      	str	r2, [sp, #8]
 800eea2:	9301      	str	r3, [sp, #4]
 800eea4:	2302      	movs	r3, #2
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	2300      	movs	r3, #0
 800eeaa:	460a      	mov	r2, r1
 800eeac:	4910      	ldr	r1, [pc, #64]	; (800eef0 <xTimerCreateTimerTask+0x84>)
 800eeae:	4811      	ldr	r0, [pc, #68]	; (800eef4 <xTimerCreateTimerTask+0x88>)
 800eeb0:	f7fe fe50 	bl	800db54 <xTaskCreateStatic>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	4a10      	ldr	r2, [pc, #64]	; (800eef8 <xTimerCreateTimerTask+0x8c>)
 800eeb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eeba:	4b0f      	ldr	r3, [pc, #60]	; (800eef8 <xTimerCreateTimerTask+0x8c>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eec2:	2301      	movs	r3, #1
 800eec4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10a      	bne.n	800eee2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	613b      	str	r3, [r7, #16]
}
 800eede:	bf00      	nop
 800eee0:	e7fe      	b.n	800eee0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eee2:	697b      	ldr	r3, [r7, #20]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	20007200 	.word	0x20007200
 800eef0:	0801274c 	.word	0x0801274c
 800eef4:	0800f031 	.word	0x0800f031
 800eef8:	20007204 	.word	0x20007204

0800eefc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b08a      	sub	sp, #40	; 0x28
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
 800ef08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d10a      	bne.n	800ef2a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ef14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	623b      	str	r3, [r7, #32]
}
 800ef26:	bf00      	nop
 800ef28:	e7fe      	b.n	800ef28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef2a:	4b1a      	ldr	r3, [pc, #104]	; (800ef94 <xTimerGenericCommand+0x98>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d02a      	beq.n	800ef88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	2b05      	cmp	r3, #5
 800ef42:	dc18      	bgt.n	800ef76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef44:	f7ff fd9c 	bl	800ea80 <xTaskGetSchedulerState>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b02      	cmp	r3, #2
 800ef4c:	d109      	bne.n	800ef62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef4e:	4b11      	ldr	r3, [pc, #68]	; (800ef94 <xTimerGenericCommand+0x98>)
 800ef50:	6818      	ldr	r0, [r3, #0]
 800ef52:	f107 0110 	add.w	r1, r7, #16
 800ef56:	2300      	movs	r3, #0
 800ef58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef5a:	f7fd ff95 	bl	800ce88 <xQueueGenericSend>
 800ef5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ef60:	e012      	b.n	800ef88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef62:	4b0c      	ldr	r3, [pc, #48]	; (800ef94 <xTimerGenericCommand+0x98>)
 800ef64:	6818      	ldr	r0, [r3, #0]
 800ef66:	f107 0110 	add.w	r1, r7, #16
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f7fd ff8b 	bl	800ce88 <xQueueGenericSend>
 800ef72:	6278      	str	r0, [r7, #36]	; 0x24
 800ef74:	e008      	b.n	800ef88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef76:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <xTimerGenericCommand+0x98>)
 800ef78:	6818      	ldr	r0, [r3, #0]
 800ef7a:	f107 0110 	add.w	r1, r7, #16
 800ef7e:	2300      	movs	r3, #0
 800ef80:	683a      	ldr	r2, [r7, #0]
 800ef82:	f7fe f87f 	bl	800d084 <xQueueGenericSendFromISR>
 800ef86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3728      	adds	r7, #40	; 0x28
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20007200 	.word	0x20007200

0800ef98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b088      	sub	sp, #32
 800ef9c:	af02      	add	r7, sp, #8
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa2:	4b22      	ldr	r3, [pc, #136]	; (800f02c <prvProcessExpiredTimer+0x94>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	3304      	adds	r3, #4
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7fd fce1 	bl	800c978 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efbc:	f003 0304 	and.w	r3, r3, #4
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d022      	beq.n	800f00a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	699a      	ldr	r2, [r3, #24]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	18d1      	adds	r1, r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	6978      	ldr	r0, [r7, #20]
 800efd2:	f000 f8d1 	bl	800f178 <prvInsertTimerInActiveList>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d01f      	beq.n	800f01c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efdc:	2300      	movs	r3, #0
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	2300      	movs	r3, #0
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	2100      	movs	r1, #0
 800efe6:	6978      	ldr	r0, [r7, #20]
 800efe8:	f7ff ff88 	bl	800eefc <xTimerGenericCommand>
 800efec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d113      	bne.n	800f01c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	60fb      	str	r3, [r7, #12]
}
 800f006:	bf00      	nop
 800f008:	e7fe      	b.n	800f008 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f010:	f023 0301 	bic.w	r3, r3, #1
 800f014:	b2da      	uxtb	r2, r3
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	6978      	ldr	r0, [r7, #20]
 800f022:	4798      	blx	r3
}
 800f024:	bf00      	nop
 800f026:	3718      	adds	r7, #24
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	200071f8 	.word	0x200071f8

0800f030 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f038:	f107 0308 	add.w	r3, r7, #8
 800f03c:	4618      	mov	r0, r3
 800f03e:	f000 f857 	bl	800f0f0 <prvGetNextExpireTime>
 800f042:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	4619      	mov	r1, r3
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f000 f803 	bl	800f054 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f04e:	f000 f8d5 	bl	800f1fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f052:	e7f1      	b.n	800f038 <prvTimerTask+0x8>

0800f054 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f05e:	f7ff f859 	bl	800e114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f062:	f107 0308 	add.w	r3, r7, #8
 800f066:	4618      	mov	r0, r3
 800f068:	f000 f866 	bl	800f138 <prvSampleTimeNow>
 800f06c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d130      	bne.n	800f0d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10a      	bne.n	800f090 <prvProcessTimerOrBlockTask+0x3c>
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d806      	bhi.n	800f090 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f082:	f7ff f855 	bl	800e130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f086:	68f9      	ldr	r1, [r7, #12]
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7ff ff85 	bl	800ef98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f08e:	e024      	b.n	800f0da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d008      	beq.n	800f0a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f096:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <prvProcessTimerOrBlockTask+0x90>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <prvProcessTimerOrBlockTask+0x50>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e000      	b.n	800f0a6 <prvProcessTimerOrBlockTask+0x52>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f0a8:	4b0f      	ldr	r3, [pc, #60]	; (800f0e8 <prvProcessTimerOrBlockTask+0x94>)
 800f0aa:	6818      	ldr	r0, [r3, #0]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	683a      	ldr	r2, [r7, #0]
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	f7fe fd19 	bl	800daec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0ba:	f7ff f839 	bl	800e130 <xTaskResumeAll>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10a      	bne.n	800f0da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f0c4:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <prvProcessTimerOrBlockTask+0x98>)
 800f0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0ca:	601a      	str	r2, [r3, #0]
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	f3bf 8f6f 	isb	sy
}
 800f0d4:	e001      	b.n	800f0da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f0d6:	f7ff f82b 	bl	800e130 <xTaskResumeAll>
}
 800f0da:	bf00      	nop
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	200071fc 	.word	0x200071fc
 800f0e8:	20007200 	.word	0x20007200
 800f0ec:	e000ed04 	.word	0xe000ed04

0800f0f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0f8:	4b0e      	ldr	r3, [pc, #56]	; (800f134 <prvGetNextExpireTime+0x44>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d101      	bne.n	800f106 <prvGetNextExpireTime+0x16>
 800f102:	2201      	movs	r2, #1
 800f104:	e000      	b.n	800f108 <prvGetNextExpireTime+0x18>
 800f106:	2200      	movs	r2, #0
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d105      	bne.n	800f120 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f114:	4b07      	ldr	r3, [pc, #28]	; (800f134 <prvGetNextExpireTime+0x44>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	e001      	b.n	800f124 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f120:	2300      	movs	r3, #0
 800f122:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f124:	68fb      	ldr	r3, [r7, #12]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3714      	adds	r7, #20
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	200071f8 	.word	0x200071f8

0800f138 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f140:	f7ff f894 	bl	800e26c <xTaskGetTickCount>
 800f144:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f146:	4b0b      	ldr	r3, [pc, #44]	; (800f174 <prvSampleTimeNow+0x3c>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d205      	bcs.n	800f15c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f150:	f000 f936 	bl	800f3c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2201      	movs	r2, #1
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	e002      	b.n	800f162 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f162:	4a04      	ldr	r2, [pc, #16]	; (800f174 <prvSampleTimeNow+0x3c>)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f168:	68fb      	ldr	r3, [r7, #12]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	20007208 	.word	0x20007208

0800f178 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f186:	2300      	movs	r3, #0
 800f188:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d812      	bhi.n	800f1c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	1ad2      	subs	r2, r2, r3
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	699b      	ldr	r3, [r3, #24]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d302      	bcc.n	800f1b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	617b      	str	r3, [r7, #20]
 800f1b0:	e01b      	b.n	800f1ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f1b2:	4b10      	ldr	r3, [pc, #64]	; (800f1f4 <prvInsertTimerInActiveList+0x7c>)
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4610      	mov	r0, r2
 800f1be:	f7fd fba2 	bl	800c906 <vListInsert>
 800f1c2:	e012      	b.n	800f1ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d206      	bcs.n	800f1da <prvInsertTimerInActiveList+0x62>
 800f1cc:	68ba      	ldr	r2, [r7, #8]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d302      	bcc.n	800f1da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	617b      	str	r3, [r7, #20]
 800f1d8:	e007      	b.n	800f1ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1da:	4b07      	ldr	r3, [pc, #28]	; (800f1f8 <prvInsertTimerInActiveList+0x80>)
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	f7fd fb8e 	bl	800c906 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f1ea:	697b      	ldr	r3, [r7, #20]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	200071fc 	.word	0x200071fc
 800f1f8:	200071f8 	.word	0x200071f8

0800f1fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08e      	sub	sp, #56	; 0x38
 800f200:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f202:	e0ca      	b.n	800f39a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	da18      	bge.n	800f23c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f20a:	1d3b      	adds	r3, r7, #4
 800f20c:	3304      	adds	r3, #4
 800f20e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10a      	bne.n	800f22c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	61fb      	str	r3, [r7, #28]
}
 800f228:	bf00      	nop
 800f22a:	e7fe      	b.n	800f22a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f232:	6850      	ldr	r0, [r2, #4]
 800f234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f236:	6892      	ldr	r2, [r2, #8]
 800f238:	4611      	mov	r1, r2
 800f23a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f2c0 80aa 	blt.w	800f398 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	695b      	ldr	r3, [r3, #20]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d004      	beq.n	800f25a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	3304      	adds	r3, #4
 800f254:	4618      	mov	r0, r3
 800f256:	f7fd fb8f 	bl	800c978 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f25a:	463b      	mov	r3, r7
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff ff6b 	bl	800f138 <prvSampleTimeNow>
 800f262:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b09      	cmp	r3, #9
 800f268:	f200 8097 	bhi.w	800f39a <prvProcessReceivedCommands+0x19e>
 800f26c:	a201      	add	r2, pc, #4	; (adr r2, 800f274 <prvProcessReceivedCommands+0x78>)
 800f26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f272:	bf00      	nop
 800f274:	0800f29d 	.word	0x0800f29d
 800f278:	0800f29d 	.word	0x0800f29d
 800f27c:	0800f29d 	.word	0x0800f29d
 800f280:	0800f311 	.word	0x0800f311
 800f284:	0800f325 	.word	0x0800f325
 800f288:	0800f36f 	.word	0x0800f36f
 800f28c:	0800f29d 	.word	0x0800f29d
 800f290:	0800f29d 	.word	0x0800f29d
 800f294:	0800f311 	.word	0x0800f311
 800f298:	0800f325 	.word	0x0800f325
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2a2:	f043 0301 	orr.w	r3, r3, #1
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b2:	699b      	ldr	r3, [r3, #24]
 800f2b4:	18d1      	adds	r1, r2, r3
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2bc:	f7ff ff5c 	bl	800f178 <prvInsertTimerInActiveList>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d069      	beq.n	800f39a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c8:	6a1b      	ldr	r3, [r3, #32]
 800f2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2d4:	f003 0304 	and.w	r3, r3, #4
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d05e      	beq.n	800f39a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f2dc:	68ba      	ldr	r2, [r7, #8]
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	699b      	ldr	r3, [r3, #24]
 800f2e2:	441a      	add	r2, r3
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ee:	f7ff fe05 	bl	800eefc <xTimerGenericCommand>
 800f2f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f2f4:	6a3b      	ldr	r3, [r7, #32]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d14f      	bne.n	800f39a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	f383 8811 	msr	BASEPRI, r3
 800f302:	f3bf 8f6f 	isb	sy
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	61bb      	str	r3, [r7, #24]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f316:	f023 0301 	bic.w	r3, r3, #1
 800f31a:	b2da      	uxtb	r2, r3
 800f31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f322:	e03a      	b.n	800f39a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f32a:	f043 0301 	orr.w	r3, r3, #1
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f336:	68ba      	ldr	r2, [r7, #8]
 800f338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	699b      	ldr	r3, [r3, #24]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10a      	bne.n	800f35a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	617b      	str	r3, [r7, #20]
}
 800f356:	bf00      	nop
 800f358:	e7fe      	b.n	800f358 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	699a      	ldr	r2, [r3, #24]
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	18d1      	adds	r1, r2, r3
 800f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f368:	f7ff ff06 	bl	800f178 <prvInsertTimerInActiveList>
					break;
 800f36c:	e015      	b.n	800f39a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f374:	f003 0302 	and.w	r3, r3, #2
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d103      	bne.n	800f384 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f37c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f37e:	f000 fbff 	bl	800fb80 <vPortFree>
 800f382:	e00a      	b.n	800f39a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f38a:	f023 0301 	bic.w	r3, r3, #1
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f396:	e000      	b.n	800f39a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f398:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f39a:	4b08      	ldr	r3, [pc, #32]	; (800f3bc <prvProcessReceivedCommands+0x1c0>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	1d39      	adds	r1, r7, #4
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fd ff96 	bl	800d2d4 <xQueueReceive>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f47f af2a 	bne.w	800f204 <prvProcessReceivedCommands+0x8>
	}
}
 800f3b0:	bf00      	nop
 800f3b2:	bf00      	nop
 800f3b4:	3730      	adds	r7, #48	; 0x30
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20007200 	.word	0x20007200

0800f3c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b088      	sub	sp, #32
 800f3c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3c6:	e048      	b.n	800f45a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3c8:	4b2d      	ldr	r3, [pc, #180]	; (800f480 <prvSwitchTimerLists+0xc0>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3d2:	4b2b      	ldr	r3, [pc, #172]	; (800f480 <prvSwitchTimerLists+0xc0>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	3304      	adds	r3, #4
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fd fac9 	bl	800c978 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6a1b      	ldr	r3, [r3, #32]
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3f4:	f003 0304 	and.w	r3, r3, #4
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d02e      	beq.n	800f45a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	693a      	ldr	r2, [r7, #16]
 800f402:	4413      	add	r3, r2
 800f404:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d90e      	bls.n	800f42c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	68ba      	ldr	r2, [r7, #8]
 800f412:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f41a:	4b19      	ldr	r3, [pc, #100]	; (800f480 <prvSwitchTimerLists+0xc0>)
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	3304      	adds	r3, #4
 800f422:	4619      	mov	r1, r3
 800f424:	4610      	mov	r0, r2
 800f426:	f7fd fa6e 	bl	800c906 <vListInsert>
 800f42a:	e016      	b.n	800f45a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f42c:	2300      	movs	r3, #0
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	2300      	movs	r3, #0
 800f432:	693a      	ldr	r2, [r7, #16]
 800f434:	2100      	movs	r1, #0
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7ff fd60 	bl	800eefc <xTimerGenericCommand>
 800f43c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10a      	bne.n	800f45a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	603b      	str	r3, [r7, #0]
}
 800f456:	bf00      	nop
 800f458:	e7fe      	b.n	800f458 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f45a:	4b09      	ldr	r3, [pc, #36]	; (800f480 <prvSwitchTimerLists+0xc0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1b1      	bne.n	800f3c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f464:	4b06      	ldr	r3, [pc, #24]	; (800f480 <prvSwitchTimerLists+0xc0>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f46a:	4b06      	ldr	r3, [pc, #24]	; (800f484 <prvSwitchTimerLists+0xc4>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4a04      	ldr	r2, [pc, #16]	; (800f480 <prvSwitchTimerLists+0xc0>)
 800f470:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f472:	4a04      	ldr	r2, [pc, #16]	; (800f484 <prvSwitchTimerLists+0xc4>)
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	6013      	str	r3, [r2, #0]
}
 800f478:	bf00      	nop
 800f47a:	3718      	adds	r7, #24
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	200071f8 	.word	0x200071f8
 800f484:	200071fc 	.word	0x200071fc

0800f488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f48e:	f000 f989 	bl	800f7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f492:	4b15      	ldr	r3, [pc, #84]	; (800f4e8 <prvCheckForValidListAndQueue+0x60>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d120      	bne.n	800f4dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f49a:	4814      	ldr	r0, [pc, #80]	; (800f4ec <prvCheckForValidListAndQueue+0x64>)
 800f49c:	f7fd f9e2 	bl	800c864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4a0:	4813      	ldr	r0, [pc, #76]	; (800f4f0 <prvCheckForValidListAndQueue+0x68>)
 800f4a2:	f7fd f9df 	bl	800c864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4a6:	4b13      	ldr	r3, [pc, #76]	; (800f4f4 <prvCheckForValidListAndQueue+0x6c>)
 800f4a8:	4a10      	ldr	r2, [pc, #64]	; (800f4ec <prvCheckForValidListAndQueue+0x64>)
 800f4aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4ac:	4b12      	ldr	r3, [pc, #72]	; (800f4f8 <prvCheckForValidListAndQueue+0x70>)
 800f4ae:	4a10      	ldr	r2, [pc, #64]	; (800f4f0 <prvCheckForValidListAndQueue+0x68>)
 800f4b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	4b11      	ldr	r3, [pc, #68]	; (800f4fc <prvCheckForValidListAndQueue+0x74>)
 800f4b8:	4a11      	ldr	r2, [pc, #68]	; (800f500 <prvCheckForValidListAndQueue+0x78>)
 800f4ba:	2110      	movs	r1, #16
 800f4bc:	200a      	movs	r0, #10
 800f4be:	f7fd faed 	bl	800ca9c <xQueueGenericCreateStatic>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4a08      	ldr	r2, [pc, #32]	; (800f4e8 <prvCheckForValidListAndQueue+0x60>)
 800f4c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f4c8:	4b07      	ldr	r3, [pc, #28]	; (800f4e8 <prvCheckForValidListAndQueue+0x60>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d005      	beq.n	800f4dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4d0:	4b05      	ldr	r3, [pc, #20]	; (800f4e8 <prvCheckForValidListAndQueue+0x60>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	490b      	ldr	r1, [pc, #44]	; (800f504 <prvCheckForValidListAndQueue+0x7c>)
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fe fab4 	bl	800da44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4dc:	f000 f992 	bl	800f804 <vPortExitCritical>
}
 800f4e0:	bf00      	nop
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	20007200 	.word	0x20007200
 800f4ec:	200071d0 	.word	0x200071d0
 800f4f0:	200071e4 	.word	0x200071e4
 800f4f4:	200071f8 	.word	0x200071f8
 800f4f8:	200071fc 	.word	0x200071fc
 800f4fc:	200072ac 	.word	0x200072ac
 800f500:	2000720c 	.word	0x2000720c
 800f504:	08012754 	.word	0x08012754

0800f508 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	; 0x28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f516:	f06f 0301 	mvn.w	r3, #1
 800f51a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f528:	4b06      	ldr	r3, [pc, #24]	; (800f544 <xTimerPendFunctionCallFromISR+0x3c>)
 800f52a:	6818      	ldr	r0, [r3, #0]
 800f52c:	f107 0114 	add.w	r1, r7, #20
 800f530:	2300      	movs	r3, #0
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	f7fd fda6 	bl	800d084 <xQueueGenericSendFromISR>
 800f538:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3728      	adds	r7, #40	; 0x28
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}
 800f544:	20007200 	.word	0x20007200

0800f548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3b04      	subs	r3, #4
 800f558:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3b04      	subs	r3, #4
 800f566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	f023 0201 	bic.w	r2, r3, #1
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3b04      	subs	r3, #4
 800f576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f578:	4a0c      	ldr	r2, [pc, #48]	; (800f5ac <pxPortInitialiseStack+0x64>)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3b14      	subs	r3, #20
 800f582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3b04      	subs	r3, #4
 800f58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f06f 0202 	mvn.w	r2, #2
 800f596:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3b20      	subs	r3, #32
 800f59c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f59e:	68fb      	ldr	r3, [r7, #12]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	0800f5b1 	.word	0x0800f5b1

0800f5b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5ba:	4b12      	ldr	r3, [pc, #72]	; (800f604 <prvTaskExitError+0x54>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c2:	d00a      	beq.n	800f5da <prvTaskExitError+0x2a>
	__asm volatile
 800f5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c8:	f383 8811 	msr	BASEPRI, r3
 800f5cc:	f3bf 8f6f 	isb	sy
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	60fb      	str	r3, [r7, #12]
}
 800f5d6:	bf00      	nop
 800f5d8:	e7fe      	b.n	800f5d8 <prvTaskExitError+0x28>
	__asm volatile
 800f5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5de:	f383 8811 	msr	BASEPRI, r3
 800f5e2:	f3bf 8f6f 	isb	sy
 800f5e6:	f3bf 8f4f 	dsb	sy
 800f5ea:	60bb      	str	r3, [r7, #8]
}
 800f5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5ee:	bf00      	nop
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d0fc      	beq.n	800f5f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5f6:	bf00      	nop
 800f5f8:	bf00      	nop
 800f5fa:	3714      	adds	r7, #20
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr
 800f604:	20000088 	.word	0x20000088
	...

0800f610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f610:	4b07      	ldr	r3, [pc, #28]	; (800f630 <pxCurrentTCBConst2>)
 800f612:	6819      	ldr	r1, [r3, #0]
 800f614:	6808      	ldr	r0, [r1, #0]
 800f616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61a:	f380 8809 	msr	PSP, r0
 800f61e:	f3bf 8f6f 	isb	sy
 800f622:	f04f 0000 	mov.w	r0, #0
 800f626:	f380 8811 	msr	BASEPRI, r0
 800f62a:	4770      	bx	lr
 800f62c:	f3af 8000 	nop.w

0800f630 <pxCurrentTCBConst2>:
 800f630:	20006cc8 	.word	0x20006cc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f634:	bf00      	nop
 800f636:	bf00      	nop

0800f638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f638:	4808      	ldr	r0, [pc, #32]	; (800f65c <prvPortStartFirstTask+0x24>)
 800f63a:	6800      	ldr	r0, [r0, #0]
 800f63c:	6800      	ldr	r0, [r0, #0]
 800f63e:	f380 8808 	msr	MSP, r0
 800f642:	f04f 0000 	mov.w	r0, #0
 800f646:	f380 8814 	msr	CONTROL, r0
 800f64a:	b662      	cpsie	i
 800f64c:	b661      	cpsie	f
 800f64e:	f3bf 8f4f 	dsb	sy
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	df00      	svc	0
 800f658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f65a:	bf00      	nop
 800f65c:	e000ed08 	.word	0xe000ed08

0800f660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f666:	4b46      	ldr	r3, [pc, #280]	; (800f780 <xPortStartScheduler+0x120>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a46      	ldr	r2, [pc, #280]	; (800f784 <xPortStartScheduler+0x124>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d10a      	bne.n	800f686 <xPortStartScheduler+0x26>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	613b      	str	r3, [r7, #16]
}
 800f682:	bf00      	nop
 800f684:	e7fe      	b.n	800f684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f686:	4b3e      	ldr	r3, [pc, #248]	; (800f780 <xPortStartScheduler+0x120>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a3f      	ldr	r2, [pc, #252]	; (800f788 <xPortStartScheduler+0x128>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d10a      	bne.n	800f6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	60fb      	str	r3, [r7, #12]
}
 800f6a2:	bf00      	nop
 800f6a4:	e7fe      	b.n	800f6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6a6:	4b39      	ldr	r3, [pc, #228]	; (800f78c <xPortStartScheduler+0x12c>)
 800f6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	22ff      	movs	r2, #255	; 0xff
 800f6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6c0:	78fb      	ldrb	r3, [r7, #3]
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	4b31      	ldr	r3, [pc, #196]	; (800f790 <xPortStartScheduler+0x130>)
 800f6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6ce:	4b31      	ldr	r3, [pc, #196]	; (800f794 <xPortStartScheduler+0x134>)
 800f6d0:	2207      	movs	r2, #7
 800f6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6d4:	e009      	b.n	800f6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f6d6:	4b2f      	ldr	r3, [pc, #188]	; (800f794 <xPortStartScheduler+0x134>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	4a2d      	ldr	r2, [pc, #180]	; (800f794 <xPortStartScheduler+0x134>)
 800f6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6e0:	78fb      	ldrb	r3, [r7, #3]
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6ea:	78fb      	ldrb	r3, [r7, #3]
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6f2:	2b80      	cmp	r3, #128	; 0x80
 800f6f4:	d0ef      	beq.n	800f6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6f6:	4b27      	ldr	r3, [pc, #156]	; (800f794 <xPortStartScheduler+0x134>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f1c3 0307 	rsb	r3, r3, #7
 800f6fe:	2b04      	cmp	r3, #4
 800f700:	d00a      	beq.n	800f718 <xPortStartScheduler+0xb8>
	__asm volatile
 800f702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	60bb      	str	r3, [r7, #8]
}
 800f714:	bf00      	nop
 800f716:	e7fe      	b.n	800f716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f718:	4b1e      	ldr	r3, [pc, #120]	; (800f794 <xPortStartScheduler+0x134>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	021b      	lsls	r3, r3, #8
 800f71e:	4a1d      	ldr	r2, [pc, #116]	; (800f794 <xPortStartScheduler+0x134>)
 800f720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f722:	4b1c      	ldr	r3, [pc, #112]	; (800f794 <xPortStartScheduler+0x134>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f72a:	4a1a      	ldr	r2, [pc, #104]	; (800f794 <xPortStartScheduler+0x134>)
 800f72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	b2da      	uxtb	r2, r3
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f736:	4b18      	ldr	r3, [pc, #96]	; (800f798 <xPortStartScheduler+0x138>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4a17      	ldr	r2, [pc, #92]	; (800f798 <xPortStartScheduler+0x138>)
 800f73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f742:	4b15      	ldr	r3, [pc, #84]	; (800f798 <xPortStartScheduler+0x138>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a14      	ldr	r2, [pc, #80]	; (800f798 <xPortStartScheduler+0x138>)
 800f748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f74e:	f000 f8dd 	bl	800f90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f752:	4b12      	ldr	r3, [pc, #72]	; (800f79c <xPortStartScheduler+0x13c>)
 800f754:	2200      	movs	r2, #0
 800f756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f758:	f000 f8fc 	bl	800f954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f75c:	4b10      	ldr	r3, [pc, #64]	; (800f7a0 <xPortStartScheduler+0x140>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a0f      	ldr	r2, [pc, #60]	; (800f7a0 <xPortStartScheduler+0x140>)
 800f762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f768:	f7ff ff66 	bl	800f638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f76c:	f7fe fe48 	bl	800e400 <vTaskSwitchContext>
	prvTaskExitError();
 800f770:	f7ff ff1e 	bl	800f5b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3718      	adds	r7, #24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	e000ed00 	.word	0xe000ed00
 800f784:	410fc271 	.word	0x410fc271
 800f788:	410fc270 	.word	0x410fc270
 800f78c:	e000e400 	.word	0xe000e400
 800f790:	200072fc 	.word	0x200072fc
 800f794:	20007300 	.word	0x20007300
 800f798:	e000ed20 	.word	0xe000ed20
 800f79c:	20000088 	.word	0x20000088
 800f7a0:	e000ef34 	.word	0xe000ef34

0800f7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800f7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ae:	f383 8811 	msr	BASEPRI, r3
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	f3bf 8f4f 	dsb	sy
 800f7ba:	607b      	str	r3, [r7, #4]
}
 800f7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7be:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <vPortEnterCritical+0x58>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	4a0d      	ldr	r2, [pc, #52]	; (800f7fc <vPortEnterCritical+0x58>)
 800f7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7c8:	4b0c      	ldr	r3, [pc, #48]	; (800f7fc <vPortEnterCritical+0x58>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d10f      	bne.n	800f7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7d0:	4b0b      	ldr	r3, [pc, #44]	; (800f800 <vPortEnterCritical+0x5c>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00a      	beq.n	800f7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	603b      	str	r3, [r7, #0]
}
 800f7ec:	bf00      	nop
 800f7ee:	e7fe      	b.n	800f7ee <vPortEnterCritical+0x4a>
	}
}
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr
 800f7fc:	20000088 	.word	0x20000088
 800f800:	e000ed04 	.word	0xe000ed04

0800f804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f80a:	4b12      	ldr	r3, [pc, #72]	; (800f854 <vPortExitCritical+0x50>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d10a      	bne.n	800f828 <vPortExitCritical+0x24>
	__asm volatile
 800f812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	607b      	str	r3, [r7, #4]
}
 800f824:	bf00      	nop
 800f826:	e7fe      	b.n	800f826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f828:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <vPortExitCritical+0x50>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	4a09      	ldr	r2, [pc, #36]	; (800f854 <vPortExitCritical+0x50>)
 800f830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f832:	4b08      	ldr	r3, [pc, #32]	; (800f854 <vPortExitCritical+0x50>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d105      	bne.n	800f846 <vPortExitCritical+0x42>
 800f83a:	2300      	movs	r3, #0
 800f83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	f383 8811 	msr	BASEPRI, r3
}
 800f844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f846:	bf00      	nop
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	20000088 	.word	0x20000088
	...

0800f860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f860:	f3ef 8009 	mrs	r0, PSP
 800f864:	f3bf 8f6f 	isb	sy
 800f868:	4b15      	ldr	r3, [pc, #84]	; (800f8c0 <pxCurrentTCBConst>)
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	f01e 0f10 	tst.w	lr, #16
 800f870:	bf08      	it	eq
 800f872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87a:	6010      	str	r0, [r2, #0]
 800f87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f884:	f380 8811 	msr	BASEPRI, r0
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f7fe fdb6 	bl	800e400 <vTaskSwitchContext>
 800f894:	f04f 0000 	mov.w	r0, #0
 800f898:	f380 8811 	msr	BASEPRI, r0
 800f89c:	bc09      	pop	{r0, r3}
 800f89e:	6819      	ldr	r1, [r3, #0]
 800f8a0:	6808      	ldr	r0, [r1, #0]
 800f8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a6:	f01e 0f10 	tst.w	lr, #16
 800f8aa:	bf08      	it	eq
 800f8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8b0:	f380 8809 	msr	PSP, r0
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	f3af 8000 	nop.w

0800f8c0 <pxCurrentTCBConst>:
 800f8c0:	20006cc8 	.word	0x20006cc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8c4:	bf00      	nop
 800f8c6:	bf00      	nop

0800f8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	607b      	str	r3, [r7, #4]
}
 800f8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8e2:	f7fe fcd3 	bl	800e28c <xTaskIncrementTick>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d003      	beq.n	800f8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8ec:	4b06      	ldr	r3, [pc, #24]	; (800f908 <xPortSysTickHandler+0x40>)
 800f8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8f2:	601a      	str	r2, [r3, #0]
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	f383 8811 	msr	BASEPRI, r3
}
 800f8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	e000ed04 	.word	0xe000ed04

0800f90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f90c:	b480      	push	{r7}
 800f90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f910:	4b0b      	ldr	r3, [pc, #44]	; (800f940 <vPortSetupTimerInterrupt+0x34>)
 800f912:	2200      	movs	r2, #0
 800f914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f916:	4b0b      	ldr	r3, [pc, #44]	; (800f944 <vPortSetupTimerInterrupt+0x38>)
 800f918:	2200      	movs	r2, #0
 800f91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <vPortSetupTimerInterrupt+0x3c>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a0a      	ldr	r2, [pc, #40]	; (800f94c <vPortSetupTimerInterrupt+0x40>)
 800f922:	fba2 2303 	umull	r2, r3, r2, r3
 800f926:	099b      	lsrs	r3, r3, #6
 800f928:	4a09      	ldr	r2, [pc, #36]	; (800f950 <vPortSetupTimerInterrupt+0x44>)
 800f92a:	3b01      	subs	r3, #1
 800f92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f92e:	4b04      	ldr	r3, [pc, #16]	; (800f940 <vPortSetupTimerInterrupt+0x34>)
 800f930:	2207      	movs	r2, #7
 800f932:	601a      	str	r2, [r3, #0]
}
 800f934:	bf00      	nop
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	e000e010 	.word	0xe000e010
 800f944:	e000e018 	.word	0xe000e018
 800f948:	20000078 	.word	0x20000078
 800f94c:	10624dd3 	.word	0x10624dd3
 800f950:	e000e014 	.word	0xe000e014

0800f954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f964 <vPortEnableVFP+0x10>
 800f958:	6801      	ldr	r1, [r0, #0]
 800f95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f95e:	6001      	str	r1, [r0, #0]
 800f960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f962:	bf00      	nop
 800f964:	e000ed88 	.word	0xe000ed88

0800f968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f96e:	f3ef 8305 	mrs	r3, IPSR
 800f972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2b0f      	cmp	r3, #15
 800f978:	d914      	bls.n	800f9a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f97a:	4a17      	ldr	r2, [pc, #92]	; (800f9d8 <vPortValidateInterruptPriority+0x70>)
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	4413      	add	r3, r2
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f984:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <vPortValidateInterruptPriority+0x74>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	7afa      	ldrb	r2, [r7, #11]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d20a      	bcs.n	800f9a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	607b      	str	r3, [r7, #4]
}
 800f9a0:	bf00      	nop
 800f9a2:	e7fe      	b.n	800f9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9a4:	4b0e      	ldr	r3, [pc, #56]	; (800f9e0 <vPortValidateInterruptPriority+0x78>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f9ac:	4b0d      	ldr	r3, [pc, #52]	; (800f9e4 <vPortValidateInterruptPriority+0x7c>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d90a      	bls.n	800f9ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	603b      	str	r3, [r7, #0]
}
 800f9c6:	bf00      	nop
 800f9c8:	e7fe      	b.n	800f9c8 <vPortValidateInterruptPriority+0x60>
	}
 800f9ca:	bf00      	nop
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	e000e3f0 	.word	0xe000e3f0
 800f9dc:	200072fc 	.word	0x200072fc
 800f9e0:	e000ed0c 	.word	0xe000ed0c
 800f9e4:	20007300 	.word	0x20007300

0800f9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08a      	sub	sp, #40	; 0x28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f9f4:	f7fe fb8e 	bl	800e114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f9f8:	4b5b      	ldr	r3, [pc, #364]	; (800fb68 <pvPortMalloc+0x180>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa00:	f000 f920 	bl	800fc44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa04:	4b59      	ldr	r3, [pc, #356]	; (800fb6c <pvPortMalloc+0x184>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f040 8093 	bne.w	800fb38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d01d      	beq.n	800fa54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa18:	2208      	movs	r2, #8
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f003 0307 	and.w	r3, r3, #7
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d014      	beq.n	800fa54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f023 0307 	bic.w	r3, r3, #7
 800fa30:	3308      	adds	r3, #8
 800fa32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f003 0307 	and.w	r3, r3, #7
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00a      	beq.n	800fa54 <pvPortMalloc+0x6c>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	617b      	str	r3, [r7, #20]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d06e      	beq.n	800fb38 <pvPortMalloc+0x150>
 800fa5a:	4b45      	ldr	r3, [pc, #276]	; (800fb70 <pvPortMalloc+0x188>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d869      	bhi.n	800fb38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa64:	4b43      	ldr	r3, [pc, #268]	; (800fb74 <pvPortMalloc+0x18c>)
 800fa66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa68:	4b42      	ldr	r3, [pc, #264]	; (800fb74 <pvPortMalloc+0x18c>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa6e:	e004      	b.n	800fa7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d903      	bls.n	800fa8c <pvPortMalloc+0xa4>
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1f1      	bne.n	800fa70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa8c:	4b36      	ldr	r3, [pc, #216]	; (800fb68 <pvPortMalloc+0x180>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d050      	beq.n	800fb38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2208      	movs	r2, #8
 800fa9c:	4413      	add	r3, r2
 800fa9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800faa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	6a3b      	ldr	r3, [r7, #32]
 800faa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	685a      	ldr	r2, [r3, #4]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	1ad2      	subs	r2, r2, r3
 800fab0:	2308      	movs	r3, #8
 800fab2:	005b      	lsls	r3, r3, #1
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d91f      	bls.n	800faf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4413      	add	r3, r2
 800fabe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	f003 0307 	and.w	r3, r3, #7
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00a      	beq.n	800fae0 <pvPortMalloc+0xf8>
	__asm volatile
 800faca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800face:	f383 8811 	msr	BASEPRI, r3
 800fad2:	f3bf 8f6f 	isb	sy
 800fad6:	f3bf 8f4f 	dsb	sy
 800fada:	613b      	str	r3, [r7, #16]
}
 800fadc:	bf00      	nop
 800fade:	e7fe      	b.n	800fade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae2:	685a      	ldr	r2, [r3, #4]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	1ad2      	subs	r2, r2, r3
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800faec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800faf2:	69b8      	ldr	r0, [r7, #24]
 800faf4:	f000 f908 	bl	800fd08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800faf8:	4b1d      	ldr	r3, [pc, #116]	; (800fb70 <pvPortMalloc+0x188>)
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	4a1b      	ldr	r2, [pc, #108]	; (800fb70 <pvPortMalloc+0x188>)
 800fb04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb06:	4b1a      	ldr	r3, [pc, #104]	; (800fb70 <pvPortMalloc+0x188>)
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	4b1b      	ldr	r3, [pc, #108]	; (800fb78 <pvPortMalloc+0x190>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d203      	bcs.n	800fb1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb12:	4b17      	ldr	r3, [pc, #92]	; (800fb70 <pvPortMalloc+0x188>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4a18      	ldr	r2, [pc, #96]	; (800fb78 <pvPortMalloc+0x190>)
 800fb18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1c:	685a      	ldr	r2, [r3, #4]
 800fb1e:	4b13      	ldr	r3, [pc, #76]	; (800fb6c <pvPortMalloc+0x184>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	431a      	orrs	r2, r3
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb2e:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <pvPortMalloc+0x194>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3301      	adds	r3, #1
 800fb34:	4a11      	ldr	r2, [pc, #68]	; (800fb7c <pvPortMalloc+0x194>)
 800fb36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb38:	f7fe fafa 	bl	800e130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	f003 0307 	and.w	r3, r3, #7
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00a      	beq.n	800fb5c <pvPortMalloc+0x174>
	__asm volatile
 800fb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4a:	f383 8811 	msr	BASEPRI, r3
 800fb4e:	f3bf 8f6f 	isb	sy
 800fb52:	f3bf 8f4f 	dsb	sy
 800fb56:	60fb      	str	r3, [r7, #12]
}
 800fb58:	bf00      	nop
 800fb5a:	e7fe      	b.n	800fb5a <pvPortMalloc+0x172>
	return pvReturn;
 800fb5c:	69fb      	ldr	r3, [r7, #28]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3728      	adds	r7, #40	; 0x28
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	2000930c 	.word	0x2000930c
 800fb6c:	20009320 	.word	0x20009320
 800fb70:	20009310 	.word	0x20009310
 800fb74:	20009304 	.word	0x20009304
 800fb78:	20009314 	.word	0x20009314
 800fb7c:	20009318 	.word	0x20009318

0800fb80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d04d      	beq.n	800fc2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb92:	2308      	movs	r3, #8
 800fb94:	425b      	negs	r3, r3
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	4413      	add	r3, r2
 800fb9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	4b24      	ldr	r3, [pc, #144]	; (800fc38 <vPortFree+0xb8>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4013      	ands	r3, r2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10a      	bne.n	800fbc4 <vPortFree+0x44>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	60fb      	str	r3, [r7, #12]
}
 800fbc0:	bf00      	nop
 800fbc2:	e7fe      	b.n	800fbc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00a      	beq.n	800fbe2 <vPortFree+0x62>
	__asm volatile
 800fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	60bb      	str	r3, [r7, #8]
}
 800fbde:	bf00      	nop
 800fbe0:	e7fe      	b.n	800fbe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	685a      	ldr	r2, [r3, #4]
 800fbe6:	4b14      	ldr	r3, [pc, #80]	; (800fc38 <vPortFree+0xb8>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4013      	ands	r3, r2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d01e      	beq.n	800fc2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d11a      	bne.n	800fc2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	4b0e      	ldr	r3, [pc, #56]	; (800fc38 <vPortFree+0xb8>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	43db      	mvns	r3, r3
 800fc02:	401a      	ands	r2, r3
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc08:	f7fe fa84 	bl	800e114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	4b0a      	ldr	r3, [pc, #40]	; (800fc3c <vPortFree+0xbc>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4413      	add	r3, r2
 800fc16:	4a09      	ldr	r2, [pc, #36]	; (800fc3c <vPortFree+0xbc>)
 800fc18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc1a:	6938      	ldr	r0, [r7, #16]
 800fc1c:	f000 f874 	bl	800fd08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc20:	4b07      	ldr	r3, [pc, #28]	; (800fc40 <vPortFree+0xc0>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3301      	adds	r3, #1
 800fc26:	4a06      	ldr	r2, [pc, #24]	; (800fc40 <vPortFree+0xc0>)
 800fc28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc2a:	f7fe fa81 	bl	800e130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc2e:	bf00      	nop
 800fc30:	3718      	adds	r7, #24
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	20009320 	.word	0x20009320
 800fc3c:	20009310 	.word	0x20009310
 800fc40:	2000931c 	.word	0x2000931c

0800fc44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc50:	4b27      	ldr	r3, [pc, #156]	; (800fcf0 <prvHeapInit+0xac>)
 800fc52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f003 0307 	and.w	r3, r3, #7
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00c      	beq.n	800fc78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	3307      	adds	r3, #7
 800fc62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f023 0307 	bic.w	r3, r3, #7
 800fc6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	4a1f      	ldr	r2, [pc, #124]	; (800fcf0 <prvHeapInit+0xac>)
 800fc74:	4413      	add	r3, r2
 800fc76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc7c:	4a1d      	ldr	r2, [pc, #116]	; (800fcf4 <prvHeapInit+0xb0>)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc82:	4b1c      	ldr	r3, [pc, #112]	; (800fcf4 <prvHeapInit+0xb0>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	68ba      	ldr	r2, [r7, #8]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc90:	2208      	movs	r2, #8
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	1a9b      	subs	r3, r3, r2
 800fc96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f023 0307 	bic.w	r3, r3, #7
 800fc9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	4a15      	ldr	r2, [pc, #84]	; (800fcf8 <prvHeapInit+0xb4>)
 800fca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fca6:	4b14      	ldr	r3, [pc, #80]	; (800fcf8 <prvHeapInit+0xb4>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcae:	4b12      	ldr	r3, [pc, #72]	; (800fcf8 <prvHeapInit+0xb4>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	1ad2      	subs	r2, r2, r3
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcc4:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <prvHeapInit+0xb4>)
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	4a0a      	ldr	r2, [pc, #40]	; (800fcfc <prvHeapInit+0xb8>)
 800fcd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	4a09      	ldr	r2, [pc, #36]	; (800fd00 <prvHeapInit+0xbc>)
 800fcda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcdc:	4b09      	ldr	r3, [pc, #36]	; (800fd04 <prvHeapInit+0xc0>)
 800fcde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fce2:	601a      	str	r2, [r3, #0]
}
 800fce4:	bf00      	nop
 800fce6:	3714      	adds	r7, #20
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	20007304 	.word	0x20007304
 800fcf4:	20009304 	.word	0x20009304
 800fcf8:	2000930c 	.word	0x2000930c
 800fcfc:	20009314 	.word	0x20009314
 800fd00:	20009310 	.word	0x20009310
 800fd04:	20009320 	.word	0x20009320

0800fd08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd10:	4b28      	ldr	r3, [pc, #160]	; (800fdb4 <prvInsertBlockIntoFreeList+0xac>)
 800fd12:	60fb      	str	r3, [r7, #12]
 800fd14:	e002      	b.n	800fd1c <prvInsertBlockIntoFreeList+0x14>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d8f7      	bhi.n	800fd16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	68ba      	ldr	r2, [r7, #8]
 800fd30:	4413      	add	r3, r2
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d108      	bne.n	800fd4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	685a      	ldr	r2, [r3, #4]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	441a      	add	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	68ba      	ldr	r2, [r7, #8]
 800fd54:	441a      	add	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d118      	bne.n	800fd90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	4b15      	ldr	r3, [pc, #84]	; (800fdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d00d      	beq.n	800fd86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	685a      	ldr	r2, [r3, #4]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	441a      	add	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	601a      	str	r2, [r3, #0]
 800fd84:	e008      	b.n	800fd98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd86:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	601a      	str	r2, [r3, #0]
 800fd8e:	e003      	b.n	800fd98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d002      	beq.n	800fda6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fda6:	bf00      	nop
 800fda8:	3714      	adds	r7, #20
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	20009304 	.word	0x20009304
 800fdb8:	2000930c 	.word	0x2000930c

0800fdbc <__errno>:
 800fdbc:	4b01      	ldr	r3, [pc, #4]	; (800fdc4 <__errno+0x8>)
 800fdbe:	6818      	ldr	r0, [r3, #0]
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	2000008c 	.word	0x2000008c

0800fdc8 <__libc_init_array>:
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	4d0d      	ldr	r5, [pc, #52]	; (800fe00 <__libc_init_array+0x38>)
 800fdcc:	4c0d      	ldr	r4, [pc, #52]	; (800fe04 <__libc_init_array+0x3c>)
 800fdce:	1b64      	subs	r4, r4, r5
 800fdd0:	10a4      	asrs	r4, r4, #2
 800fdd2:	2600      	movs	r6, #0
 800fdd4:	42a6      	cmp	r6, r4
 800fdd6:	d109      	bne.n	800fdec <__libc_init_array+0x24>
 800fdd8:	4d0b      	ldr	r5, [pc, #44]	; (800fe08 <__libc_init_array+0x40>)
 800fdda:	4c0c      	ldr	r4, [pc, #48]	; (800fe0c <__libc_init_array+0x44>)
 800fddc:	f002 fbd2 	bl	8012584 <_init>
 800fde0:	1b64      	subs	r4, r4, r5
 800fde2:	10a4      	asrs	r4, r4, #2
 800fde4:	2600      	movs	r6, #0
 800fde6:	42a6      	cmp	r6, r4
 800fde8:	d105      	bne.n	800fdf6 <__libc_init_array+0x2e>
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdf0:	4798      	blx	r3
 800fdf2:	3601      	adds	r6, #1
 800fdf4:	e7ee      	b.n	800fdd4 <__libc_init_array+0xc>
 800fdf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdfa:	4798      	blx	r3
 800fdfc:	3601      	adds	r6, #1
 800fdfe:	e7f2      	b.n	800fde6 <__libc_init_array+0x1e>
 800fe00:	0801f928 	.word	0x0801f928
 800fe04:	0801f928 	.word	0x0801f928
 800fe08:	0801f928 	.word	0x0801f928
 800fe0c:	0801f92c 	.word	0x0801f92c

0800fe10 <__retarget_lock_acquire_recursive>:
 800fe10:	4770      	bx	lr

0800fe12 <__retarget_lock_release_recursive>:
 800fe12:	4770      	bx	lr

0800fe14 <memcpy>:
 800fe14:	440a      	add	r2, r1
 800fe16:	4291      	cmp	r1, r2
 800fe18:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe1c:	d100      	bne.n	800fe20 <memcpy+0xc>
 800fe1e:	4770      	bx	lr
 800fe20:	b510      	push	{r4, lr}
 800fe22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe2a:	4291      	cmp	r1, r2
 800fe2c:	d1f9      	bne.n	800fe22 <memcpy+0xe>
 800fe2e:	bd10      	pop	{r4, pc}

0800fe30 <memset>:
 800fe30:	4402      	add	r2, r0
 800fe32:	4603      	mov	r3, r0
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d100      	bne.n	800fe3a <memset+0xa>
 800fe38:	4770      	bx	lr
 800fe3a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe3e:	e7f9      	b.n	800fe34 <memset+0x4>

0800fe40 <sbrk_aligned>:
 800fe40:	b570      	push	{r4, r5, r6, lr}
 800fe42:	4e0e      	ldr	r6, [pc, #56]	; (800fe7c <sbrk_aligned+0x3c>)
 800fe44:	460c      	mov	r4, r1
 800fe46:	6831      	ldr	r1, [r6, #0]
 800fe48:	4605      	mov	r5, r0
 800fe4a:	b911      	cbnz	r1, 800fe52 <sbrk_aligned+0x12>
 800fe4c:	f000 f8f6 	bl	801003c <_sbrk_r>
 800fe50:	6030      	str	r0, [r6, #0]
 800fe52:	4621      	mov	r1, r4
 800fe54:	4628      	mov	r0, r5
 800fe56:	f000 f8f1 	bl	801003c <_sbrk_r>
 800fe5a:	1c43      	adds	r3, r0, #1
 800fe5c:	d00a      	beq.n	800fe74 <sbrk_aligned+0x34>
 800fe5e:	1cc4      	adds	r4, r0, #3
 800fe60:	f024 0403 	bic.w	r4, r4, #3
 800fe64:	42a0      	cmp	r0, r4
 800fe66:	d007      	beq.n	800fe78 <sbrk_aligned+0x38>
 800fe68:	1a21      	subs	r1, r4, r0
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f000 f8e6 	bl	801003c <_sbrk_r>
 800fe70:	3001      	adds	r0, #1
 800fe72:	d101      	bne.n	800fe78 <sbrk_aligned+0x38>
 800fe74:	f04f 34ff 	mov.w	r4, #4294967295
 800fe78:	4620      	mov	r0, r4
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
 800fe7c:	2000932c 	.word	0x2000932c

0800fe80 <_malloc_r>:
 800fe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe84:	1ccd      	adds	r5, r1, #3
 800fe86:	f025 0503 	bic.w	r5, r5, #3
 800fe8a:	3508      	adds	r5, #8
 800fe8c:	2d0c      	cmp	r5, #12
 800fe8e:	bf38      	it	cc
 800fe90:	250c      	movcc	r5, #12
 800fe92:	2d00      	cmp	r5, #0
 800fe94:	4607      	mov	r7, r0
 800fe96:	db01      	blt.n	800fe9c <_malloc_r+0x1c>
 800fe98:	42a9      	cmp	r1, r5
 800fe9a:	d905      	bls.n	800fea8 <_malloc_r+0x28>
 800fe9c:	230c      	movs	r3, #12
 800fe9e:	603b      	str	r3, [r7, #0]
 800fea0:	2600      	movs	r6, #0
 800fea2:	4630      	mov	r0, r6
 800fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea8:	4e2e      	ldr	r6, [pc, #184]	; (800ff64 <_malloc_r+0xe4>)
 800feaa:	f000 f8f7 	bl	801009c <__malloc_lock>
 800feae:	6833      	ldr	r3, [r6, #0]
 800feb0:	461c      	mov	r4, r3
 800feb2:	bb34      	cbnz	r4, 800ff02 <_malloc_r+0x82>
 800feb4:	4629      	mov	r1, r5
 800feb6:	4638      	mov	r0, r7
 800feb8:	f7ff ffc2 	bl	800fe40 <sbrk_aligned>
 800febc:	1c43      	adds	r3, r0, #1
 800febe:	4604      	mov	r4, r0
 800fec0:	d14d      	bne.n	800ff5e <_malloc_r+0xde>
 800fec2:	6834      	ldr	r4, [r6, #0]
 800fec4:	4626      	mov	r6, r4
 800fec6:	2e00      	cmp	r6, #0
 800fec8:	d140      	bne.n	800ff4c <_malloc_r+0xcc>
 800feca:	6823      	ldr	r3, [r4, #0]
 800fecc:	4631      	mov	r1, r6
 800fece:	4638      	mov	r0, r7
 800fed0:	eb04 0803 	add.w	r8, r4, r3
 800fed4:	f000 f8b2 	bl	801003c <_sbrk_r>
 800fed8:	4580      	cmp	r8, r0
 800feda:	d13a      	bne.n	800ff52 <_malloc_r+0xd2>
 800fedc:	6821      	ldr	r1, [r4, #0]
 800fede:	3503      	adds	r5, #3
 800fee0:	1a6d      	subs	r5, r5, r1
 800fee2:	f025 0503 	bic.w	r5, r5, #3
 800fee6:	3508      	adds	r5, #8
 800fee8:	2d0c      	cmp	r5, #12
 800feea:	bf38      	it	cc
 800feec:	250c      	movcc	r5, #12
 800feee:	4629      	mov	r1, r5
 800fef0:	4638      	mov	r0, r7
 800fef2:	f7ff ffa5 	bl	800fe40 <sbrk_aligned>
 800fef6:	3001      	adds	r0, #1
 800fef8:	d02b      	beq.n	800ff52 <_malloc_r+0xd2>
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	442b      	add	r3, r5
 800fefe:	6023      	str	r3, [r4, #0]
 800ff00:	e00e      	b.n	800ff20 <_malloc_r+0xa0>
 800ff02:	6822      	ldr	r2, [r4, #0]
 800ff04:	1b52      	subs	r2, r2, r5
 800ff06:	d41e      	bmi.n	800ff46 <_malloc_r+0xc6>
 800ff08:	2a0b      	cmp	r2, #11
 800ff0a:	d916      	bls.n	800ff3a <_malloc_r+0xba>
 800ff0c:	1961      	adds	r1, r4, r5
 800ff0e:	42a3      	cmp	r3, r4
 800ff10:	6025      	str	r5, [r4, #0]
 800ff12:	bf18      	it	ne
 800ff14:	6059      	strne	r1, [r3, #4]
 800ff16:	6863      	ldr	r3, [r4, #4]
 800ff18:	bf08      	it	eq
 800ff1a:	6031      	streq	r1, [r6, #0]
 800ff1c:	5162      	str	r2, [r4, r5]
 800ff1e:	604b      	str	r3, [r1, #4]
 800ff20:	4638      	mov	r0, r7
 800ff22:	f104 060b 	add.w	r6, r4, #11
 800ff26:	f000 f8bf 	bl	80100a8 <__malloc_unlock>
 800ff2a:	f026 0607 	bic.w	r6, r6, #7
 800ff2e:	1d23      	adds	r3, r4, #4
 800ff30:	1af2      	subs	r2, r6, r3
 800ff32:	d0b6      	beq.n	800fea2 <_malloc_r+0x22>
 800ff34:	1b9b      	subs	r3, r3, r6
 800ff36:	50a3      	str	r3, [r4, r2]
 800ff38:	e7b3      	b.n	800fea2 <_malloc_r+0x22>
 800ff3a:	6862      	ldr	r2, [r4, #4]
 800ff3c:	42a3      	cmp	r3, r4
 800ff3e:	bf0c      	ite	eq
 800ff40:	6032      	streq	r2, [r6, #0]
 800ff42:	605a      	strne	r2, [r3, #4]
 800ff44:	e7ec      	b.n	800ff20 <_malloc_r+0xa0>
 800ff46:	4623      	mov	r3, r4
 800ff48:	6864      	ldr	r4, [r4, #4]
 800ff4a:	e7b2      	b.n	800feb2 <_malloc_r+0x32>
 800ff4c:	4634      	mov	r4, r6
 800ff4e:	6876      	ldr	r6, [r6, #4]
 800ff50:	e7b9      	b.n	800fec6 <_malloc_r+0x46>
 800ff52:	230c      	movs	r3, #12
 800ff54:	603b      	str	r3, [r7, #0]
 800ff56:	4638      	mov	r0, r7
 800ff58:	f000 f8a6 	bl	80100a8 <__malloc_unlock>
 800ff5c:	e7a1      	b.n	800fea2 <_malloc_r+0x22>
 800ff5e:	6025      	str	r5, [r4, #0]
 800ff60:	e7de      	b.n	800ff20 <_malloc_r+0xa0>
 800ff62:	bf00      	nop
 800ff64:	20009328 	.word	0x20009328

0800ff68 <cleanup_glue>:
 800ff68:	b538      	push	{r3, r4, r5, lr}
 800ff6a:	460c      	mov	r4, r1
 800ff6c:	6809      	ldr	r1, [r1, #0]
 800ff6e:	4605      	mov	r5, r0
 800ff70:	b109      	cbz	r1, 800ff76 <cleanup_glue+0xe>
 800ff72:	f7ff fff9 	bl	800ff68 <cleanup_glue>
 800ff76:	4621      	mov	r1, r4
 800ff78:	4628      	mov	r0, r5
 800ff7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff7e:	f000 b899 	b.w	80100b4 <_free_r>
	...

0800ff84 <_reclaim_reent>:
 800ff84:	4b2c      	ldr	r3, [pc, #176]	; (8010038 <_reclaim_reent+0xb4>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4283      	cmp	r3, r0
 800ff8a:	b570      	push	{r4, r5, r6, lr}
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	d051      	beq.n	8010034 <_reclaim_reent+0xb0>
 800ff90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff92:	b143      	cbz	r3, 800ffa6 <_reclaim_reent+0x22>
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d14a      	bne.n	8010030 <_reclaim_reent+0xac>
 800ff9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff9c:	6819      	ldr	r1, [r3, #0]
 800ff9e:	b111      	cbz	r1, 800ffa6 <_reclaim_reent+0x22>
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f000 f887 	bl	80100b4 <_free_r>
 800ffa6:	6961      	ldr	r1, [r4, #20]
 800ffa8:	b111      	cbz	r1, 800ffb0 <_reclaim_reent+0x2c>
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f000 f882 	bl	80100b4 <_free_r>
 800ffb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ffb2:	b111      	cbz	r1, 800ffba <_reclaim_reent+0x36>
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f000 f87d 	bl	80100b4 <_free_r>
 800ffba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ffbc:	b111      	cbz	r1, 800ffc4 <_reclaim_reent+0x40>
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f000 f878 	bl	80100b4 <_free_r>
 800ffc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ffc6:	b111      	cbz	r1, 800ffce <_reclaim_reent+0x4a>
 800ffc8:	4620      	mov	r0, r4
 800ffca:	f000 f873 	bl	80100b4 <_free_r>
 800ffce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ffd0:	b111      	cbz	r1, 800ffd8 <_reclaim_reent+0x54>
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f000 f86e 	bl	80100b4 <_free_r>
 800ffd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ffda:	b111      	cbz	r1, 800ffe2 <_reclaim_reent+0x5e>
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 f869 	bl	80100b4 <_free_r>
 800ffe2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ffe4:	b111      	cbz	r1, 800ffec <_reclaim_reent+0x68>
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f000 f864 	bl	80100b4 <_free_r>
 800ffec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffee:	b111      	cbz	r1, 800fff6 <_reclaim_reent+0x72>
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 f85f 	bl	80100b4 <_free_r>
 800fff6:	69a3      	ldr	r3, [r4, #24]
 800fff8:	b1e3      	cbz	r3, 8010034 <_reclaim_reent+0xb0>
 800fffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fffc:	4620      	mov	r0, r4
 800fffe:	4798      	blx	r3
 8010000:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010002:	b1b9      	cbz	r1, 8010034 <_reclaim_reent+0xb0>
 8010004:	4620      	mov	r0, r4
 8010006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801000a:	f7ff bfad 	b.w	800ff68 <cleanup_glue>
 801000e:	5949      	ldr	r1, [r1, r5]
 8010010:	b941      	cbnz	r1, 8010024 <_reclaim_reent+0xa0>
 8010012:	3504      	adds	r5, #4
 8010014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010016:	2d80      	cmp	r5, #128	; 0x80
 8010018:	68d9      	ldr	r1, [r3, #12]
 801001a:	d1f8      	bne.n	801000e <_reclaim_reent+0x8a>
 801001c:	4620      	mov	r0, r4
 801001e:	f000 f849 	bl	80100b4 <_free_r>
 8010022:	e7ba      	b.n	800ff9a <_reclaim_reent+0x16>
 8010024:	680e      	ldr	r6, [r1, #0]
 8010026:	4620      	mov	r0, r4
 8010028:	f000 f844 	bl	80100b4 <_free_r>
 801002c:	4631      	mov	r1, r6
 801002e:	e7ef      	b.n	8010010 <_reclaim_reent+0x8c>
 8010030:	2500      	movs	r5, #0
 8010032:	e7ef      	b.n	8010014 <_reclaim_reent+0x90>
 8010034:	bd70      	pop	{r4, r5, r6, pc}
 8010036:	bf00      	nop
 8010038:	2000008c 	.word	0x2000008c

0801003c <_sbrk_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4d06      	ldr	r5, [pc, #24]	; (8010058 <_sbrk_r+0x1c>)
 8010040:	2300      	movs	r3, #0
 8010042:	4604      	mov	r4, r0
 8010044:	4608      	mov	r0, r1
 8010046:	602b      	str	r3, [r5, #0]
 8010048:	f7f5 f8ae 	bl	80051a8 <_sbrk>
 801004c:	1c43      	adds	r3, r0, #1
 801004e:	d102      	bne.n	8010056 <_sbrk_r+0x1a>
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	b103      	cbz	r3, 8010056 <_sbrk_r+0x1a>
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	bd38      	pop	{r3, r4, r5, pc}
 8010058:	20009330 	.word	0x20009330

0801005c <siprintf>:
 801005c:	b40e      	push	{r1, r2, r3}
 801005e:	b500      	push	{lr}
 8010060:	b09c      	sub	sp, #112	; 0x70
 8010062:	ab1d      	add	r3, sp, #116	; 0x74
 8010064:	9002      	str	r0, [sp, #8]
 8010066:	9006      	str	r0, [sp, #24]
 8010068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801006c:	4809      	ldr	r0, [pc, #36]	; (8010094 <siprintf+0x38>)
 801006e:	9107      	str	r1, [sp, #28]
 8010070:	9104      	str	r1, [sp, #16]
 8010072:	4909      	ldr	r1, [pc, #36]	; (8010098 <siprintf+0x3c>)
 8010074:	f853 2b04 	ldr.w	r2, [r3], #4
 8010078:	9105      	str	r1, [sp, #20]
 801007a:	6800      	ldr	r0, [r0, #0]
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	a902      	add	r1, sp, #8
 8010080:	f000 f8c0 	bl	8010204 <_svfiprintf_r>
 8010084:	9b02      	ldr	r3, [sp, #8]
 8010086:	2200      	movs	r2, #0
 8010088:	701a      	strb	r2, [r3, #0]
 801008a:	b01c      	add	sp, #112	; 0x70
 801008c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010090:	b003      	add	sp, #12
 8010092:	4770      	bx	lr
 8010094:	2000008c 	.word	0x2000008c
 8010098:	ffff0208 	.word	0xffff0208

0801009c <__malloc_lock>:
 801009c:	4801      	ldr	r0, [pc, #4]	; (80100a4 <__malloc_lock+0x8>)
 801009e:	f7ff beb7 	b.w	800fe10 <__retarget_lock_acquire_recursive>
 80100a2:	bf00      	nop
 80100a4:	20009324 	.word	0x20009324

080100a8 <__malloc_unlock>:
 80100a8:	4801      	ldr	r0, [pc, #4]	; (80100b0 <__malloc_unlock+0x8>)
 80100aa:	f7ff beb2 	b.w	800fe12 <__retarget_lock_release_recursive>
 80100ae:	bf00      	nop
 80100b0:	20009324 	.word	0x20009324

080100b4 <_free_r>:
 80100b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100b6:	2900      	cmp	r1, #0
 80100b8:	d044      	beq.n	8010144 <_free_r+0x90>
 80100ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100be:	9001      	str	r0, [sp, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f1a1 0404 	sub.w	r4, r1, #4
 80100c6:	bfb8      	it	lt
 80100c8:	18e4      	addlt	r4, r4, r3
 80100ca:	f7ff ffe7 	bl	801009c <__malloc_lock>
 80100ce:	4a1e      	ldr	r2, [pc, #120]	; (8010148 <_free_r+0x94>)
 80100d0:	9801      	ldr	r0, [sp, #4]
 80100d2:	6813      	ldr	r3, [r2, #0]
 80100d4:	b933      	cbnz	r3, 80100e4 <_free_r+0x30>
 80100d6:	6063      	str	r3, [r4, #4]
 80100d8:	6014      	str	r4, [r2, #0]
 80100da:	b003      	add	sp, #12
 80100dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100e0:	f7ff bfe2 	b.w	80100a8 <__malloc_unlock>
 80100e4:	42a3      	cmp	r3, r4
 80100e6:	d908      	bls.n	80100fa <_free_r+0x46>
 80100e8:	6825      	ldr	r5, [r4, #0]
 80100ea:	1961      	adds	r1, r4, r5
 80100ec:	428b      	cmp	r3, r1
 80100ee:	bf01      	itttt	eq
 80100f0:	6819      	ldreq	r1, [r3, #0]
 80100f2:	685b      	ldreq	r3, [r3, #4]
 80100f4:	1949      	addeq	r1, r1, r5
 80100f6:	6021      	streq	r1, [r4, #0]
 80100f8:	e7ed      	b.n	80100d6 <_free_r+0x22>
 80100fa:	461a      	mov	r2, r3
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	b10b      	cbz	r3, 8010104 <_free_r+0x50>
 8010100:	42a3      	cmp	r3, r4
 8010102:	d9fa      	bls.n	80100fa <_free_r+0x46>
 8010104:	6811      	ldr	r1, [r2, #0]
 8010106:	1855      	adds	r5, r2, r1
 8010108:	42a5      	cmp	r5, r4
 801010a:	d10b      	bne.n	8010124 <_free_r+0x70>
 801010c:	6824      	ldr	r4, [r4, #0]
 801010e:	4421      	add	r1, r4
 8010110:	1854      	adds	r4, r2, r1
 8010112:	42a3      	cmp	r3, r4
 8010114:	6011      	str	r1, [r2, #0]
 8010116:	d1e0      	bne.n	80100da <_free_r+0x26>
 8010118:	681c      	ldr	r4, [r3, #0]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	6053      	str	r3, [r2, #4]
 801011e:	4421      	add	r1, r4
 8010120:	6011      	str	r1, [r2, #0]
 8010122:	e7da      	b.n	80100da <_free_r+0x26>
 8010124:	d902      	bls.n	801012c <_free_r+0x78>
 8010126:	230c      	movs	r3, #12
 8010128:	6003      	str	r3, [r0, #0]
 801012a:	e7d6      	b.n	80100da <_free_r+0x26>
 801012c:	6825      	ldr	r5, [r4, #0]
 801012e:	1961      	adds	r1, r4, r5
 8010130:	428b      	cmp	r3, r1
 8010132:	bf04      	itt	eq
 8010134:	6819      	ldreq	r1, [r3, #0]
 8010136:	685b      	ldreq	r3, [r3, #4]
 8010138:	6063      	str	r3, [r4, #4]
 801013a:	bf04      	itt	eq
 801013c:	1949      	addeq	r1, r1, r5
 801013e:	6021      	streq	r1, [r4, #0]
 8010140:	6054      	str	r4, [r2, #4]
 8010142:	e7ca      	b.n	80100da <_free_r+0x26>
 8010144:	b003      	add	sp, #12
 8010146:	bd30      	pop	{r4, r5, pc}
 8010148:	20009328 	.word	0x20009328

0801014c <__ssputs_r>:
 801014c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010150:	688e      	ldr	r6, [r1, #8]
 8010152:	429e      	cmp	r6, r3
 8010154:	4682      	mov	sl, r0
 8010156:	460c      	mov	r4, r1
 8010158:	4690      	mov	r8, r2
 801015a:	461f      	mov	r7, r3
 801015c:	d838      	bhi.n	80101d0 <__ssputs_r+0x84>
 801015e:	898a      	ldrh	r2, [r1, #12]
 8010160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010164:	d032      	beq.n	80101cc <__ssputs_r+0x80>
 8010166:	6825      	ldr	r5, [r4, #0]
 8010168:	6909      	ldr	r1, [r1, #16]
 801016a:	eba5 0901 	sub.w	r9, r5, r1
 801016e:	6965      	ldr	r5, [r4, #20]
 8010170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010178:	3301      	adds	r3, #1
 801017a:	444b      	add	r3, r9
 801017c:	106d      	asrs	r5, r5, #1
 801017e:	429d      	cmp	r5, r3
 8010180:	bf38      	it	cc
 8010182:	461d      	movcc	r5, r3
 8010184:	0553      	lsls	r3, r2, #21
 8010186:	d531      	bpl.n	80101ec <__ssputs_r+0xa0>
 8010188:	4629      	mov	r1, r5
 801018a:	f7ff fe79 	bl	800fe80 <_malloc_r>
 801018e:	4606      	mov	r6, r0
 8010190:	b950      	cbnz	r0, 80101a8 <__ssputs_r+0x5c>
 8010192:	230c      	movs	r3, #12
 8010194:	f8ca 3000 	str.w	r3, [sl]
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801019e:	81a3      	strh	r3, [r4, #12]
 80101a0:	f04f 30ff 	mov.w	r0, #4294967295
 80101a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a8:	6921      	ldr	r1, [r4, #16]
 80101aa:	464a      	mov	r2, r9
 80101ac:	f7ff fe32 	bl	800fe14 <memcpy>
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80101b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101ba:	81a3      	strh	r3, [r4, #12]
 80101bc:	6126      	str	r6, [r4, #16]
 80101be:	6165      	str	r5, [r4, #20]
 80101c0:	444e      	add	r6, r9
 80101c2:	eba5 0509 	sub.w	r5, r5, r9
 80101c6:	6026      	str	r6, [r4, #0]
 80101c8:	60a5      	str	r5, [r4, #8]
 80101ca:	463e      	mov	r6, r7
 80101cc:	42be      	cmp	r6, r7
 80101ce:	d900      	bls.n	80101d2 <__ssputs_r+0x86>
 80101d0:	463e      	mov	r6, r7
 80101d2:	6820      	ldr	r0, [r4, #0]
 80101d4:	4632      	mov	r2, r6
 80101d6:	4641      	mov	r1, r8
 80101d8:	f000 faa8 	bl	801072c <memmove>
 80101dc:	68a3      	ldr	r3, [r4, #8]
 80101de:	1b9b      	subs	r3, r3, r6
 80101e0:	60a3      	str	r3, [r4, #8]
 80101e2:	6823      	ldr	r3, [r4, #0]
 80101e4:	4433      	add	r3, r6
 80101e6:	6023      	str	r3, [r4, #0]
 80101e8:	2000      	movs	r0, #0
 80101ea:	e7db      	b.n	80101a4 <__ssputs_r+0x58>
 80101ec:	462a      	mov	r2, r5
 80101ee:	f000 fab7 	bl	8010760 <_realloc_r>
 80101f2:	4606      	mov	r6, r0
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d1e1      	bne.n	80101bc <__ssputs_r+0x70>
 80101f8:	6921      	ldr	r1, [r4, #16]
 80101fa:	4650      	mov	r0, sl
 80101fc:	f7ff ff5a 	bl	80100b4 <_free_r>
 8010200:	e7c7      	b.n	8010192 <__ssputs_r+0x46>
	...

08010204 <_svfiprintf_r>:
 8010204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010208:	4698      	mov	r8, r3
 801020a:	898b      	ldrh	r3, [r1, #12]
 801020c:	061b      	lsls	r3, r3, #24
 801020e:	b09d      	sub	sp, #116	; 0x74
 8010210:	4607      	mov	r7, r0
 8010212:	460d      	mov	r5, r1
 8010214:	4614      	mov	r4, r2
 8010216:	d50e      	bpl.n	8010236 <_svfiprintf_r+0x32>
 8010218:	690b      	ldr	r3, [r1, #16]
 801021a:	b963      	cbnz	r3, 8010236 <_svfiprintf_r+0x32>
 801021c:	2140      	movs	r1, #64	; 0x40
 801021e:	f7ff fe2f 	bl	800fe80 <_malloc_r>
 8010222:	6028      	str	r0, [r5, #0]
 8010224:	6128      	str	r0, [r5, #16]
 8010226:	b920      	cbnz	r0, 8010232 <_svfiprintf_r+0x2e>
 8010228:	230c      	movs	r3, #12
 801022a:	603b      	str	r3, [r7, #0]
 801022c:	f04f 30ff 	mov.w	r0, #4294967295
 8010230:	e0d1      	b.n	80103d6 <_svfiprintf_r+0x1d2>
 8010232:	2340      	movs	r3, #64	; 0x40
 8010234:	616b      	str	r3, [r5, #20]
 8010236:	2300      	movs	r3, #0
 8010238:	9309      	str	r3, [sp, #36]	; 0x24
 801023a:	2320      	movs	r3, #32
 801023c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010240:	f8cd 800c 	str.w	r8, [sp, #12]
 8010244:	2330      	movs	r3, #48	; 0x30
 8010246:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103f0 <_svfiprintf_r+0x1ec>
 801024a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801024e:	f04f 0901 	mov.w	r9, #1
 8010252:	4623      	mov	r3, r4
 8010254:	469a      	mov	sl, r3
 8010256:	f813 2b01 	ldrb.w	r2, [r3], #1
 801025a:	b10a      	cbz	r2, 8010260 <_svfiprintf_r+0x5c>
 801025c:	2a25      	cmp	r2, #37	; 0x25
 801025e:	d1f9      	bne.n	8010254 <_svfiprintf_r+0x50>
 8010260:	ebba 0b04 	subs.w	fp, sl, r4
 8010264:	d00b      	beq.n	801027e <_svfiprintf_r+0x7a>
 8010266:	465b      	mov	r3, fp
 8010268:	4622      	mov	r2, r4
 801026a:	4629      	mov	r1, r5
 801026c:	4638      	mov	r0, r7
 801026e:	f7ff ff6d 	bl	801014c <__ssputs_r>
 8010272:	3001      	adds	r0, #1
 8010274:	f000 80aa 	beq.w	80103cc <_svfiprintf_r+0x1c8>
 8010278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801027a:	445a      	add	r2, fp
 801027c:	9209      	str	r2, [sp, #36]	; 0x24
 801027e:	f89a 3000 	ldrb.w	r3, [sl]
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 80a2 	beq.w	80103cc <_svfiprintf_r+0x1c8>
 8010288:	2300      	movs	r3, #0
 801028a:	f04f 32ff 	mov.w	r2, #4294967295
 801028e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010292:	f10a 0a01 	add.w	sl, sl, #1
 8010296:	9304      	str	r3, [sp, #16]
 8010298:	9307      	str	r3, [sp, #28]
 801029a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801029e:	931a      	str	r3, [sp, #104]	; 0x68
 80102a0:	4654      	mov	r4, sl
 80102a2:	2205      	movs	r2, #5
 80102a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a8:	4851      	ldr	r0, [pc, #324]	; (80103f0 <_svfiprintf_r+0x1ec>)
 80102aa:	f7ef ff99 	bl	80001e0 <memchr>
 80102ae:	9a04      	ldr	r2, [sp, #16]
 80102b0:	b9d8      	cbnz	r0, 80102ea <_svfiprintf_r+0xe6>
 80102b2:	06d0      	lsls	r0, r2, #27
 80102b4:	bf44      	itt	mi
 80102b6:	2320      	movmi	r3, #32
 80102b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102bc:	0711      	lsls	r1, r2, #28
 80102be:	bf44      	itt	mi
 80102c0:	232b      	movmi	r3, #43	; 0x2b
 80102c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102c6:	f89a 3000 	ldrb.w	r3, [sl]
 80102ca:	2b2a      	cmp	r3, #42	; 0x2a
 80102cc:	d015      	beq.n	80102fa <_svfiprintf_r+0xf6>
 80102ce:	9a07      	ldr	r2, [sp, #28]
 80102d0:	4654      	mov	r4, sl
 80102d2:	2000      	movs	r0, #0
 80102d4:	f04f 0c0a 	mov.w	ip, #10
 80102d8:	4621      	mov	r1, r4
 80102da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102de:	3b30      	subs	r3, #48	; 0x30
 80102e0:	2b09      	cmp	r3, #9
 80102e2:	d94e      	bls.n	8010382 <_svfiprintf_r+0x17e>
 80102e4:	b1b0      	cbz	r0, 8010314 <_svfiprintf_r+0x110>
 80102e6:	9207      	str	r2, [sp, #28]
 80102e8:	e014      	b.n	8010314 <_svfiprintf_r+0x110>
 80102ea:	eba0 0308 	sub.w	r3, r0, r8
 80102ee:	fa09 f303 	lsl.w	r3, r9, r3
 80102f2:	4313      	orrs	r3, r2
 80102f4:	9304      	str	r3, [sp, #16]
 80102f6:	46a2      	mov	sl, r4
 80102f8:	e7d2      	b.n	80102a0 <_svfiprintf_r+0x9c>
 80102fa:	9b03      	ldr	r3, [sp, #12]
 80102fc:	1d19      	adds	r1, r3, #4
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	9103      	str	r1, [sp, #12]
 8010302:	2b00      	cmp	r3, #0
 8010304:	bfbb      	ittet	lt
 8010306:	425b      	neglt	r3, r3
 8010308:	f042 0202 	orrlt.w	r2, r2, #2
 801030c:	9307      	strge	r3, [sp, #28]
 801030e:	9307      	strlt	r3, [sp, #28]
 8010310:	bfb8      	it	lt
 8010312:	9204      	strlt	r2, [sp, #16]
 8010314:	7823      	ldrb	r3, [r4, #0]
 8010316:	2b2e      	cmp	r3, #46	; 0x2e
 8010318:	d10c      	bne.n	8010334 <_svfiprintf_r+0x130>
 801031a:	7863      	ldrb	r3, [r4, #1]
 801031c:	2b2a      	cmp	r3, #42	; 0x2a
 801031e:	d135      	bne.n	801038c <_svfiprintf_r+0x188>
 8010320:	9b03      	ldr	r3, [sp, #12]
 8010322:	1d1a      	adds	r2, r3, #4
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	9203      	str	r2, [sp, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	bfb8      	it	lt
 801032c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010330:	3402      	adds	r4, #2
 8010332:	9305      	str	r3, [sp, #20]
 8010334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010400 <_svfiprintf_r+0x1fc>
 8010338:	7821      	ldrb	r1, [r4, #0]
 801033a:	2203      	movs	r2, #3
 801033c:	4650      	mov	r0, sl
 801033e:	f7ef ff4f 	bl	80001e0 <memchr>
 8010342:	b140      	cbz	r0, 8010356 <_svfiprintf_r+0x152>
 8010344:	2340      	movs	r3, #64	; 0x40
 8010346:	eba0 000a 	sub.w	r0, r0, sl
 801034a:	fa03 f000 	lsl.w	r0, r3, r0
 801034e:	9b04      	ldr	r3, [sp, #16]
 8010350:	4303      	orrs	r3, r0
 8010352:	3401      	adds	r4, #1
 8010354:	9304      	str	r3, [sp, #16]
 8010356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801035a:	4826      	ldr	r0, [pc, #152]	; (80103f4 <_svfiprintf_r+0x1f0>)
 801035c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010360:	2206      	movs	r2, #6
 8010362:	f7ef ff3d 	bl	80001e0 <memchr>
 8010366:	2800      	cmp	r0, #0
 8010368:	d038      	beq.n	80103dc <_svfiprintf_r+0x1d8>
 801036a:	4b23      	ldr	r3, [pc, #140]	; (80103f8 <_svfiprintf_r+0x1f4>)
 801036c:	bb1b      	cbnz	r3, 80103b6 <_svfiprintf_r+0x1b2>
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	3307      	adds	r3, #7
 8010372:	f023 0307 	bic.w	r3, r3, #7
 8010376:	3308      	adds	r3, #8
 8010378:	9303      	str	r3, [sp, #12]
 801037a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801037c:	4433      	add	r3, r6
 801037e:	9309      	str	r3, [sp, #36]	; 0x24
 8010380:	e767      	b.n	8010252 <_svfiprintf_r+0x4e>
 8010382:	fb0c 3202 	mla	r2, ip, r2, r3
 8010386:	460c      	mov	r4, r1
 8010388:	2001      	movs	r0, #1
 801038a:	e7a5      	b.n	80102d8 <_svfiprintf_r+0xd4>
 801038c:	2300      	movs	r3, #0
 801038e:	3401      	adds	r4, #1
 8010390:	9305      	str	r3, [sp, #20]
 8010392:	4619      	mov	r1, r3
 8010394:	f04f 0c0a 	mov.w	ip, #10
 8010398:	4620      	mov	r0, r4
 801039a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801039e:	3a30      	subs	r2, #48	; 0x30
 80103a0:	2a09      	cmp	r2, #9
 80103a2:	d903      	bls.n	80103ac <_svfiprintf_r+0x1a8>
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d0c5      	beq.n	8010334 <_svfiprintf_r+0x130>
 80103a8:	9105      	str	r1, [sp, #20]
 80103aa:	e7c3      	b.n	8010334 <_svfiprintf_r+0x130>
 80103ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80103b0:	4604      	mov	r4, r0
 80103b2:	2301      	movs	r3, #1
 80103b4:	e7f0      	b.n	8010398 <_svfiprintf_r+0x194>
 80103b6:	ab03      	add	r3, sp, #12
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	462a      	mov	r2, r5
 80103bc:	4b0f      	ldr	r3, [pc, #60]	; (80103fc <_svfiprintf_r+0x1f8>)
 80103be:	a904      	add	r1, sp, #16
 80103c0:	4638      	mov	r0, r7
 80103c2:	f3af 8000 	nop.w
 80103c6:	1c42      	adds	r2, r0, #1
 80103c8:	4606      	mov	r6, r0
 80103ca:	d1d6      	bne.n	801037a <_svfiprintf_r+0x176>
 80103cc:	89ab      	ldrh	r3, [r5, #12]
 80103ce:	065b      	lsls	r3, r3, #25
 80103d0:	f53f af2c 	bmi.w	801022c <_svfiprintf_r+0x28>
 80103d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103d6:	b01d      	add	sp, #116	; 0x74
 80103d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103dc:	ab03      	add	r3, sp, #12
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	462a      	mov	r2, r5
 80103e2:	4b06      	ldr	r3, [pc, #24]	; (80103fc <_svfiprintf_r+0x1f8>)
 80103e4:	a904      	add	r1, sp, #16
 80103e6:	4638      	mov	r0, r7
 80103e8:	f000 f87a 	bl	80104e0 <_printf_i>
 80103ec:	e7eb      	b.n	80103c6 <_svfiprintf_r+0x1c2>
 80103ee:	bf00      	nop
 80103f0:	0801f6e4 	.word	0x0801f6e4
 80103f4:	0801f6ee 	.word	0x0801f6ee
 80103f8:	00000000 	.word	0x00000000
 80103fc:	0801014d 	.word	0x0801014d
 8010400:	0801f6ea 	.word	0x0801f6ea

08010404 <_printf_common>:
 8010404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010408:	4616      	mov	r6, r2
 801040a:	4699      	mov	r9, r3
 801040c:	688a      	ldr	r2, [r1, #8]
 801040e:	690b      	ldr	r3, [r1, #16]
 8010410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010414:	4293      	cmp	r3, r2
 8010416:	bfb8      	it	lt
 8010418:	4613      	movlt	r3, r2
 801041a:	6033      	str	r3, [r6, #0]
 801041c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010420:	4607      	mov	r7, r0
 8010422:	460c      	mov	r4, r1
 8010424:	b10a      	cbz	r2, 801042a <_printf_common+0x26>
 8010426:	3301      	adds	r3, #1
 8010428:	6033      	str	r3, [r6, #0]
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	0699      	lsls	r1, r3, #26
 801042e:	bf42      	ittt	mi
 8010430:	6833      	ldrmi	r3, [r6, #0]
 8010432:	3302      	addmi	r3, #2
 8010434:	6033      	strmi	r3, [r6, #0]
 8010436:	6825      	ldr	r5, [r4, #0]
 8010438:	f015 0506 	ands.w	r5, r5, #6
 801043c:	d106      	bne.n	801044c <_printf_common+0x48>
 801043e:	f104 0a19 	add.w	sl, r4, #25
 8010442:	68e3      	ldr	r3, [r4, #12]
 8010444:	6832      	ldr	r2, [r6, #0]
 8010446:	1a9b      	subs	r3, r3, r2
 8010448:	42ab      	cmp	r3, r5
 801044a:	dc26      	bgt.n	801049a <_printf_common+0x96>
 801044c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010450:	1e13      	subs	r3, r2, #0
 8010452:	6822      	ldr	r2, [r4, #0]
 8010454:	bf18      	it	ne
 8010456:	2301      	movne	r3, #1
 8010458:	0692      	lsls	r2, r2, #26
 801045a:	d42b      	bmi.n	80104b4 <_printf_common+0xb0>
 801045c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010460:	4649      	mov	r1, r9
 8010462:	4638      	mov	r0, r7
 8010464:	47c0      	blx	r8
 8010466:	3001      	adds	r0, #1
 8010468:	d01e      	beq.n	80104a8 <_printf_common+0xa4>
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	68e5      	ldr	r5, [r4, #12]
 801046e:	6832      	ldr	r2, [r6, #0]
 8010470:	f003 0306 	and.w	r3, r3, #6
 8010474:	2b04      	cmp	r3, #4
 8010476:	bf08      	it	eq
 8010478:	1aad      	subeq	r5, r5, r2
 801047a:	68a3      	ldr	r3, [r4, #8]
 801047c:	6922      	ldr	r2, [r4, #16]
 801047e:	bf0c      	ite	eq
 8010480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010484:	2500      	movne	r5, #0
 8010486:	4293      	cmp	r3, r2
 8010488:	bfc4      	itt	gt
 801048a:	1a9b      	subgt	r3, r3, r2
 801048c:	18ed      	addgt	r5, r5, r3
 801048e:	2600      	movs	r6, #0
 8010490:	341a      	adds	r4, #26
 8010492:	42b5      	cmp	r5, r6
 8010494:	d11a      	bne.n	80104cc <_printf_common+0xc8>
 8010496:	2000      	movs	r0, #0
 8010498:	e008      	b.n	80104ac <_printf_common+0xa8>
 801049a:	2301      	movs	r3, #1
 801049c:	4652      	mov	r2, sl
 801049e:	4649      	mov	r1, r9
 80104a0:	4638      	mov	r0, r7
 80104a2:	47c0      	blx	r8
 80104a4:	3001      	adds	r0, #1
 80104a6:	d103      	bne.n	80104b0 <_printf_common+0xac>
 80104a8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b0:	3501      	adds	r5, #1
 80104b2:	e7c6      	b.n	8010442 <_printf_common+0x3e>
 80104b4:	18e1      	adds	r1, r4, r3
 80104b6:	1c5a      	adds	r2, r3, #1
 80104b8:	2030      	movs	r0, #48	; 0x30
 80104ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104be:	4422      	add	r2, r4
 80104c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104c8:	3302      	adds	r3, #2
 80104ca:	e7c7      	b.n	801045c <_printf_common+0x58>
 80104cc:	2301      	movs	r3, #1
 80104ce:	4622      	mov	r2, r4
 80104d0:	4649      	mov	r1, r9
 80104d2:	4638      	mov	r0, r7
 80104d4:	47c0      	blx	r8
 80104d6:	3001      	adds	r0, #1
 80104d8:	d0e6      	beq.n	80104a8 <_printf_common+0xa4>
 80104da:	3601      	adds	r6, #1
 80104dc:	e7d9      	b.n	8010492 <_printf_common+0x8e>
	...

080104e0 <_printf_i>:
 80104e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104e4:	7e0f      	ldrb	r7, [r1, #24]
 80104e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104e8:	2f78      	cmp	r7, #120	; 0x78
 80104ea:	4691      	mov	r9, r2
 80104ec:	4680      	mov	r8, r0
 80104ee:	460c      	mov	r4, r1
 80104f0:	469a      	mov	sl, r3
 80104f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80104f6:	d807      	bhi.n	8010508 <_printf_i+0x28>
 80104f8:	2f62      	cmp	r7, #98	; 0x62
 80104fa:	d80a      	bhi.n	8010512 <_printf_i+0x32>
 80104fc:	2f00      	cmp	r7, #0
 80104fe:	f000 80d8 	beq.w	80106b2 <_printf_i+0x1d2>
 8010502:	2f58      	cmp	r7, #88	; 0x58
 8010504:	f000 80a3 	beq.w	801064e <_printf_i+0x16e>
 8010508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801050c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010510:	e03a      	b.n	8010588 <_printf_i+0xa8>
 8010512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010516:	2b15      	cmp	r3, #21
 8010518:	d8f6      	bhi.n	8010508 <_printf_i+0x28>
 801051a:	a101      	add	r1, pc, #4	; (adr r1, 8010520 <_printf_i+0x40>)
 801051c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010520:	08010579 	.word	0x08010579
 8010524:	0801058d 	.word	0x0801058d
 8010528:	08010509 	.word	0x08010509
 801052c:	08010509 	.word	0x08010509
 8010530:	08010509 	.word	0x08010509
 8010534:	08010509 	.word	0x08010509
 8010538:	0801058d 	.word	0x0801058d
 801053c:	08010509 	.word	0x08010509
 8010540:	08010509 	.word	0x08010509
 8010544:	08010509 	.word	0x08010509
 8010548:	08010509 	.word	0x08010509
 801054c:	08010699 	.word	0x08010699
 8010550:	080105bd 	.word	0x080105bd
 8010554:	0801067b 	.word	0x0801067b
 8010558:	08010509 	.word	0x08010509
 801055c:	08010509 	.word	0x08010509
 8010560:	080106bb 	.word	0x080106bb
 8010564:	08010509 	.word	0x08010509
 8010568:	080105bd 	.word	0x080105bd
 801056c:	08010509 	.word	0x08010509
 8010570:	08010509 	.word	0x08010509
 8010574:	08010683 	.word	0x08010683
 8010578:	682b      	ldr	r3, [r5, #0]
 801057a:	1d1a      	adds	r2, r3, #4
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	602a      	str	r2, [r5, #0]
 8010580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010588:	2301      	movs	r3, #1
 801058a:	e0a3      	b.n	80106d4 <_printf_i+0x1f4>
 801058c:	6820      	ldr	r0, [r4, #0]
 801058e:	6829      	ldr	r1, [r5, #0]
 8010590:	0606      	lsls	r6, r0, #24
 8010592:	f101 0304 	add.w	r3, r1, #4
 8010596:	d50a      	bpl.n	80105ae <_printf_i+0xce>
 8010598:	680e      	ldr	r6, [r1, #0]
 801059a:	602b      	str	r3, [r5, #0]
 801059c:	2e00      	cmp	r6, #0
 801059e:	da03      	bge.n	80105a8 <_printf_i+0xc8>
 80105a0:	232d      	movs	r3, #45	; 0x2d
 80105a2:	4276      	negs	r6, r6
 80105a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105a8:	485e      	ldr	r0, [pc, #376]	; (8010724 <_printf_i+0x244>)
 80105aa:	230a      	movs	r3, #10
 80105ac:	e019      	b.n	80105e2 <_printf_i+0x102>
 80105ae:	680e      	ldr	r6, [r1, #0]
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80105b6:	bf18      	it	ne
 80105b8:	b236      	sxthne	r6, r6
 80105ba:	e7ef      	b.n	801059c <_printf_i+0xbc>
 80105bc:	682b      	ldr	r3, [r5, #0]
 80105be:	6820      	ldr	r0, [r4, #0]
 80105c0:	1d19      	adds	r1, r3, #4
 80105c2:	6029      	str	r1, [r5, #0]
 80105c4:	0601      	lsls	r1, r0, #24
 80105c6:	d501      	bpl.n	80105cc <_printf_i+0xec>
 80105c8:	681e      	ldr	r6, [r3, #0]
 80105ca:	e002      	b.n	80105d2 <_printf_i+0xf2>
 80105cc:	0646      	lsls	r6, r0, #25
 80105ce:	d5fb      	bpl.n	80105c8 <_printf_i+0xe8>
 80105d0:	881e      	ldrh	r6, [r3, #0]
 80105d2:	4854      	ldr	r0, [pc, #336]	; (8010724 <_printf_i+0x244>)
 80105d4:	2f6f      	cmp	r7, #111	; 0x6f
 80105d6:	bf0c      	ite	eq
 80105d8:	2308      	moveq	r3, #8
 80105da:	230a      	movne	r3, #10
 80105dc:	2100      	movs	r1, #0
 80105de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105e2:	6865      	ldr	r5, [r4, #4]
 80105e4:	60a5      	str	r5, [r4, #8]
 80105e6:	2d00      	cmp	r5, #0
 80105e8:	bfa2      	ittt	ge
 80105ea:	6821      	ldrge	r1, [r4, #0]
 80105ec:	f021 0104 	bicge.w	r1, r1, #4
 80105f0:	6021      	strge	r1, [r4, #0]
 80105f2:	b90e      	cbnz	r6, 80105f8 <_printf_i+0x118>
 80105f4:	2d00      	cmp	r5, #0
 80105f6:	d04d      	beq.n	8010694 <_printf_i+0x1b4>
 80105f8:	4615      	mov	r5, r2
 80105fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80105fe:	fb03 6711 	mls	r7, r3, r1, r6
 8010602:	5dc7      	ldrb	r7, [r0, r7]
 8010604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010608:	4637      	mov	r7, r6
 801060a:	42bb      	cmp	r3, r7
 801060c:	460e      	mov	r6, r1
 801060e:	d9f4      	bls.n	80105fa <_printf_i+0x11a>
 8010610:	2b08      	cmp	r3, #8
 8010612:	d10b      	bne.n	801062c <_printf_i+0x14c>
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	07de      	lsls	r6, r3, #31
 8010618:	d508      	bpl.n	801062c <_printf_i+0x14c>
 801061a:	6923      	ldr	r3, [r4, #16]
 801061c:	6861      	ldr	r1, [r4, #4]
 801061e:	4299      	cmp	r1, r3
 8010620:	bfde      	ittt	le
 8010622:	2330      	movle	r3, #48	; 0x30
 8010624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010628:	f105 35ff 	addle.w	r5, r5, #4294967295
 801062c:	1b52      	subs	r2, r2, r5
 801062e:	6122      	str	r2, [r4, #16]
 8010630:	f8cd a000 	str.w	sl, [sp]
 8010634:	464b      	mov	r3, r9
 8010636:	aa03      	add	r2, sp, #12
 8010638:	4621      	mov	r1, r4
 801063a:	4640      	mov	r0, r8
 801063c:	f7ff fee2 	bl	8010404 <_printf_common>
 8010640:	3001      	adds	r0, #1
 8010642:	d14c      	bne.n	80106de <_printf_i+0x1fe>
 8010644:	f04f 30ff 	mov.w	r0, #4294967295
 8010648:	b004      	add	sp, #16
 801064a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064e:	4835      	ldr	r0, [pc, #212]	; (8010724 <_printf_i+0x244>)
 8010650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010654:	6829      	ldr	r1, [r5, #0]
 8010656:	6823      	ldr	r3, [r4, #0]
 8010658:	f851 6b04 	ldr.w	r6, [r1], #4
 801065c:	6029      	str	r1, [r5, #0]
 801065e:	061d      	lsls	r5, r3, #24
 8010660:	d514      	bpl.n	801068c <_printf_i+0x1ac>
 8010662:	07df      	lsls	r7, r3, #31
 8010664:	bf44      	itt	mi
 8010666:	f043 0320 	orrmi.w	r3, r3, #32
 801066a:	6023      	strmi	r3, [r4, #0]
 801066c:	b91e      	cbnz	r6, 8010676 <_printf_i+0x196>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	f023 0320 	bic.w	r3, r3, #32
 8010674:	6023      	str	r3, [r4, #0]
 8010676:	2310      	movs	r3, #16
 8010678:	e7b0      	b.n	80105dc <_printf_i+0xfc>
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	f043 0320 	orr.w	r3, r3, #32
 8010680:	6023      	str	r3, [r4, #0]
 8010682:	2378      	movs	r3, #120	; 0x78
 8010684:	4828      	ldr	r0, [pc, #160]	; (8010728 <_printf_i+0x248>)
 8010686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801068a:	e7e3      	b.n	8010654 <_printf_i+0x174>
 801068c:	0659      	lsls	r1, r3, #25
 801068e:	bf48      	it	mi
 8010690:	b2b6      	uxthmi	r6, r6
 8010692:	e7e6      	b.n	8010662 <_printf_i+0x182>
 8010694:	4615      	mov	r5, r2
 8010696:	e7bb      	b.n	8010610 <_printf_i+0x130>
 8010698:	682b      	ldr	r3, [r5, #0]
 801069a:	6826      	ldr	r6, [r4, #0]
 801069c:	6961      	ldr	r1, [r4, #20]
 801069e:	1d18      	adds	r0, r3, #4
 80106a0:	6028      	str	r0, [r5, #0]
 80106a2:	0635      	lsls	r5, r6, #24
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	d501      	bpl.n	80106ac <_printf_i+0x1cc>
 80106a8:	6019      	str	r1, [r3, #0]
 80106aa:	e002      	b.n	80106b2 <_printf_i+0x1d2>
 80106ac:	0670      	lsls	r0, r6, #25
 80106ae:	d5fb      	bpl.n	80106a8 <_printf_i+0x1c8>
 80106b0:	8019      	strh	r1, [r3, #0]
 80106b2:	2300      	movs	r3, #0
 80106b4:	6123      	str	r3, [r4, #16]
 80106b6:	4615      	mov	r5, r2
 80106b8:	e7ba      	b.n	8010630 <_printf_i+0x150>
 80106ba:	682b      	ldr	r3, [r5, #0]
 80106bc:	1d1a      	adds	r2, r3, #4
 80106be:	602a      	str	r2, [r5, #0]
 80106c0:	681d      	ldr	r5, [r3, #0]
 80106c2:	6862      	ldr	r2, [r4, #4]
 80106c4:	2100      	movs	r1, #0
 80106c6:	4628      	mov	r0, r5
 80106c8:	f7ef fd8a 	bl	80001e0 <memchr>
 80106cc:	b108      	cbz	r0, 80106d2 <_printf_i+0x1f2>
 80106ce:	1b40      	subs	r0, r0, r5
 80106d0:	6060      	str	r0, [r4, #4]
 80106d2:	6863      	ldr	r3, [r4, #4]
 80106d4:	6123      	str	r3, [r4, #16]
 80106d6:	2300      	movs	r3, #0
 80106d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106dc:	e7a8      	b.n	8010630 <_printf_i+0x150>
 80106de:	6923      	ldr	r3, [r4, #16]
 80106e0:	462a      	mov	r2, r5
 80106e2:	4649      	mov	r1, r9
 80106e4:	4640      	mov	r0, r8
 80106e6:	47d0      	blx	sl
 80106e8:	3001      	adds	r0, #1
 80106ea:	d0ab      	beq.n	8010644 <_printf_i+0x164>
 80106ec:	6823      	ldr	r3, [r4, #0]
 80106ee:	079b      	lsls	r3, r3, #30
 80106f0:	d413      	bmi.n	801071a <_printf_i+0x23a>
 80106f2:	68e0      	ldr	r0, [r4, #12]
 80106f4:	9b03      	ldr	r3, [sp, #12]
 80106f6:	4298      	cmp	r0, r3
 80106f8:	bfb8      	it	lt
 80106fa:	4618      	movlt	r0, r3
 80106fc:	e7a4      	b.n	8010648 <_printf_i+0x168>
 80106fe:	2301      	movs	r3, #1
 8010700:	4632      	mov	r2, r6
 8010702:	4649      	mov	r1, r9
 8010704:	4640      	mov	r0, r8
 8010706:	47d0      	blx	sl
 8010708:	3001      	adds	r0, #1
 801070a:	d09b      	beq.n	8010644 <_printf_i+0x164>
 801070c:	3501      	adds	r5, #1
 801070e:	68e3      	ldr	r3, [r4, #12]
 8010710:	9903      	ldr	r1, [sp, #12]
 8010712:	1a5b      	subs	r3, r3, r1
 8010714:	42ab      	cmp	r3, r5
 8010716:	dcf2      	bgt.n	80106fe <_printf_i+0x21e>
 8010718:	e7eb      	b.n	80106f2 <_printf_i+0x212>
 801071a:	2500      	movs	r5, #0
 801071c:	f104 0619 	add.w	r6, r4, #25
 8010720:	e7f5      	b.n	801070e <_printf_i+0x22e>
 8010722:	bf00      	nop
 8010724:	0801f6f5 	.word	0x0801f6f5
 8010728:	0801f706 	.word	0x0801f706

0801072c <memmove>:
 801072c:	4288      	cmp	r0, r1
 801072e:	b510      	push	{r4, lr}
 8010730:	eb01 0402 	add.w	r4, r1, r2
 8010734:	d902      	bls.n	801073c <memmove+0x10>
 8010736:	4284      	cmp	r4, r0
 8010738:	4623      	mov	r3, r4
 801073a:	d807      	bhi.n	801074c <memmove+0x20>
 801073c:	1e43      	subs	r3, r0, #1
 801073e:	42a1      	cmp	r1, r4
 8010740:	d008      	beq.n	8010754 <memmove+0x28>
 8010742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010746:	f803 2f01 	strb.w	r2, [r3, #1]!
 801074a:	e7f8      	b.n	801073e <memmove+0x12>
 801074c:	4402      	add	r2, r0
 801074e:	4601      	mov	r1, r0
 8010750:	428a      	cmp	r2, r1
 8010752:	d100      	bne.n	8010756 <memmove+0x2a>
 8010754:	bd10      	pop	{r4, pc}
 8010756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801075a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801075e:	e7f7      	b.n	8010750 <memmove+0x24>

08010760 <_realloc_r>:
 8010760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010764:	4680      	mov	r8, r0
 8010766:	4614      	mov	r4, r2
 8010768:	460e      	mov	r6, r1
 801076a:	b921      	cbnz	r1, 8010776 <_realloc_r+0x16>
 801076c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010770:	4611      	mov	r1, r2
 8010772:	f7ff bb85 	b.w	800fe80 <_malloc_r>
 8010776:	b92a      	cbnz	r2, 8010784 <_realloc_r+0x24>
 8010778:	f7ff fc9c 	bl	80100b4 <_free_r>
 801077c:	4625      	mov	r5, r4
 801077e:	4628      	mov	r0, r5
 8010780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010784:	f000 f81b 	bl	80107be <_malloc_usable_size_r>
 8010788:	4284      	cmp	r4, r0
 801078a:	4607      	mov	r7, r0
 801078c:	d802      	bhi.n	8010794 <_realloc_r+0x34>
 801078e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010792:	d812      	bhi.n	80107ba <_realloc_r+0x5a>
 8010794:	4621      	mov	r1, r4
 8010796:	4640      	mov	r0, r8
 8010798:	f7ff fb72 	bl	800fe80 <_malloc_r>
 801079c:	4605      	mov	r5, r0
 801079e:	2800      	cmp	r0, #0
 80107a0:	d0ed      	beq.n	801077e <_realloc_r+0x1e>
 80107a2:	42bc      	cmp	r4, r7
 80107a4:	4622      	mov	r2, r4
 80107a6:	4631      	mov	r1, r6
 80107a8:	bf28      	it	cs
 80107aa:	463a      	movcs	r2, r7
 80107ac:	f7ff fb32 	bl	800fe14 <memcpy>
 80107b0:	4631      	mov	r1, r6
 80107b2:	4640      	mov	r0, r8
 80107b4:	f7ff fc7e 	bl	80100b4 <_free_r>
 80107b8:	e7e1      	b.n	801077e <_realloc_r+0x1e>
 80107ba:	4635      	mov	r5, r6
 80107bc:	e7df      	b.n	801077e <_realloc_r+0x1e>

080107be <_malloc_usable_size_r>:
 80107be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107c2:	1f18      	subs	r0, r3, #4
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	bfbc      	itt	lt
 80107c8:	580b      	ldrlt	r3, [r1, r0]
 80107ca:	18c0      	addlt	r0, r0, r3
 80107cc:	4770      	bx	lr
	...

080107d0 <sin>:
 80107d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107d2:	ec53 2b10 	vmov	r2, r3, d0
 80107d6:	4828      	ldr	r0, [pc, #160]	; (8010878 <sin+0xa8>)
 80107d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80107dc:	4281      	cmp	r1, r0
 80107de:	dc07      	bgt.n	80107f0 <sin+0x20>
 80107e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010870 <sin+0xa0>
 80107e4:	2000      	movs	r0, #0
 80107e6:	b005      	add	sp, #20
 80107e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80107ec:	f001 bcc0 	b.w	8012170 <__kernel_sin>
 80107f0:	4822      	ldr	r0, [pc, #136]	; (801087c <sin+0xac>)
 80107f2:	4281      	cmp	r1, r0
 80107f4:	dd09      	ble.n	801080a <sin+0x3a>
 80107f6:	ee10 0a10 	vmov	r0, s0
 80107fa:	4619      	mov	r1, r3
 80107fc:	f7ef fd44 	bl	8000288 <__aeabi_dsub>
 8010800:	ec41 0b10 	vmov	d0, r0, r1
 8010804:	b005      	add	sp, #20
 8010806:	f85d fb04 	ldr.w	pc, [sp], #4
 801080a:	4668      	mov	r0, sp
 801080c:	f000 fdd8 	bl	80113c0 <__ieee754_rem_pio2>
 8010810:	f000 0003 	and.w	r0, r0, #3
 8010814:	2801      	cmp	r0, #1
 8010816:	d00c      	beq.n	8010832 <sin+0x62>
 8010818:	2802      	cmp	r0, #2
 801081a:	d011      	beq.n	8010840 <sin+0x70>
 801081c:	b9f0      	cbnz	r0, 801085c <sin+0x8c>
 801081e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010822:	ed9d 0b00 	vldr	d0, [sp]
 8010826:	2001      	movs	r0, #1
 8010828:	f001 fca2 	bl	8012170 <__kernel_sin>
 801082c:	ec51 0b10 	vmov	r0, r1, d0
 8010830:	e7e6      	b.n	8010800 <sin+0x30>
 8010832:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010836:	ed9d 0b00 	vldr	d0, [sp]
 801083a:	f001 f881 	bl	8011940 <__kernel_cos>
 801083e:	e7f5      	b.n	801082c <sin+0x5c>
 8010840:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010844:	ed9d 0b00 	vldr	d0, [sp]
 8010848:	2001      	movs	r0, #1
 801084a:	f001 fc91 	bl	8012170 <__kernel_sin>
 801084e:	ec53 2b10 	vmov	r2, r3, d0
 8010852:	ee10 0a10 	vmov	r0, s0
 8010856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801085a:	e7d1      	b.n	8010800 <sin+0x30>
 801085c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010860:	ed9d 0b00 	vldr	d0, [sp]
 8010864:	f001 f86c 	bl	8011940 <__kernel_cos>
 8010868:	e7f1      	b.n	801084e <sin+0x7e>
 801086a:	bf00      	nop
 801086c:	f3af 8000 	nop.w
	...
 8010878:	3fe921fb 	.word	0x3fe921fb
 801087c:	7fefffff 	.word	0x7fefffff

08010880 <pow>:
 8010880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010882:	ed2d 8b02 	vpush	{d8}
 8010886:	eeb0 8a40 	vmov.f32	s16, s0
 801088a:	eef0 8a60 	vmov.f32	s17, s1
 801088e:	ec55 4b11 	vmov	r4, r5, d1
 8010892:	f000 f865 	bl	8010960 <__ieee754_pow>
 8010896:	4622      	mov	r2, r4
 8010898:	462b      	mov	r3, r5
 801089a:	4620      	mov	r0, r4
 801089c:	4629      	mov	r1, r5
 801089e:	ec57 6b10 	vmov	r6, r7, d0
 80108a2:	f7f0 f943 	bl	8000b2c <__aeabi_dcmpun>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d13b      	bne.n	8010922 <pow+0xa2>
 80108aa:	ec51 0b18 	vmov	r0, r1, d8
 80108ae:	2200      	movs	r2, #0
 80108b0:	2300      	movs	r3, #0
 80108b2:	f7f0 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80108b6:	b1b8      	cbz	r0, 80108e8 <pow+0x68>
 80108b8:	2200      	movs	r2, #0
 80108ba:	2300      	movs	r3, #0
 80108bc:	4620      	mov	r0, r4
 80108be:	4629      	mov	r1, r5
 80108c0:	f7f0 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d146      	bne.n	8010956 <pow+0xd6>
 80108c8:	ec45 4b10 	vmov	d0, r4, r5
 80108cc:	f001 fd47 	bl	801235e <finite>
 80108d0:	b338      	cbz	r0, 8010922 <pow+0xa2>
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	4620      	mov	r0, r4
 80108d8:	4629      	mov	r1, r5
 80108da:	f7f0 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80108de:	b300      	cbz	r0, 8010922 <pow+0xa2>
 80108e0:	f7ff fa6c 	bl	800fdbc <__errno>
 80108e4:	2322      	movs	r3, #34	; 0x22
 80108e6:	e01b      	b.n	8010920 <pow+0xa0>
 80108e8:	ec47 6b10 	vmov	d0, r6, r7
 80108ec:	f001 fd37 	bl	801235e <finite>
 80108f0:	b9e0      	cbnz	r0, 801092c <pow+0xac>
 80108f2:	eeb0 0a48 	vmov.f32	s0, s16
 80108f6:	eef0 0a68 	vmov.f32	s1, s17
 80108fa:	f001 fd30 	bl	801235e <finite>
 80108fe:	b1a8      	cbz	r0, 801092c <pow+0xac>
 8010900:	ec45 4b10 	vmov	d0, r4, r5
 8010904:	f001 fd2b 	bl	801235e <finite>
 8010908:	b180      	cbz	r0, 801092c <pow+0xac>
 801090a:	4632      	mov	r2, r6
 801090c:	463b      	mov	r3, r7
 801090e:	4630      	mov	r0, r6
 8010910:	4639      	mov	r1, r7
 8010912:	f7f0 f90b 	bl	8000b2c <__aeabi_dcmpun>
 8010916:	2800      	cmp	r0, #0
 8010918:	d0e2      	beq.n	80108e0 <pow+0x60>
 801091a:	f7ff fa4f 	bl	800fdbc <__errno>
 801091e:	2321      	movs	r3, #33	; 0x21
 8010920:	6003      	str	r3, [r0, #0]
 8010922:	ecbd 8b02 	vpop	{d8}
 8010926:	ec47 6b10 	vmov	d0, r6, r7
 801092a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801092c:	2200      	movs	r2, #0
 801092e:	2300      	movs	r3, #0
 8010930:	4630      	mov	r0, r6
 8010932:	4639      	mov	r1, r7
 8010934:	f7f0 f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010938:	2800      	cmp	r0, #0
 801093a:	d0f2      	beq.n	8010922 <pow+0xa2>
 801093c:	eeb0 0a48 	vmov.f32	s0, s16
 8010940:	eef0 0a68 	vmov.f32	s1, s17
 8010944:	f001 fd0b 	bl	801235e <finite>
 8010948:	2800      	cmp	r0, #0
 801094a:	d0ea      	beq.n	8010922 <pow+0xa2>
 801094c:	ec45 4b10 	vmov	d0, r4, r5
 8010950:	f001 fd05 	bl	801235e <finite>
 8010954:	e7c3      	b.n	80108de <pow+0x5e>
 8010956:	4f01      	ldr	r7, [pc, #4]	; (801095c <pow+0xdc>)
 8010958:	2600      	movs	r6, #0
 801095a:	e7e2      	b.n	8010922 <pow+0xa2>
 801095c:	3ff00000 	.word	0x3ff00000

08010960 <__ieee754_pow>:
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	ed2d 8b06 	vpush	{d8-d10}
 8010968:	b089      	sub	sp, #36	; 0x24
 801096a:	ed8d 1b00 	vstr	d1, [sp]
 801096e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010972:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010976:	ea58 0102 	orrs.w	r1, r8, r2
 801097a:	ec57 6b10 	vmov	r6, r7, d0
 801097e:	d115      	bne.n	80109ac <__ieee754_pow+0x4c>
 8010980:	19b3      	adds	r3, r6, r6
 8010982:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010986:	4152      	adcs	r2, r2
 8010988:	4299      	cmp	r1, r3
 801098a:	4b89      	ldr	r3, [pc, #548]	; (8010bb0 <__ieee754_pow+0x250>)
 801098c:	4193      	sbcs	r3, r2
 801098e:	f080 84d2 	bcs.w	8011336 <__ieee754_pow+0x9d6>
 8010992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010996:	4630      	mov	r0, r6
 8010998:	4639      	mov	r1, r7
 801099a:	f7ef fc77 	bl	800028c <__adddf3>
 801099e:	ec41 0b10 	vmov	d0, r0, r1
 80109a2:	b009      	add	sp, #36	; 0x24
 80109a4:	ecbd 8b06 	vpop	{d8-d10}
 80109a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ac:	4b81      	ldr	r3, [pc, #516]	; (8010bb4 <__ieee754_pow+0x254>)
 80109ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80109b2:	429c      	cmp	r4, r3
 80109b4:	ee10 aa10 	vmov	sl, s0
 80109b8:	463d      	mov	r5, r7
 80109ba:	dc06      	bgt.n	80109ca <__ieee754_pow+0x6a>
 80109bc:	d101      	bne.n	80109c2 <__ieee754_pow+0x62>
 80109be:	2e00      	cmp	r6, #0
 80109c0:	d1e7      	bne.n	8010992 <__ieee754_pow+0x32>
 80109c2:	4598      	cmp	r8, r3
 80109c4:	dc01      	bgt.n	80109ca <__ieee754_pow+0x6a>
 80109c6:	d10f      	bne.n	80109e8 <__ieee754_pow+0x88>
 80109c8:	b172      	cbz	r2, 80109e8 <__ieee754_pow+0x88>
 80109ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80109ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80109d2:	ea55 050a 	orrs.w	r5, r5, sl
 80109d6:	d1dc      	bne.n	8010992 <__ieee754_pow+0x32>
 80109d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80109dc:	18db      	adds	r3, r3, r3
 80109de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80109e2:	4152      	adcs	r2, r2
 80109e4:	429d      	cmp	r5, r3
 80109e6:	e7d0      	b.n	801098a <__ieee754_pow+0x2a>
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	da3b      	bge.n	8010a64 <__ieee754_pow+0x104>
 80109ec:	4b72      	ldr	r3, [pc, #456]	; (8010bb8 <__ieee754_pow+0x258>)
 80109ee:	4598      	cmp	r8, r3
 80109f0:	dc51      	bgt.n	8010a96 <__ieee754_pow+0x136>
 80109f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80109f6:	4598      	cmp	r8, r3
 80109f8:	f340 84ac 	ble.w	8011354 <__ieee754_pow+0x9f4>
 80109fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010a00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a04:	2b14      	cmp	r3, #20
 8010a06:	dd0f      	ble.n	8010a28 <__ieee754_pow+0xc8>
 8010a08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010a0c:	fa22 f103 	lsr.w	r1, r2, r3
 8010a10:	fa01 f303 	lsl.w	r3, r1, r3
 8010a14:	4293      	cmp	r3, r2
 8010a16:	f040 849d 	bne.w	8011354 <__ieee754_pow+0x9f4>
 8010a1a:	f001 0101 	and.w	r1, r1, #1
 8010a1e:	f1c1 0302 	rsb	r3, r1, #2
 8010a22:	9304      	str	r3, [sp, #16]
 8010a24:	b182      	cbz	r2, 8010a48 <__ieee754_pow+0xe8>
 8010a26:	e05f      	b.n	8010ae8 <__ieee754_pow+0x188>
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	d15b      	bne.n	8010ae4 <__ieee754_pow+0x184>
 8010a2c:	f1c3 0314 	rsb	r3, r3, #20
 8010a30:	fa48 f103 	asr.w	r1, r8, r3
 8010a34:	fa01 f303 	lsl.w	r3, r1, r3
 8010a38:	4543      	cmp	r3, r8
 8010a3a:	f040 8488 	bne.w	801134e <__ieee754_pow+0x9ee>
 8010a3e:	f001 0101 	and.w	r1, r1, #1
 8010a42:	f1c1 0302 	rsb	r3, r1, #2
 8010a46:	9304      	str	r3, [sp, #16]
 8010a48:	4b5c      	ldr	r3, [pc, #368]	; (8010bbc <__ieee754_pow+0x25c>)
 8010a4a:	4598      	cmp	r8, r3
 8010a4c:	d132      	bne.n	8010ab4 <__ieee754_pow+0x154>
 8010a4e:	f1b9 0f00 	cmp.w	r9, #0
 8010a52:	f280 8478 	bge.w	8011346 <__ieee754_pow+0x9e6>
 8010a56:	4959      	ldr	r1, [pc, #356]	; (8010bbc <__ieee754_pow+0x25c>)
 8010a58:	4632      	mov	r2, r6
 8010a5a:	463b      	mov	r3, r7
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	f7ef fef5 	bl	800084c <__aeabi_ddiv>
 8010a62:	e79c      	b.n	801099e <__ieee754_pow+0x3e>
 8010a64:	2300      	movs	r3, #0
 8010a66:	9304      	str	r3, [sp, #16]
 8010a68:	2a00      	cmp	r2, #0
 8010a6a:	d13d      	bne.n	8010ae8 <__ieee754_pow+0x188>
 8010a6c:	4b51      	ldr	r3, [pc, #324]	; (8010bb4 <__ieee754_pow+0x254>)
 8010a6e:	4598      	cmp	r8, r3
 8010a70:	d1ea      	bne.n	8010a48 <__ieee754_pow+0xe8>
 8010a72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010a76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8010a7e:	f000 845a 	beq.w	8011336 <__ieee754_pow+0x9d6>
 8010a82:	4b4f      	ldr	r3, [pc, #316]	; (8010bc0 <__ieee754_pow+0x260>)
 8010a84:	429c      	cmp	r4, r3
 8010a86:	dd08      	ble.n	8010a9a <__ieee754_pow+0x13a>
 8010a88:	f1b9 0f00 	cmp.w	r9, #0
 8010a8c:	f2c0 8457 	blt.w	801133e <__ieee754_pow+0x9de>
 8010a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a94:	e783      	b.n	801099e <__ieee754_pow+0x3e>
 8010a96:	2302      	movs	r3, #2
 8010a98:	e7e5      	b.n	8010a66 <__ieee754_pow+0x106>
 8010a9a:	f1b9 0f00 	cmp.w	r9, #0
 8010a9e:	f04f 0000 	mov.w	r0, #0
 8010aa2:	f04f 0100 	mov.w	r1, #0
 8010aa6:	f6bf af7a 	bge.w	801099e <__ieee754_pow+0x3e>
 8010aaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010aae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ab2:	e774      	b.n	801099e <__ieee754_pow+0x3e>
 8010ab4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010ab8:	d106      	bne.n	8010ac8 <__ieee754_pow+0x168>
 8010aba:	4632      	mov	r2, r6
 8010abc:	463b      	mov	r3, r7
 8010abe:	4630      	mov	r0, r6
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	f7ef fd99 	bl	80005f8 <__aeabi_dmul>
 8010ac6:	e76a      	b.n	801099e <__ieee754_pow+0x3e>
 8010ac8:	4b3e      	ldr	r3, [pc, #248]	; (8010bc4 <__ieee754_pow+0x264>)
 8010aca:	4599      	cmp	r9, r3
 8010acc:	d10c      	bne.n	8010ae8 <__ieee754_pow+0x188>
 8010ace:	2d00      	cmp	r5, #0
 8010ad0:	db0a      	blt.n	8010ae8 <__ieee754_pow+0x188>
 8010ad2:	ec47 6b10 	vmov	d0, r6, r7
 8010ad6:	b009      	add	sp, #36	; 0x24
 8010ad8:	ecbd 8b06 	vpop	{d8-d10}
 8010adc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae0:	f000 be7a 	b.w	80117d8 <__ieee754_sqrt>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	9304      	str	r3, [sp, #16]
 8010ae8:	ec47 6b10 	vmov	d0, r6, r7
 8010aec:	f001 fc2e 	bl	801234c <fabs>
 8010af0:	ec51 0b10 	vmov	r0, r1, d0
 8010af4:	f1ba 0f00 	cmp.w	sl, #0
 8010af8:	d129      	bne.n	8010b4e <__ieee754_pow+0x1ee>
 8010afa:	b124      	cbz	r4, 8010b06 <__ieee754_pow+0x1a6>
 8010afc:	4b2f      	ldr	r3, [pc, #188]	; (8010bbc <__ieee754_pow+0x25c>)
 8010afe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d123      	bne.n	8010b4e <__ieee754_pow+0x1ee>
 8010b06:	f1b9 0f00 	cmp.w	r9, #0
 8010b0a:	da05      	bge.n	8010b18 <__ieee754_pow+0x1b8>
 8010b0c:	4602      	mov	r2, r0
 8010b0e:	460b      	mov	r3, r1
 8010b10:	2000      	movs	r0, #0
 8010b12:	492a      	ldr	r1, [pc, #168]	; (8010bbc <__ieee754_pow+0x25c>)
 8010b14:	f7ef fe9a 	bl	800084c <__aeabi_ddiv>
 8010b18:	2d00      	cmp	r5, #0
 8010b1a:	f6bf af40 	bge.w	801099e <__ieee754_pow+0x3e>
 8010b1e:	9b04      	ldr	r3, [sp, #16]
 8010b20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010b24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b28:	4323      	orrs	r3, r4
 8010b2a:	d108      	bne.n	8010b3e <__ieee754_pow+0x1de>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	4610      	mov	r0, r2
 8010b32:	4619      	mov	r1, r3
 8010b34:	f7ef fba8 	bl	8000288 <__aeabi_dsub>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	e78f      	b.n	8010a5e <__ieee754_pow+0xfe>
 8010b3e:	9b04      	ldr	r3, [sp, #16]
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	f47f af2c 	bne.w	801099e <__ieee754_pow+0x3e>
 8010b46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	e727      	b.n	801099e <__ieee754_pow+0x3e>
 8010b4e:	0feb      	lsrs	r3, r5, #31
 8010b50:	3b01      	subs	r3, #1
 8010b52:	9306      	str	r3, [sp, #24]
 8010b54:	9a06      	ldr	r2, [sp, #24]
 8010b56:	9b04      	ldr	r3, [sp, #16]
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	d102      	bne.n	8010b62 <__ieee754_pow+0x202>
 8010b5c:	4632      	mov	r2, r6
 8010b5e:	463b      	mov	r3, r7
 8010b60:	e7e6      	b.n	8010b30 <__ieee754_pow+0x1d0>
 8010b62:	4b19      	ldr	r3, [pc, #100]	; (8010bc8 <__ieee754_pow+0x268>)
 8010b64:	4598      	cmp	r8, r3
 8010b66:	f340 80fb 	ble.w	8010d60 <__ieee754_pow+0x400>
 8010b6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010b6e:	4598      	cmp	r8, r3
 8010b70:	4b13      	ldr	r3, [pc, #76]	; (8010bc0 <__ieee754_pow+0x260>)
 8010b72:	dd0c      	ble.n	8010b8e <__ieee754_pow+0x22e>
 8010b74:	429c      	cmp	r4, r3
 8010b76:	dc0f      	bgt.n	8010b98 <__ieee754_pow+0x238>
 8010b78:	f1b9 0f00 	cmp.w	r9, #0
 8010b7c:	da0f      	bge.n	8010b9e <__ieee754_pow+0x23e>
 8010b7e:	2000      	movs	r0, #0
 8010b80:	b009      	add	sp, #36	; 0x24
 8010b82:	ecbd 8b06 	vpop	{d8-d10}
 8010b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8a:	f001 bbd6 	b.w	801233a <__math_oflow>
 8010b8e:	429c      	cmp	r4, r3
 8010b90:	dbf2      	blt.n	8010b78 <__ieee754_pow+0x218>
 8010b92:	4b0a      	ldr	r3, [pc, #40]	; (8010bbc <__ieee754_pow+0x25c>)
 8010b94:	429c      	cmp	r4, r3
 8010b96:	dd19      	ble.n	8010bcc <__ieee754_pow+0x26c>
 8010b98:	f1b9 0f00 	cmp.w	r9, #0
 8010b9c:	dcef      	bgt.n	8010b7e <__ieee754_pow+0x21e>
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	b009      	add	sp, #36	; 0x24
 8010ba2:	ecbd 8b06 	vpop	{d8-d10}
 8010ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010baa:	f001 bbbd 	b.w	8012328 <__math_uflow>
 8010bae:	bf00      	nop
 8010bb0:	fff00000 	.word	0xfff00000
 8010bb4:	7ff00000 	.word	0x7ff00000
 8010bb8:	433fffff 	.word	0x433fffff
 8010bbc:	3ff00000 	.word	0x3ff00000
 8010bc0:	3fefffff 	.word	0x3fefffff
 8010bc4:	3fe00000 	.word	0x3fe00000
 8010bc8:	41e00000 	.word	0x41e00000
 8010bcc:	4b60      	ldr	r3, [pc, #384]	; (8010d50 <__ieee754_pow+0x3f0>)
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f7ef fb5a 	bl	8000288 <__aeabi_dsub>
 8010bd4:	a354      	add	r3, pc, #336	; (adr r3, 8010d28 <__ieee754_pow+0x3c8>)
 8010bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bda:	4604      	mov	r4, r0
 8010bdc:	460d      	mov	r5, r1
 8010bde:	f7ef fd0b 	bl	80005f8 <__aeabi_dmul>
 8010be2:	a353      	add	r3, pc, #332	; (adr r3, 8010d30 <__ieee754_pow+0x3d0>)
 8010be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be8:	4606      	mov	r6, r0
 8010bea:	460f      	mov	r7, r1
 8010bec:	4620      	mov	r0, r4
 8010bee:	4629      	mov	r1, r5
 8010bf0:	f7ef fd02 	bl	80005f8 <__aeabi_dmul>
 8010bf4:	4b57      	ldr	r3, [pc, #348]	; (8010d54 <__ieee754_pow+0x3f4>)
 8010bf6:	4682      	mov	sl, r0
 8010bf8:	468b      	mov	fp, r1
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	4629      	mov	r1, r5
 8010c00:	f7ef fcfa 	bl	80005f8 <__aeabi_dmul>
 8010c04:	4602      	mov	r2, r0
 8010c06:	460b      	mov	r3, r1
 8010c08:	a14b      	add	r1, pc, #300	; (adr r1, 8010d38 <__ieee754_pow+0x3d8>)
 8010c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c0e:	f7ef fb3b 	bl	8000288 <__aeabi_dsub>
 8010c12:	4622      	mov	r2, r4
 8010c14:	462b      	mov	r3, r5
 8010c16:	f7ef fcef 	bl	80005f8 <__aeabi_dmul>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	2000      	movs	r0, #0
 8010c20:	494d      	ldr	r1, [pc, #308]	; (8010d58 <__ieee754_pow+0x3f8>)
 8010c22:	f7ef fb31 	bl	8000288 <__aeabi_dsub>
 8010c26:	4622      	mov	r2, r4
 8010c28:	4680      	mov	r8, r0
 8010c2a:	4689      	mov	r9, r1
 8010c2c:	462b      	mov	r3, r5
 8010c2e:	4620      	mov	r0, r4
 8010c30:	4629      	mov	r1, r5
 8010c32:	f7ef fce1 	bl	80005f8 <__aeabi_dmul>
 8010c36:	4602      	mov	r2, r0
 8010c38:	460b      	mov	r3, r1
 8010c3a:	4640      	mov	r0, r8
 8010c3c:	4649      	mov	r1, r9
 8010c3e:	f7ef fcdb 	bl	80005f8 <__aeabi_dmul>
 8010c42:	a33f      	add	r3, pc, #252	; (adr r3, 8010d40 <__ieee754_pow+0x3e0>)
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	f7ef fcd6 	bl	80005f8 <__aeabi_dmul>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	460b      	mov	r3, r1
 8010c50:	4650      	mov	r0, sl
 8010c52:	4659      	mov	r1, fp
 8010c54:	f7ef fb18 	bl	8000288 <__aeabi_dsub>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	4680      	mov	r8, r0
 8010c5e:	4689      	mov	r9, r1
 8010c60:	4630      	mov	r0, r6
 8010c62:	4639      	mov	r1, r7
 8010c64:	f7ef fb12 	bl	800028c <__adddf3>
 8010c68:	2000      	movs	r0, #0
 8010c6a:	4632      	mov	r2, r6
 8010c6c:	463b      	mov	r3, r7
 8010c6e:	4604      	mov	r4, r0
 8010c70:	460d      	mov	r5, r1
 8010c72:	f7ef fb09 	bl	8000288 <__aeabi_dsub>
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4640      	mov	r0, r8
 8010c7c:	4649      	mov	r1, r9
 8010c7e:	f7ef fb03 	bl	8000288 <__aeabi_dsub>
 8010c82:	9b04      	ldr	r3, [sp, #16]
 8010c84:	9a06      	ldr	r2, [sp, #24]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	4682      	mov	sl, r0
 8010c8c:	468b      	mov	fp, r1
 8010c8e:	f040 81e7 	bne.w	8011060 <__ieee754_pow+0x700>
 8010c92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010d48 <__ieee754_pow+0x3e8>
 8010c96:	eeb0 8a47 	vmov.f32	s16, s14
 8010c9a:	eef0 8a67 	vmov.f32	s17, s15
 8010c9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010ca2:	2600      	movs	r6, #0
 8010ca4:	4632      	mov	r2, r6
 8010ca6:	463b      	mov	r3, r7
 8010ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cac:	f7ef faec 	bl	8000288 <__aeabi_dsub>
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	462b      	mov	r3, r5
 8010cb4:	f7ef fca0 	bl	80005f8 <__aeabi_dmul>
 8010cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cbc:	4680      	mov	r8, r0
 8010cbe:	4689      	mov	r9, r1
 8010cc0:	4650      	mov	r0, sl
 8010cc2:	4659      	mov	r1, fp
 8010cc4:	f7ef fc98 	bl	80005f8 <__aeabi_dmul>
 8010cc8:	4602      	mov	r2, r0
 8010cca:	460b      	mov	r3, r1
 8010ccc:	4640      	mov	r0, r8
 8010cce:	4649      	mov	r1, r9
 8010cd0:	f7ef fadc 	bl	800028c <__adddf3>
 8010cd4:	4632      	mov	r2, r6
 8010cd6:	463b      	mov	r3, r7
 8010cd8:	4680      	mov	r8, r0
 8010cda:	4689      	mov	r9, r1
 8010cdc:	4620      	mov	r0, r4
 8010cde:	4629      	mov	r1, r5
 8010ce0:	f7ef fc8a 	bl	80005f8 <__aeabi_dmul>
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	460d      	mov	r5, r1
 8010cea:	4602      	mov	r2, r0
 8010cec:	4649      	mov	r1, r9
 8010cee:	4640      	mov	r0, r8
 8010cf0:	f7ef facc 	bl	800028c <__adddf3>
 8010cf4:	4b19      	ldr	r3, [pc, #100]	; (8010d5c <__ieee754_pow+0x3fc>)
 8010cf6:	4299      	cmp	r1, r3
 8010cf8:	ec45 4b19 	vmov	d9, r4, r5
 8010cfc:	4606      	mov	r6, r0
 8010cfe:	460f      	mov	r7, r1
 8010d00:	468b      	mov	fp, r1
 8010d02:	f340 82f1 	ble.w	80112e8 <__ieee754_pow+0x988>
 8010d06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010d0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010d0e:	4303      	orrs	r3, r0
 8010d10:	f000 81e4 	beq.w	80110dc <__ieee754_pow+0x77c>
 8010d14:	ec51 0b18 	vmov	r0, r1, d8
 8010d18:	2200      	movs	r2, #0
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	f7ef fede 	bl	8000adc <__aeabi_dcmplt>
 8010d20:	3800      	subs	r0, #0
 8010d22:	bf18      	it	ne
 8010d24:	2001      	movne	r0, #1
 8010d26:	e72b      	b.n	8010b80 <__ieee754_pow+0x220>
 8010d28:	60000000 	.word	0x60000000
 8010d2c:	3ff71547 	.word	0x3ff71547
 8010d30:	f85ddf44 	.word	0xf85ddf44
 8010d34:	3e54ae0b 	.word	0x3e54ae0b
 8010d38:	55555555 	.word	0x55555555
 8010d3c:	3fd55555 	.word	0x3fd55555
 8010d40:	652b82fe 	.word	0x652b82fe
 8010d44:	3ff71547 	.word	0x3ff71547
 8010d48:	00000000 	.word	0x00000000
 8010d4c:	bff00000 	.word	0xbff00000
 8010d50:	3ff00000 	.word	0x3ff00000
 8010d54:	3fd00000 	.word	0x3fd00000
 8010d58:	3fe00000 	.word	0x3fe00000
 8010d5c:	408fffff 	.word	0x408fffff
 8010d60:	4bd5      	ldr	r3, [pc, #852]	; (80110b8 <__ieee754_pow+0x758>)
 8010d62:	402b      	ands	r3, r5
 8010d64:	2200      	movs	r2, #0
 8010d66:	b92b      	cbnz	r3, 8010d74 <__ieee754_pow+0x414>
 8010d68:	4bd4      	ldr	r3, [pc, #848]	; (80110bc <__ieee754_pow+0x75c>)
 8010d6a:	f7ef fc45 	bl	80005f8 <__aeabi_dmul>
 8010d6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010d72:	460c      	mov	r4, r1
 8010d74:	1523      	asrs	r3, r4, #20
 8010d76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d7a:	4413      	add	r3, r2
 8010d7c:	9305      	str	r3, [sp, #20]
 8010d7e:	4bd0      	ldr	r3, [pc, #832]	; (80110c0 <__ieee754_pow+0x760>)
 8010d80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010d84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010d88:	429c      	cmp	r4, r3
 8010d8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010d8e:	dd08      	ble.n	8010da2 <__ieee754_pow+0x442>
 8010d90:	4bcc      	ldr	r3, [pc, #816]	; (80110c4 <__ieee754_pow+0x764>)
 8010d92:	429c      	cmp	r4, r3
 8010d94:	f340 8162 	ble.w	801105c <__ieee754_pow+0x6fc>
 8010d98:	9b05      	ldr	r3, [sp, #20]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	9305      	str	r3, [sp, #20]
 8010d9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010da2:	2400      	movs	r4, #0
 8010da4:	00e3      	lsls	r3, r4, #3
 8010da6:	9307      	str	r3, [sp, #28]
 8010da8:	4bc7      	ldr	r3, [pc, #796]	; (80110c8 <__ieee754_pow+0x768>)
 8010daa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010dae:	ed93 7b00 	vldr	d7, [r3]
 8010db2:	4629      	mov	r1, r5
 8010db4:	ec53 2b17 	vmov	r2, r3, d7
 8010db8:	eeb0 9a47 	vmov.f32	s18, s14
 8010dbc:	eef0 9a67 	vmov.f32	s19, s15
 8010dc0:	4682      	mov	sl, r0
 8010dc2:	f7ef fa61 	bl	8000288 <__aeabi_dsub>
 8010dc6:	4652      	mov	r2, sl
 8010dc8:	4606      	mov	r6, r0
 8010dca:	460f      	mov	r7, r1
 8010dcc:	462b      	mov	r3, r5
 8010dce:	ec51 0b19 	vmov	r0, r1, d9
 8010dd2:	f7ef fa5b 	bl	800028c <__adddf3>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	2000      	movs	r0, #0
 8010ddc:	49bb      	ldr	r1, [pc, #748]	; (80110cc <__ieee754_pow+0x76c>)
 8010dde:	f7ef fd35 	bl	800084c <__aeabi_ddiv>
 8010de2:	ec41 0b1a 	vmov	d10, r0, r1
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	4630      	mov	r0, r6
 8010dec:	4639      	mov	r1, r7
 8010dee:	f7ef fc03 	bl	80005f8 <__aeabi_dmul>
 8010df2:	2300      	movs	r3, #0
 8010df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010df8:	9302      	str	r3, [sp, #8]
 8010dfa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010dfe:	46ab      	mov	fp, r5
 8010e00:	106d      	asrs	r5, r5, #1
 8010e02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010e06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010e0a:	ec41 0b18 	vmov	d8, r0, r1
 8010e0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010e12:	2200      	movs	r2, #0
 8010e14:	4640      	mov	r0, r8
 8010e16:	4649      	mov	r1, r9
 8010e18:	4614      	mov	r4, r2
 8010e1a:	461d      	mov	r5, r3
 8010e1c:	f7ef fbec 	bl	80005f8 <__aeabi_dmul>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	4630      	mov	r0, r6
 8010e26:	4639      	mov	r1, r7
 8010e28:	f7ef fa2e 	bl	8000288 <__aeabi_dsub>
 8010e2c:	ec53 2b19 	vmov	r2, r3, d9
 8010e30:	4606      	mov	r6, r0
 8010e32:	460f      	mov	r7, r1
 8010e34:	4620      	mov	r0, r4
 8010e36:	4629      	mov	r1, r5
 8010e38:	f7ef fa26 	bl	8000288 <__aeabi_dsub>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
 8010e40:	4650      	mov	r0, sl
 8010e42:	4659      	mov	r1, fp
 8010e44:	f7ef fa20 	bl	8000288 <__aeabi_dsub>
 8010e48:	4642      	mov	r2, r8
 8010e4a:	464b      	mov	r3, r9
 8010e4c:	f7ef fbd4 	bl	80005f8 <__aeabi_dmul>
 8010e50:	4602      	mov	r2, r0
 8010e52:	460b      	mov	r3, r1
 8010e54:	4630      	mov	r0, r6
 8010e56:	4639      	mov	r1, r7
 8010e58:	f7ef fa16 	bl	8000288 <__aeabi_dsub>
 8010e5c:	ec53 2b1a 	vmov	r2, r3, d10
 8010e60:	f7ef fbca 	bl	80005f8 <__aeabi_dmul>
 8010e64:	ec53 2b18 	vmov	r2, r3, d8
 8010e68:	ec41 0b19 	vmov	d9, r0, r1
 8010e6c:	ec51 0b18 	vmov	r0, r1, d8
 8010e70:	f7ef fbc2 	bl	80005f8 <__aeabi_dmul>
 8010e74:	a37c      	add	r3, pc, #496	; (adr r3, 8011068 <__ieee754_pow+0x708>)
 8010e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	460d      	mov	r5, r1
 8010e7e:	f7ef fbbb 	bl	80005f8 <__aeabi_dmul>
 8010e82:	a37b      	add	r3, pc, #492	; (adr r3, 8011070 <__ieee754_pow+0x710>)
 8010e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e88:	f7ef fa00 	bl	800028c <__adddf3>
 8010e8c:	4622      	mov	r2, r4
 8010e8e:	462b      	mov	r3, r5
 8010e90:	f7ef fbb2 	bl	80005f8 <__aeabi_dmul>
 8010e94:	a378      	add	r3, pc, #480	; (adr r3, 8011078 <__ieee754_pow+0x718>)
 8010e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9a:	f7ef f9f7 	bl	800028c <__adddf3>
 8010e9e:	4622      	mov	r2, r4
 8010ea0:	462b      	mov	r3, r5
 8010ea2:	f7ef fba9 	bl	80005f8 <__aeabi_dmul>
 8010ea6:	a376      	add	r3, pc, #472	; (adr r3, 8011080 <__ieee754_pow+0x720>)
 8010ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eac:	f7ef f9ee 	bl	800028c <__adddf3>
 8010eb0:	4622      	mov	r2, r4
 8010eb2:	462b      	mov	r3, r5
 8010eb4:	f7ef fba0 	bl	80005f8 <__aeabi_dmul>
 8010eb8:	a373      	add	r3, pc, #460	; (adr r3, 8011088 <__ieee754_pow+0x728>)
 8010eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebe:	f7ef f9e5 	bl	800028c <__adddf3>
 8010ec2:	4622      	mov	r2, r4
 8010ec4:	462b      	mov	r3, r5
 8010ec6:	f7ef fb97 	bl	80005f8 <__aeabi_dmul>
 8010eca:	a371      	add	r3, pc, #452	; (adr r3, 8011090 <__ieee754_pow+0x730>)
 8010ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed0:	f7ef f9dc 	bl	800028c <__adddf3>
 8010ed4:	4622      	mov	r2, r4
 8010ed6:	4606      	mov	r6, r0
 8010ed8:	460f      	mov	r7, r1
 8010eda:	462b      	mov	r3, r5
 8010edc:	4620      	mov	r0, r4
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ef fb8a 	bl	80005f8 <__aeabi_dmul>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	4630      	mov	r0, r6
 8010eea:	4639      	mov	r1, r7
 8010eec:	f7ef fb84 	bl	80005f8 <__aeabi_dmul>
 8010ef0:	4642      	mov	r2, r8
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	460d      	mov	r5, r1
 8010ef6:	464b      	mov	r3, r9
 8010ef8:	ec51 0b18 	vmov	r0, r1, d8
 8010efc:	f7ef f9c6 	bl	800028c <__adddf3>
 8010f00:	ec53 2b19 	vmov	r2, r3, d9
 8010f04:	f7ef fb78 	bl	80005f8 <__aeabi_dmul>
 8010f08:	4622      	mov	r2, r4
 8010f0a:	462b      	mov	r3, r5
 8010f0c:	f7ef f9be 	bl	800028c <__adddf3>
 8010f10:	4642      	mov	r2, r8
 8010f12:	4682      	mov	sl, r0
 8010f14:	468b      	mov	fp, r1
 8010f16:	464b      	mov	r3, r9
 8010f18:	4640      	mov	r0, r8
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	f7ef fb6c 	bl	80005f8 <__aeabi_dmul>
 8010f20:	4b6b      	ldr	r3, [pc, #428]	; (80110d0 <__ieee754_pow+0x770>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	4606      	mov	r6, r0
 8010f26:	460f      	mov	r7, r1
 8010f28:	f7ef f9b0 	bl	800028c <__adddf3>
 8010f2c:	4652      	mov	r2, sl
 8010f2e:	465b      	mov	r3, fp
 8010f30:	f7ef f9ac 	bl	800028c <__adddf3>
 8010f34:	2000      	movs	r0, #0
 8010f36:	4604      	mov	r4, r0
 8010f38:	460d      	mov	r5, r1
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	4640      	mov	r0, r8
 8010f40:	4649      	mov	r1, r9
 8010f42:	f7ef fb59 	bl	80005f8 <__aeabi_dmul>
 8010f46:	4b62      	ldr	r3, [pc, #392]	; (80110d0 <__ieee754_pow+0x770>)
 8010f48:	4680      	mov	r8, r0
 8010f4a:	4689      	mov	r9, r1
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	4620      	mov	r0, r4
 8010f50:	4629      	mov	r1, r5
 8010f52:	f7ef f999 	bl	8000288 <__aeabi_dsub>
 8010f56:	4632      	mov	r2, r6
 8010f58:	463b      	mov	r3, r7
 8010f5a:	f7ef f995 	bl	8000288 <__aeabi_dsub>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	460b      	mov	r3, r1
 8010f62:	4650      	mov	r0, sl
 8010f64:	4659      	mov	r1, fp
 8010f66:	f7ef f98f 	bl	8000288 <__aeabi_dsub>
 8010f6a:	ec53 2b18 	vmov	r2, r3, d8
 8010f6e:	f7ef fb43 	bl	80005f8 <__aeabi_dmul>
 8010f72:	4622      	mov	r2, r4
 8010f74:	4606      	mov	r6, r0
 8010f76:	460f      	mov	r7, r1
 8010f78:	462b      	mov	r3, r5
 8010f7a:	ec51 0b19 	vmov	r0, r1, d9
 8010f7e:	f7ef fb3b 	bl	80005f8 <__aeabi_dmul>
 8010f82:	4602      	mov	r2, r0
 8010f84:	460b      	mov	r3, r1
 8010f86:	4630      	mov	r0, r6
 8010f88:	4639      	mov	r1, r7
 8010f8a:	f7ef f97f 	bl	800028c <__adddf3>
 8010f8e:	4606      	mov	r6, r0
 8010f90:	460f      	mov	r7, r1
 8010f92:	4602      	mov	r2, r0
 8010f94:	460b      	mov	r3, r1
 8010f96:	4640      	mov	r0, r8
 8010f98:	4649      	mov	r1, r9
 8010f9a:	f7ef f977 	bl	800028c <__adddf3>
 8010f9e:	a33e      	add	r3, pc, #248	; (adr r3, 8011098 <__ieee754_pow+0x738>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	460d      	mov	r5, r1
 8010faa:	f7ef fb25 	bl	80005f8 <__aeabi_dmul>
 8010fae:	4642      	mov	r2, r8
 8010fb0:	ec41 0b18 	vmov	d8, r0, r1
 8010fb4:	464b      	mov	r3, r9
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	4629      	mov	r1, r5
 8010fba:	f7ef f965 	bl	8000288 <__aeabi_dsub>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	4639      	mov	r1, r7
 8010fc6:	f7ef f95f 	bl	8000288 <__aeabi_dsub>
 8010fca:	a335      	add	r3, pc, #212	; (adr r3, 80110a0 <__ieee754_pow+0x740>)
 8010fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd0:	f7ef fb12 	bl	80005f8 <__aeabi_dmul>
 8010fd4:	a334      	add	r3, pc, #208	; (adr r3, 80110a8 <__ieee754_pow+0x748>)
 8010fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fda:	4606      	mov	r6, r0
 8010fdc:	460f      	mov	r7, r1
 8010fde:	4620      	mov	r0, r4
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	f7ef fb09 	bl	80005f8 <__aeabi_dmul>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4630      	mov	r0, r6
 8010fec:	4639      	mov	r1, r7
 8010fee:	f7ef f94d 	bl	800028c <__adddf3>
 8010ff2:	9a07      	ldr	r2, [sp, #28]
 8010ff4:	4b37      	ldr	r3, [pc, #220]	; (80110d4 <__ieee754_pow+0x774>)
 8010ff6:	4413      	add	r3, r2
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	f7ef f946 	bl	800028c <__adddf3>
 8011000:	4682      	mov	sl, r0
 8011002:	9805      	ldr	r0, [sp, #20]
 8011004:	468b      	mov	fp, r1
 8011006:	f7ef fa8d 	bl	8000524 <__aeabi_i2d>
 801100a:	9a07      	ldr	r2, [sp, #28]
 801100c:	4b32      	ldr	r3, [pc, #200]	; (80110d8 <__ieee754_pow+0x778>)
 801100e:	4413      	add	r3, r2
 8011010:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011014:	4606      	mov	r6, r0
 8011016:	460f      	mov	r7, r1
 8011018:	4652      	mov	r2, sl
 801101a:	465b      	mov	r3, fp
 801101c:	ec51 0b18 	vmov	r0, r1, d8
 8011020:	f7ef f934 	bl	800028c <__adddf3>
 8011024:	4642      	mov	r2, r8
 8011026:	464b      	mov	r3, r9
 8011028:	f7ef f930 	bl	800028c <__adddf3>
 801102c:	4632      	mov	r2, r6
 801102e:	463b      	mov	r3, r7
 8011030:	f7ef f92c 	bl	800028c <__adddf3>
 8011034:	2000      	movs	r0, #0
 8011036:	4632      	mov	r2, r6
 8011038:	463b      	mov	r3, r7
 801103a:	4604      	mov	r4, r0
 801103c:	460d      	mov	r5, r1
 801103e:	f7ef f923 	bl	8000288 <__aeabi_dsub>
 8011042:	4642      	mov	r2, r8
 8011044:	464b      	mov	r3, r9
 8011046:	f7ef f91f 	bl	8000288 <__aeabi_dsub>
 801104a:	ec53 2b18 	vmov	r2, r3, d8
 801104e:	f7ef f91b 	bl	8000288 <__aeabi_dsub>
 8011052:	4602      	mov	r2, r0
 8011054:	460b      	mov	r3, r1
 8011056:	4650      	mov	r0, sl
 8011058:	4659      	mov	r1, fp
 801105a:	e610      	b.n	8010c7e <__ieee754_pow+0x31e>
 801105c:	2401      	movs	r4, #1
 801105e:	e6a1      	b.n	8010da4 <__ieee754_pow+0x444>
 8011060:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80110b0 <__ieee754_pow+0x750>
 8011064:	e617      	b.n	8010c96 <__ieee754_pow+0x336>
 8011066:	bf00      	nop
 8011068:	4a454eef 	.word	0x4a454eef
 801106c:	3fca7e28 	.word	0x3fca7e28
 8011070:	93c9db65 	.word	0x93c9db65
 8011074:	3fcd864a 	.word	0x3fcd864a
 8011078:	a91d4101 	.word	0xa91d4101
 801107c:	3fd17460 	.word	0x3fd17460
 8011080:	518f264d 	.word	0x518f264d
 8011084:	3fd55555 	.word	0x3fd55555
 8011088:	db6fabff 	.word	0xdb6fabff
 801108c:	3fdb6db6 	.word	0x3fdb6db6
 8011090:	33333303 	.word	0x33333303
 8011094:	3fe33333 	.word	0x3fe33333
 8011098:	e0000000 	.word	0xe0000000
 801109c:	3feec709 	.word	0x3feec709
 80110a0:	dc3a03fd 	.word	0xdc3a03fd
 80110a4:	3feec709 	.word	0x3feec709
 80110a8:	145b01f5 	.word	0x145b01f5
 80110ac:	be3e2fe0 	.word	0xbe3e2fe0
 80110b0:	00000000 	.word	0x00000000
 80110b4:	3ff00000 	.word	0x3ff00000
 80110b8:	7ff00000 	.word	0x7ff00000
 80110bc:	43400000 	.word	0x43400000
 80110c0:	0003988e 	.word	0x0003988e
 80110c4:	000bb679 	.word	0x000bb679
 80110c8:	0801f718 	.word	0x0801f718
 80110cc:	3ff00000 	.word	0x3ff00000
 80110d0:	40080000 	.word	0x40080000
 80110d4:	0801f738 	.word	0x0801f738
 80110d8:	0801f728 	.word	0x0801f728
 80110dc:	a3b5      	add	r3, pc, #724	; (adr r3, 80113b4 <__ieee754_pow+0xa54>)
 80110de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e2:	4640      	mov	r0, r8
 80110e4:	4649      	mov	r1, r9
 80110e6:	f7ef f8d1 	bl	800028c <__adddf3>
 80110ea:	4622      	mov	r2, r4
 80110ec:	ec41 0b1a 	vmov	d10, r0, r1
 80110f0:	462b      	mov	r3, r5
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef f8c7 	bl	8000288 <__aeabi_dsub>
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	ec51 0b1a 	vmov	r0, r1, d10
 8011102:	f7ef fd09 	bl	8000b18 <__aeabi_dcmpgt>
 8011106:	2800      	cmp	r0, #0
 8011108:	f47f ae04 	bne.w	8010d14 <__ieee754_pow+0x3b4>
 801110c:	4aa4      	ldr	r2, [pc, #656]	; (80113a0 <__ieee754_pow+0xa40>)
 801110e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011112:	4293      	cmp	r3, r2
 8011114:	f340 8108 	ble.w	8011328 <__ieee754_pow+0x9c8>
 8011118:	151b      	asrs	r3, r3, #20
 801111a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801111e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011122:	fa4a f303 	asr.w	r3, sl, r3
 8011126:	445b      	add	r3, fp
 8011128:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801112c:	4e9d      	ldr	r6, [pc, #628]	; (80113a4 <__ieee754_pow+0xa44>)
 801112e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011132:	4116      	asrs	r6, r2
 8011134:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011138:	2000      	movs	r0, #0
 801113a:	ea23 0106 	bic.w	r1, r3, r6
 801113e:	f1c2 0214 	rsb	r2, r2, #20
 8011142:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011146:	fa4a fa02 	asr.w	sl, sl, r2
 801114a:	f1bb 0f00 	cmp.w	fp, #0
 801114e:	4602      	mov	r2, r0
 8011150:	460b      	mov	r3, r1
 8011152:	4620      	mov	r0, r4
 8011154:	4629      	mov	r1, r5
 8011156:	bfb8      	it	lt
 8011158:	f1ca 0a00 	rsblt	sl, sl, #0
 801115c:	f7ef f894 	bl	8000288 <__aeabi_dsub>
 8011160:	ec41 0b19 	vmov	d9, r0, r1
 8011164:	4642      	mov	r2, r8
 8011166:	464b      	mov	r3, r9
 8011168:	ec51 0b19 	vmov	r0, r1, d9
 801116c:	f7ef f88e 	bl	800028c <__adddf3>
 8011170:	a37b      	add	r3, pc, #492	; (adr r3, 8011360 <__ieee754_pow+0xa00>)
 8011172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011176:	2000      	movs	r0, #0
 8011178:	4604      	mov	r4, r0
 801117a:	460d      	mov	r5, r1
 801117c:	f7ef fa3c 	bl	80005f8 <__aeabi_dmul>
 8011180:	ec53 2b19 	vmov	r2, r3, d9
 8011184:	4606      	mov	r6, r0
 8011186:	460f      	mov	r7, r1
 8011188:	4620      	mov	r0, r4
 801118a:	4629      	mov	r1, r5
 801118c:	f7ef f87c 	bl	8000288 <__aeabi_dsub>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	4640      	mov	r0, r8
 8011196:	4649      	mov	r1, r9
 8011198:	f7ef f876 	bl	8000288 <__aeabi_dsub>
 801119c:	a372      	add	r3, pc, #456	; (adr r3, 8011368 <__ieee754_pow+0xa08>)
 801119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a2:	f7ef fa29 	bl	80005f8 <__aeabi_dmul>
 80111a6:	a372      	add	r3, pc, #456	; (adr r3, 8011370 <__ieee754_pow+0xa10>)
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	4680      	mov	r8, r0
 80111ae:	4689      	mov	r9, r1
 80111b0:	4620      	mov	r0, r4
 80111b2:	4629      	mov	r1, r5
 80111b4:	f7ef fa20 	bl	80005f8 <__aeabi_dmul>
 80111b8:	4602      	mov	r2, r0
 80111ba:	460b      	mov	r3, r1
 80111bc:	4640      	mov	r0, r8
 80111be:	4649      	mov	r1, r9
 80111c0:	f7ef f864 	bl	800028c <__adddf3>
 80111c4:	4604      	mov	r4, r0
 80111c6:	460d      	mov	r5, r1
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	4630      	mov	r0, r6
 80111ce:	4639      	mov	r1, r7
 80111d0:	f7ef f85c 	bl	800028c <__adddf3>
 80111d4:	4632      	mov	r2, r6
 80111d6:	463b      	mov	r3, r7
 80111d8:	4680      	mov	r8, r0
 80111da:	4689      	mov	r9, r1
 80111dc:	f7ef f854 	bl	8000288 <__aeabi_dsub>
 80111e0:	4602      	mov	r2, r0
 80111e2:	460b      	mov	r3, r1
 80111e4:	4620      	mov	r0, r4
 80111e6:	4629      	mov	r1, r5
 80111e8:	f7ef f84e 	bl	8000288 <__aeabi_dsub>
 80111ec:	4642      	mov	r2, r8
 80111ee:	4606      	mov	r6, r0
 80111f0:	460f      	mov	r7, r1
 80111f2:	464b      	mov	r3, r9
 80111f4:	4640      	mov	r0, r8
 80111f6:	4649      	mov	r1, r9
 80111f8:	f7ef f9fe 	bl	80005f8 <__aeabi_dmul>
 80111fc:	a35e      	add	r3, pc, #376	; (adr r3, 8011378 <__ieee754_pow+0xa18>)
 80111fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011202:	4604      	mov	r4, r0
 8011204:	460d      	mov	r5, r1
 8011206:	f7ef f9f7 	bl	80005f8 <__aeabi_dmul>
 801120a:	a35d      	add	r3, pc, #372	; (adr r3, 8011380 <__ieee754_pow+0xa20>)
 801120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011210:	f7ef f83a 	bl	8000288 <__aeabi_dsub>
 8011214:	4622      	mov	r2, r4
 8011216:	462b      	mov	r3, r5
 8011218:	f7ef f9ee 	bl	80005f8 <__aeabi_dmul>
 801121c:	a35a      	add	r3, pc, #360	; (adr r3, 8011388 <__ieee754_pow+0xa28>)
 801121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011222:	f7ef f833 	bl	800028c <__adddf3>
 8011226:	4622      	mov	r2, r4
 8011228:	462b      	mov	r3, r5
 801122a:	f7ef f9e5 	bl	80005f8 <__aeabi_dmul>
 801122e:	a358      	add	r3, pc, #352	; (adr r3, 8011390 <__ieee754_pow+0xa30>)
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	f7ef f828 	bl	8000288 <__aeabi_dsub>
 8011238:	4622      	mov	r2, r4
 801123a:	462b      	mov	r3, r5
 801123c:	f7ef f9dc 	bl	80005f8 <__aeabi_dmul>
 8011240:	a355      	add	r3, pc, #340	; (adr r3, 8011398 <__ieee754_pow+0xa38>)
 8011242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011246:	f7ef f821 	bl	800028c <__adddf3>
 801124a:	4622      	mov	r2, r4
 801124c:	462b      	mov	r3, r5
 801124e:	f7ef f9d3 	bl	80005f8 <__aeabi_dmul>
 8011252:	4602      	mov	r2, r0
 8011254:	460b      	mov	r3, r1
 8011256:	4640      	mov	r0, r8
 8011258:	4649      	mov	r1, r9
 801125a:	f7ef f815 	bl	8000288 <__aeabi_dsub>
 801125e:	4604      	mov	r4, r0
 8011260:	460d      	mov	r5, r1
 8011262:	4602      	mov	r2, r0
 8011264:	460b      	mov	r3, r1
 8011266:	4640      	mov	r0, r8
 8011268:	4649      	mov	r1, r9
 801126a:	f7ef f9c5 	bl	80005f8 <__aeabi_dmul>
 801126e:	2200      	movs	r2, #0
 8011270:	ec41 0b19 	vmov	d9, r0, r1
 8011274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011278:	4620      	mov	r0, r4
 801127a:	4629      	mov	r1, r5
 801127c:	f7ef f804 	bl	8000288 <__aeabi_dsub>
 8011280:	4602      	mov	r2, r0
 8011282:	460b      	mov	r3, r1
 8011284:	ec51 0b19 	vmov	r0, r1, d9
 8011288:	f7ef fae0 	bl	800084c <__aeabi_ddiv>
 801128c:	4632      	mov	r2, r6
 801128e:	4604      	mov	r4, r0
 8011290:	460d      	mov	r5, r1
 8011292:	463b      	mov	r3, r7
 8011294:	4640      	mov	r0, r8
 8011296:	4649      	mov	r1, r9
 8011298:	f7ef f9ae 	bl	80005f8 <__aeabi_dmul>
 801129c:	4632      	mov	r2, r6
 801129e:	463b      	mov	r3, r7
 80112a0:	f7ee fff4 	bl	800028c <__adddf3>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	4620      	mov	r0, r4
 80112aa:	4629      	mov	r1, r5
 80112ac:	f7ee ffec 	bl	8000288 <__aeabi_dsub>
 80112b0:	4642      	mov	r2, r8
 80112b2:	464b      	mov	r3, r9
 80112b4:	f7ee ffe8 	bl	8000288 <__aeabi_dsub>
 80112b8:	460b      	mov	r3, r1
 80112ba:	4602      	mov	r2, r0
 80112bc:	493a      	ldr	r1, [pc, #232]	; (80113a8 <__ieee754_pow+0xa48>)
 80112be:	2000      	movs	r0, #0
 80112c0:	f7ee ffe2 	bl	8000288 <__aeabi_dsub>
 80112c4:	ec41 0b10 	vmov	d0, r0, r1
 80112c8:	ee10 3a90 	vmov	r3, s1
 80112cc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80112d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112d4:	da2b      	bge.n	801132e <__ieee754_pow+0x9ce>
 80112d6:	4650      	mov	r0, sl
 80112d8:	f001 f8ce 	bl	8012478 <scalbn>
 80112dc:	ec51 0b10 	vmov	r0, r1, d0
 80112e0:	ec53 2b18 	vmov	r2, r3, d8
 80112e4:	f7ff bbed 	b.w	8010ac2 <__ieee754_pow+0x162>
 80112e8:	4b30      	ldr	r3, [pc, #192]	; (80113ac <__ieee754_pow+0xa4c>)
 80112ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80112ee:	429e      	cmp	r6, r3
 80112f0:	f77f af0c 	ble.w	801110c <__ieee754_pow+0x7ac>
 80112f4:	4b2e      	ldr	r3, [pc, #184]	; (80113b0 <__ieee754_pow+0xa50>)
 80112f6:	440b      	add	r3, r1
 80112f8:	4303      	orrs	r3, r0
 80112fa:	d009      	beq.n	8011310 <__ieee754_pow+0x9b0>
 80112fc:	ec51 0b18 	vmov	r0, r1, d8
 8011300:	2200      	movs	r2, #0
 8011302:	2300      	movs	r3, #0
 8011304:	f7ef fbea 	bl	8000adc <__aeabi_dcmplt>
 8011308:	3800      	subs	r0, #0
 801130a:	bf18      	it	ne
 801130c:	2001      	movne	r0, #1
 801130e:	e447      	b.n	8010ba0 <__ieee754_pow+0x240>
 8011310:	4622      	mov	r2, r4
 8011312:	462b      	mov	r3, r5
 8011314:	f7ee ffb8 	bl	8000288 <__aeabi_dsub>
 8011318:	4642      	mov	r2, r8
 801131a:	464b      	mov	r3, r9
 801131c:	f7ef fbf2 	bl	8000b04 <__aeabi_dcmpge>
 8011320:	2800      	cmp	r0, #0
 8011322:	f43f aef3 	beq.w	801110c <__ieee754_pow+0x7ac>
 8011326:	e7e9      	b.n	80112fc <__ieee754_pow+0x99c>
 8011328:	f04f 0a00 	mov.w	sl, #0
 801132c:	e71a      	b.n	8011164 <__ieee754_pow+0x804>
 801132e:	ec51 0b10 	vmov	r0, r1, d0
 8011332:	4619      	mov	r1, r3
 8011334:	e7d4      	b.n	80112e0 <__ieee754_pow+0x980>
 8011336:	491c      	ldr	r1, [pc, #112]	; (80113a8 <__ieee754_pow+0xa48>)
 8011338:	2000      	movs	r0, #0
 801133a:	f7ff bb30 	b.w	801099e <__ieee754_pow+0x3e>
 801133e:	2000      	movs	r0, #0
 8011340:	2100      	movs	r1, #0
 8011342:	f7ff bb2c 	b.w	801099e <__ieee754_pow+0x3e>
 8011346:	4630      	mov	r0, r6
 8011348:	4639      	mov	r1, r7
 801134a:	f7ff bb28 	b.w	801099e <__ieee754_pow+0x3e>
 801134e:	9204      	str	r2, [sp, #16]
 8011350:	f7ff bb7a 	b.w	8010a48 <__ieee754_pow+0xe8>
 8011354:	2300      	movs	r3, #0
 8011356:	f7ff bb64 	b.w	8010a22 <__ieee754_pow+0xc2>
 801135a:	bf00      	nop
 801135c:	f3af 8000 	nop.w
 8011360:	00000000 	.word	0x00000000
 8011364:	3fe62e43 	.word	0x3fe62e43
 8011368:	fefa39ef 	.word	0xfefa39ef
 801136c:	3fe62e42 	.word	0x3fe62e42
 8011370:	0ca86c39 	.word	0x0ca86c39
 8011374:	be205c61 	.word	0xbe205c61
 8011378:	72bea4d0 	.word	0x72bea4d0
 801137c:	3e663769 	.word	0x3e663769
 8011380:	c5d26bf1 	.word	0xc5d26bf1
 8011384:	3ebbbd41 	.word	0x3ebbbd41
 8011388:	af25de2c 	.word	0xaf25de2c
 801138c:	3f11566a 	.word	0x3f11566a
 8011390:	16bebd93 	.word	0x16bebd93
 8011394:	3f66c16c 	.word	0x3f66c16c
 8011398:	5555553e 	.word	0x5555553e
 801139c:	3fc55555 	.word	0x3fc55555
 80113a0:	3fe00000 	.word	0x3fe00000
 80113a4:	000fffff 	.word	0x000fffff
 80113a8:	3ff00000 	.word	0x3ff00000
 80113ac:	4090cbff 	.word	0x4090cbff
 80113b0:	3f6f3400 	.word	0x3f6f3400
 80113b4:	652b82fe 	.word	0x652b82fe
 80113b8:	3c971547 	.word	0x3c971547
 80113bc:	00000000 	.word	0x00000000

080113c0 <__ieee754_rem_pio2>:
 80113c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c4:	ed2d 8b02 	vpush	{d8}
 80113c8:	ec55 4b10 	vmov	r4, r5, d0
 80113cc:	4bca      	ldr	r3, [pc, #808]	; (80116f8 <__ieee754_rem_pio2+0x338>)
 80113ce:	b08b      	sub	sp, #44	; 0x2c
 80113d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80113d4:	4598      	cmp	r8, r3
 80113d6:	4682      	mov	sl, r0
 80113d8:	9502      	str	r5, [sp, #8]
 80113da:	dc08      	bgt.n	80113ee <__ieee754_rem_pio2+0x2e>
 80113dc:	2200      	movs	r2, #0
 80113de:	2300      	movs	r3, #0
 80113e0:	ed80 0b00 	vstr	d0, [r0]
 80113e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80113e8:	f04f 0b00 	mov.w	fp, #0
 80113ec:	e028      	b.n	8011440 <__ieee754_rem_pio2+0x80>
 80113ee:	4bc3      	ldr	r3, [pc, #780]	; (80116fc <__ieee754_rem_pio2+0x33c>)
 80113f0:	4598      	cmp	r8, r3
 80113f2:	dc78      	bgt.n	80114e6 <__ieee754_rem_pio2+0x126>
 80113f4:	9b02      	ldr	r3, [sp, #8]
 80113f6:	4ec2      	ldr	r6, [pc, #776]	; (8011700 <__ieee754_rem_pio2+0x340>)
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	ee10 0a10 	vmov	r0, s0
 80113fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80116c0 <__ieee754_rem_pio2+0x300>)
 8011400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011404:	4629      	mov	r1, r5
 8011406:	dd39      	ble.n	801147c <__ieee754_rem_pio2+0xbc>
 8011408:	f7ee ff3e 	bl	8000288 <__aeabi_dsub>
 801140c:	45b0      	cmp	r8, r6
 801140e:	4604      	mov	r4, r0
 8011410:	460d      	mov	r5, r1
 8011412:	d01b      	beq.n	801144c <__ieee754_rem_pio2+0x8c>
 8011414:	a3ac      	add	r3, pc, #688	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x308>)
 8011416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141a:	f7ee ff35 	bl	8000288 <__aeabi_dsub>
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	e9ca 2300 	strd	r2, r3, [sl]
 8011426:	4620      	mov	r0, r4
 8011428:	4629      	mov	r1, r5
 801142a:	f7ee ff2d 	bl	8000288 <__aeabi_dsub>
 801142e:	a3a6      	add	r3, pc, #664	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x308>)
 8011430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011434:	f7ee ff28 	bl	8000288 <__aeabi_dsub>
 8011438:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801143c:	f04f 0b01 	mov.w	fp, #1
 8011440:	4658      	mov	r0, fp
 8011442:	b00b      	add	sp, #44	; 0x2c
 8011444:	ecbd 8b02 	vpop	{d8}
 8011448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801144c:	a3a0      	add	r3, pc, #640	; (adr r3, 80116d0 <__ieee754_rem_pio2+0x310>)
 801144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011452:	f7ee ff19 	bl	8000288 <__aeabi_dsub>
 8011456:	a3a0      	add	r3, pc, #640	; (adr r3, 80116d8 <__ieee754_rem_pio2+0x318>)
 8011458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145c:	4604      	mov	r4, r0
 801145e:	460d      	mov	r5, r1
 8011460:	f7ee ff12 	bl	8000288 <__aeabi_dsub>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	e9ca 2300 	strd	r2, r3, [sl]
 801146c:	4620      	mov	r0, r4
 801146e:	4629      	mov	r1, r5
 8011470:	f7ee ff0a 	bl	8000288 <__aeabi_dsub>
 8011474:	a398      	add	r3, pc, #608	; (adr r3, 80116d8 <__ieee754_rem_pio2+0x318>)
 8011476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147a:	e7db      	b.n	8011434 <__ieee754_rem_pio2+0x74>
 801147c:	f7ee ff06 	bl	800028c <__adddf3>
 8011480:	45b0      	cmp	r8, r6
 8011482:	4604      	mov	r4, r0
 8011484:	460d      	mov	r5, r1
 8011486:	d016      	beq.n	80114b6 <__ieee754_rem_pio2+0xf6>
 8011488:	a38f      	add	r3, pc, #572	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x308>)
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	f7ee fefd 	bl	800028c <__adddf3>
 8011492:	4602      	mov	r2, r0
 8011494:	460b      	mov	r3, r1
 8011496:	e9ca 2300 	strd	r2, r3, [sl]
 801149a:	4620      	mov	r0, r4
 801149c:	4629      	mov	r1, r5
 801149e:	f7ee fef3 	bl	8000288 <__aeabi_dsub>
 80114a2:	a389      	add	r3, pc, #548	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x308>)
 80114a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a8:	f7ee fef0 	bl	800028c <__adddf3>
 80114ac:	f04f 3bff 	mov.w	fp, #4294967295
 80114b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80114b4:	e7c4      	b.n	8011440 <__ieee754_rem_pio2+0x80>
 80114b6:	a386      	add	r3, pc, #536	; (adr r3, 80116d0 <__ieee754_rem_pio2+0x310>)
 80114b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114bc:	f7ee fee6 	bl	800028c <__adddf3>
 80114c0:	a385      	add	r3, pc, #532	; (adr r3, 80116d8 <__ieee754_rem_pio2+0x318>)
 80114c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c6:	4604      	mov	r4, r0
 80114c8:	460d      	mov	r5, r1
 80114ca:	f7ee fedf 	bl	800028c <__adddf3>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	e9ca 2300 	strd	r2, r3, [sl]
 80114d6:	4620      	mov	r0, r4
 80114d8:	4629      	mov	r1, r5
 80114da:	f7ee fed5 	bl	8000288 <__aeabi_dsub>
 80114de:	a37e      	add	r3, pc, #504	; (adr r3, 80116d8 <__ieee754_rem_pio2+0x318>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	e7e0      	b.n	80114a8 <__ieee754_rem_pio2+0xe8>
 80114e6:	4b87      	ldr	r3, [pc, #540]	; (8011704 <__ieee754_rem_pio2+0x344>)
 80114e8:	4598      	cmp	r8, r3
 80114ea:	f300 80d9 	bgt.w	80116a0 <__ieee754_rem_pio2+0x2e0>
 80114ee:	f000 ff2d 	bl	801234c <fabs>
 80114f2:	ec55 4b10 	vmov	r4, r5, d0
 80114f6:	ee10 0a10 	vmov	r0, s0
 80114fa:	a379      	add	r3, pc, #484	; (adr r3, 80116e0 <__ieee754_rem_pio2+0x320>)
 80114fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011500:	4629      	mov	r1, r5
 8011502:	f7ef f879 	bl	80005f8 <__aeabi_dmul>
 8011506:	4b80      	ldr	r3, [pc, #512]	; (8011708 <__ieee754_rem_pio2+0x348>)
 8011508:	2200      	movs	r2, #0
 801150a:	f7ee febf 	bl	800028c <__adddf3>
 801150e:	f7ef fb23 	bl	8000b58 <__aeabi_d2iz>
 8011512:	4683      	mov	fp, r0
 8011514:	f7ef f806 	bl	8000524 <__aeabi_i2d>
 8011518:	4602      	mov	r2, r0
 801151a:	460b      	mov	r3, r1
 801151c:	ec43 2b18 	vmov	d8, r2, r3
 8011520:	a367      	add	r3, pc, #412	; (adr r3, 80116c0 <__ieee754_rem_pio2+0x300>)
 8011522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011526:	f7ef f867 	bl	80005f8 <__aeabi_dmul>
 801152a:	4602      	mov	r2, r0
 801152c:	460b      	mov	r3, r1
 801152e:	4620      	mov	r0, r4
 8011530:	4629      	mov	r1, r5
 8011532:	f7ee fea9 	bl	8000288 <__aeabi_dsub>
 8011536:	a364      	add	r3, pc, #400	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x308>)
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	4606      	mov	r6, r0
 801153e:	460f      	mov	r7, r1
 8011540:	ec51 0b18 	vmov	r0, r1, d8
 8011544:	f7ef f858 	bl	80005f8 <__aeabi_dmul>
 8011548:	f1bb 0f1f 	cmp.w	fp, #31
 801154c:	4604      	mov	r4, r0
 801154e:	460d      	mov	r5, r1
 8011550:	dc0d      	bgt.n	801156e <__ieee754_rem_pio2+0x1ae>
 8011552:	4b6e      	ldr	r3, [pc, #440]	; (801170c <__ieee754_rem_pio2+0x34c>)
 8011554:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801155c:	4543      	cmp	r3, r8
 801155e:	d006      	beq.n	801156e <__ieee754_rem_pio2+0x1ae>
 8011560:	4622      	mov	r2, r4
 8011562:	462b      	mov	r3, r5
 8011564:	4630      	mov	r0, r6
 8011566:	4639      	mov	r1, r7
 8011568:	f7ee fe8e 	bl	8000288 <__aeabi_dsub>
 801156c:	e00f      	b.n	801158e <__ieee754_rem_pio2+0x1ce>
 801156e:	462b      	mov	r3, r5
 8011570:	4622      	mov	r2, r4
 8011572:	4630      	mov	r0, r6
 8011574:	4639      	mov	r1, r7
 8011576:	f7ee fe87 	bl	8000288 <__aeabi_dsub>
 801157a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801157e:	9303      	str	r3, [sp, #12]
 8011580:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011584:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011588:	f1b8 0f10 	cmp.w	r8, #16
 801158c:	dc02      	bgt.n	8011594 <__ieee754_rem_pio2+0x1d4>
 801158e:	e9ca 0100 	strd	r0, r1, [sl]
 8011592:	e039      	b.n	8011608 <__ieee754_rem_pio2+0x248>
 8011594:	a34e      	add	r3, pc, #312	; (adr r3, 80116d0 <__ieee754_rem_pio2+0x310>)
 8011596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159a:	ec51 0b18 	vmov	r0, r1, d8
 801159e:	f7ef f82b 	bl	80005f8 <__aeabi_dmul>
 80115a2:	4604      	mov	r4, r0
 80115a4:	460d      	mov	r5, r1
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	4630      	mov	r0, r6
 80115ac:	4639      	mov	r1, r7
 80115ae:	f7ee fe6b 	bl	8000288 <__aeabi_dsub>
 80115b2:	4602      	mov	r2, r0
 80115b4:	460b      	mov	r3, r1
 80115b6:	4680      	mov	r8, r0
 80115b8:	4689      	mov	r9, r1
 80115ba:	4630      	mov	r0, r6
 80115bc:	4639      	mov	r1, r7
 80115be:	f7ee fe63 	bl	8000288 <__aeabi_dsub>
 80115c2:	4622      	mov	r2, r4
 80115c4:	462b      	mov	r3, r5
 80115c6:	f7ee fe5f 	bl	8000288 <__aeabi_dsub>
 80115ca:	a343      	add	r3, pc, #268	; (adr r3, 80116d8 <__ieee754_rem_pio2+0x318>)
 80115cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d0:	4604      	mov	r4, r0
 80115d2:	460d      	mov	r5, r1
 80115d4:	ec51 0b18 	vmov	r0, r1, d8
 80115d8:	f7ef f80e 	bl	80005f8 <__aeabi_dmul>
 80115dc:	4622      	mov	r2, r4
 80115de:	462b      	mov	r3, r5
 80115e0:	f7ee fe52 	bl	8000288 <__aeabi_dsub>
 80115e4:	4602      	mov	r2, r0
 80115e6:	460b      	mov	r3, r1
 80115e8:	4604      	mov	r4, r0
 80115ea:	460d      	mov	r5, r1
 80115ec:	4640      	mov	r0, r8
 80115ee:	4649      	mov	r1, r9
 80115f0:	f7ee fe4a 	bl	8000288 <__aeabi_dsub>
 80115f4:	9a03      	ldr	r2, [sp, #12]
 80115f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	2b31      	cmp	r3, #49	; 0x31
 80115fe:	dc24      	bgt.n	801164a <__ieee754_rem_pio2+0x28a>
 8011600:	e9ca 0100 	strd	r0, r1, [sl]
 8011604:	4646      	mov	r6, r8
 8011606:	464f      	mov	r7, r9
 8011608:	e9da 8900 	ldrd	r8, r9, [sl]
 801160c:	4630      	mov	r0, r6
 801160e:	4642      	mov	r2, r8
 8011610:	464b      	mov	r3, r9
 8011612:	4639      	mov	r1, r7
 8011614:	f7ee fe38 	bl	8000288 <__aeabi_dsub>
 8011618:	462b      	mov	r3, r5
 801161a:	4622      	mov	r2, r4
 801161c:	f7ee fe34 	bl	8000288 <__aeabi_dsub>
 8011620:	9b02      	ldr	r3, [sp, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011628:	f6bf af0a 	bge.w	8011440 <__ieee754_rem_pio2+0x80>
 801162c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011630:	f8ca 3004 	str.w	r3, [sl, #4]
 8011634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011638:	f8ca 8000 	str.w	r8, [sl]
 801163c:	f8ca 0008 	str.w	r0, [sl, #8]
 8011640:	f8ca 300c 	str.w	r3, [sl, #12]
 8011644:	f1cb 0b00 	rsb	fp, fp, #0
 8011648:	e6fa      	b.n	8011440 <__ieee754_rem_pio2+0x80>
 801164a:	a327      	add	r3, pc, #156	; (adr r3, 80116e8 <__ieee754_rem_pio2+0x328>)
 801164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011650:	ec51 0b18 	vmov	r0, r1, d8
 8011654:	f7ee ffd0 	bl	80005f8 <__aeabi_dmul>
 8011658:	4604      	mov	r4, r0
 801165a:	460d      	mov	r5, r1
 801165c:	4602      	mov	r2, r0
 801165e:	460b      	mov	r3, r1
 8011660:	4640      	mov	r0, r8
 8011662:	4649      	mov	r1, r9
 8011664:	f7ee fe10 	bl	8000288 <__aeabi_dsub>
 8011668:	4602      	mov	r2, r0
 801166a:	460b      	mov	r3, r1
 801166c:	4606      	mov	r6, r0
 801166e:	460f      	mov	r7, r1
 8011670:	4640      	mov	r0, r8
 8011672:	4649      	mov	r1, r9
 8011674:	f7ee fe08 	bl	8000288 <__aeabi_dsub>
 8011678:	4622      	mov	r2, r4
 801167a:	462b      	mov	r3, r5
 801167c:	f7ee fe04 	bl	8000288 <__aeabi_dsub>
 8011680:	a31b      	add	r3, pc, #108	; (adr r3, 80116f0 <__ieee754_rem_pio2+0x330>)
 8011682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011686:	4604      	mov	r4, r0
 8011688:	460d      	mov	r5, r1
 801168a:	ec51 0b18 	vmov	r0, r1, d8
 801168e:	f7ee ffb3 	bl	80005f8 <__aeabi_dmul>
 8011692:	4622      	mov	r2, r4
 8011694:	462b      	mov	r3, r5
 8011696:	f7ee fdf7 	bl	8000288 <__aeabi_dsub>
 801169a:	4604      	mov	r4, r0
 801169c:	460d      	mov	r5, r1
 801169e:	e75f      	b.n	8011560 <__ieee754_rem_pio2+0x1a0>
 80116a0:	4b1b      	ldr	r3, [pc, #108]	; (8011710 <__ieee754_rem_pio2+0x350>)
 80116a2:	4598      	cmp	r8, r3
 80116a4:	dd36      	ble.n	8011714 <__ieee754_rem_pio2+0x354>
 80116a6:	ee10 2a10 	vmov	r2, s0
 80116aa:	462b      	mov	r3, r5
 80116ac:	4620      	mov	r0, r4
 80116ae:	4629      	mov	r1, r5
 80116b0:	f7ee fdea 	bl	8000288 <__aeabi_dsub>
 80116b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80116b8:	e9ca 0100 	strd	r0, r1, [sl]
 80116bc:	e694      	b.n	80113e8 <__ieee754_rem_pio2+0x28>
 80116be:	bf00      	nop
 80116c0:	54400000 	.word	0x54400000
 80116c4:	3ff921fb 	.word	0x3ff921fb
 80116c8:	1a626331 	.word	0x1a626331
 80116cc:	3dd0b461 	.word	0x3dd0b461
 80116d0:	1a600000 	.word	0x1a600000
 80116d4:	3dd0b461 	.word	0x3dd0b461
 80116d8:	2e037073 	.word	0x2e037073
 80116dc:	3ba3198a 	.word	0x3ba3198a
 80116e0:	6dc9c883 	.word	0x6dc9c883
 80116e4:	3fe45f30 	.word	0x3fe45f30
 80116e8:	2e000000 	.word	0x2e000000
 80116ec:	3ba3198a 	.word	0x3ba3198a
 80116f0:	252049c1 	.word	0x252049c1
 80116f4:	397b839a 	.word	0x397b839a
 80116f8:	3fe921fb 	.word	0x3fe921fb
 80116fc:	4002d97b 	.word	0x4002d97b
 8011700:	3ff921fb 	.word	0x3ff921fb
 8011704:	413921fb 	.word	0x413921fb
 8011708:	3fe00000 	.word	0x3fe00000
 801170c:	0801f748 	.word	0x0801f748
 8011710:	7fefffff 	.word	0x7fefffff
 8011714:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011718:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801171c:	ee10 0a10 	vmov	r0, s0
 8011720:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011724:	ee10 6a10 	vmov	r6, s0
 8011728:	460f      	mov	r7, r1
 801172a:	f7ef fa15 	bl	8000b58 <__aeabi_d2iz>
 801172e:	f7ee fef9 	bl	8000524 <__aeabi_i2d>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4630      	mov	r0, r6
 8011738:	4639      	mov	r1, r7
 801173a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801173e:	f7ee fda3 	bl	8000288 <__aeabi_dsub>
 8011742:	4b23      	ldr	r3, [pc, #140]	; (80117d0 <__ieee754_rem_pio2+0x410>)
 8011744:	2200      	movs	r2, #0
 8011746:	f7ee ff57 	bl	80005f8 <__aeabi_dmul>
 801174a:	460f      	mov	r7, r1
 801174c:	4606      	mov	r6, r0
 801174e:	f7ef fa03 	bl	8000b58 <__aeabi_d2iz>
 8011752:	f7ee fee7 	bl	8000524 <__aeabi_i2d>
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	4630      	mov	r0, r6
 801175c:	4639      	mov	r1, r7
 801175e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011762:	f7ee fd91 	bl	8000288 <__aeabi_dsub>
 8011766:	4b1a      	ldr	r3, [pc, #104]	; (80117d0 <__ieee754_rem_pio2+0x410>)
 8011768:	2200      	movs	r2, #0
 801176a:	f7ee ff45 	bl	80005f8 <__aeabi_dmul>
 801176e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011772:	ad04      	add	r5, sp, #16
 8011774:	f04f 0803 	mov.w	r8, #3
 8011778:	46a9      	mov	r9, r5
 801177a:	2600      	movs	r6, #0
 801177c:	2700      	movs	r7, #0
 801177e:	4632      	mov	r2, r6
 8011780:	463b      	mov	r3, r7
 8011782:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011786:	46c3      	mov	fp, r8
 8011788:	3d08      	subs	r5, #8
 801178a:	f108 38ff 	add.w	r8, r8, #4294967295
 801178e:	f7ef f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011792:	2800      	cmp	r0, #0
 8011794:	d1f3      	bne.n	801177e <__ieee754_rem_pio2+0x3be>
 8011796:	4b0f      	ldr	r3, [pc, #60]	; (80117d4 <__ieee754_rem_pio2+0x414>)
 8011798:	9301      	str	r3, [sp, #4]
 801179a:	2302      	movs	r3, #2
 801179c:	9300      	str	r3, [sp, #0]
 801179e:	4622      	mov	r2, r4
 80117a0:	465b      	mov	r3, fp
 80117a2:	4651      	mov	r1, sl
 80117a4:	4648      	mov	r0, r9
 80117a6:	f000 f993 	bl	8011ad0 <__kernel_rem_pio2>
 80117aa:	9b02      	ldr	r3, [sp, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	4683      	mov	fp, r0
 80117b0:	f6bf ae46 	bge.w	8011440 <__ieee754_rem_pio2+0x80>
 80117b4:	e9da 2100 	ldrd	r2, r1, [sl]
 80117b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117bc:	e9ca 2300 	strd	r2, r3, [sl]
 80117c0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80117c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117c8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80117cc:	e73a      	b.n	8011644 <__ieee754_rem_pio2+0x284>
 80117ce:	bf00      	nop
 80117d0:	41700000 	.word	0x41700000
 80117d4:	0801f7c8 	.word	0x0801f7c8

080117d8 <__ieee754_sqrt>:
 80117d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117dc:	ec55 4b10 	vmov	r4, r5, d0
 80117e0:	4e55      	ldr	r6, [pc, #340]	; (8011938 <__ieee754_sqrt+0x160>)
 80117e2:	43ae      	bics	r6, r5
 80117e4:	ee10 0a10 	vmov	r0, s0
 80117e8:	ee10 3a10 	vmov	r3, s0
 80117ec:	462a      	mov	r2, r5
 80117ee:	4629      	mov	r1, r5
 80117f0:	d110      	bne.n	8011814 <__ieee754_sqrt+0x3c>
 80117f2:	ee10 2a10 	vmov	r2, s0
 80117f6:	462b      	mov	r3, r5
 80117f8:	f7ee fefe 	bl	80005f8 <__aeabi_dmul>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	4620      	mov	r0, r4
 8011802:	4629      	mov	r1, r5
 8011804:	f7ee fd42 	bl	800028c <__adddf3>
 8011808:	4604      	mov	r4, r0
 801180a:	460d      	mov	r5, r1
 801180c:	ec45 4b10 	vmov	d0, r4, r5
 8011810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011814:	2d00      	cmp	r5, #0
 8011816:	dc10      	bgt.n	801183a <__ieee754_sqrt+0x62>
 8011818:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801181c:	4330      	orrs	r0, r6
 801181e:	d0f5      	beq.n	801180c <__ieee754_sqrt+0x34>
 8011820:	b15d      	cbz	r5, 801183a <__ieee754_sqrt+0x62>
 8011822:	ee10 2a10 	vmov	r2, s0
 8011826:	462b      	mov	r3, r5
 8011828:	ee10 0a10 	vmov	r0, s0
 801182c:	f7ee fd2c 	bl	8000288 <__aeabi_dsub>
 8011830:	4602      	mov	r2, r0
 8011832:	460b      	mov	r3, r1
 8011834:	f7ef f80a 	bl	800084c <__aeabi_ddiv>
 8011838:	e7e6      	b.n	8011808 <__ieee754_sqrt+0x30>
 801183a:	1512      	asrs	r2, r2, #20
 801183c:	d074      	beq.n	8011928 <__ieee754_sqrt+0x150>
 801183e:	07d4      	lsls	r4, r2, #31
 8011840:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011844:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801184c:	bf5e      	ittt	pl
 801184e:	0fda      	lsrpl	r2, r3, #31
 8011850:	005b      	lslpl	r3, r3, #1
 8011852:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011856:	2400      	movs	r4, #0
 8011858:	0fda      	lsrs	r2, r3, #31
 801185a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801185e:	107f      	asrs	r7, r7, #1
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	2516      	movs	r5, #22
 8011864:	4620      	mov	r0, r4
 8011866:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801186a:	1886      	adds	r6, r0, r2
 801186c:	428e      	cmp	r6, r1
 801186e:	bfde      	ittt	le
 8011870:	1b89      	suble	r1, r1, r6
 8011872:	18b0      	addle	r0, r6, r2
 8011874:	18a4      	addle	r4, r4, r2
 8011876:	0049      	lsls	r1, r1, #1
 8011878:	3d01      	subs	r5, #1
 801187a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801187e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011882:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011886:	d1f0      	bne.n	801186a <__ieee754_sqrt+0x92>
 8011888:	462a      	mov	r2, r5
 801188a:	f04f 0e20 	mov.w	lr, #32
 801188e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011892:	4281      	cmp	r1, r0
 8011894:	eb06 0c05 	add.w	ip, r6, r5
 8011898:	dc02      	bgt.n	80118a0 <__ieee754_sqrt+0xc8>
 801189a:	d113      	bne.n	80118c4 <__ieee754_sqrt+0xec>
 801189c:	459c      	cmp	ip, r3
 801189e:	d811      	bhi.n	80118c4 <__ieee754_sqrt+0xec>
 80118a0:	f1bc 0f00 	cmp.w	ip, #0
 80118a4:	eb0c 0506 	add.w	r5, ip, r6
 80118a8:	da43      	bge.n	8011932 <__ieee754_sqrt+0x15a>
 80118aa:	2d00      	cmp	r5, #0
 80118ac:	db41      	blt.n	8011932 <__ieee754_sqrt+0x15a>
 80118ae:	f100 0801 	add.w	r8, r0, #1
 80118b2:	1a09      	subs	r1, r1, r0
 80118b4:	459c      	cmp	ip, r3
 80118b6:	bf88      	it	hi
 80118b8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80118bc:	eba3 030c 	sub.w	r3, r3, ip
 80118c0:	4432      	add	r2, r6
 80118c2:	4640      	mov	r0, r8
 80118c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80118c8:	f1be 0e01 	subs.w	lr, lr, #1
 80118cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80118d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80118d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80118d8:	d1db      	bne.n	8011892 <__ieee754_sqrt+0xba>
 80118da:	430b      	orrs	r3, r1
 80118dc:	d006      	beq.n	80118ec <__ieee754_sqrt+0x114>
 80118de:	1c50      	adds	r0, r2, #1
 80118e0:	bf13      	iteet	ne
 80118e2:	3201      	addne	r2, #1
 80118e4:	3401      	addeq	r4, #1
 80118e6:	4672      	moveq	r2, lr
 80118e8:	f022 0201 	bicne.w	r2, r2, #1
 80118ec:	1063      	asrs	r3, r4, #1
 80118ee:	0852      	lsrs	r2, r2, #1
 80118f0:	07e1      	lsls	r1, r4, #31
 80118f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80118f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80118fa:	bf48      	it	mi
 80118fc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011900:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8011904:	4614      	mov	r4, r2
 8011906:	e781      	b.n	801180c <__ieee754_sqrt+0x34>
 8011908:	0ad9      	lsrs	r1, r3, #11
 801190a:	3815      	subs	r0, #21
 801190c:	055b      	lsls	r3, r3, #21
 801190e:	2900      	cmp	r1, #0
 8011910:	d0fa      	beq.n	8011908 <__ieee754_sqrt+0x130>
 8011912:	02cd      	lsls	r5, r1, #11
 8011914:	d50a      	bpl.n	801192c <__ieee754_sqrt+0x154>
 8011916:	f1c2 0420 	rsb	r4, r2, #32
 801191a:	fa23 f404 	lsr.w	r4, r3, r4
 801191e:	1e55      	subs	r5, r2, #1
 8011920:	4093      	lsls	r3, r2
 8011922:	4321      	orrs	r1, r4
 8011924:	1b42      	subs	r2, r0, r5
 8011926:	e78a      	b.n	801183e <__ieee754_sqrt+0x66>
 8011928:	4610      	mov	r0, r2
 801192a:	e7f0      	b.n	801190e <__ieee754_sqrt+0x136>
 801192c:	0049      	lsls	r1, r1, #1
 801192e:	3201      	adds	r2, #1
 8011930:	e7ef      	b.n	8011912 <__ieee754_sqrt+0x13a>
 8011932:	4680      	mov	r8, r0
 8011934:	e7bd      	b.n	80118b2 <__ieee754_sqrt+0xda>
 8011936:	bf00      	nop
 8011938:	7ff00000 	.word	0x7ff00000
 801193c:	00000000 	.word	0x00000000

08011940 <__kernel_cos>:
 8011940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011944:	ec57 6b10 	vmov	r6, r7, d0
 8011948:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801194c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011950:	ed8d 1b00 	vstr	d1, [sp]
 8011954:	da07      	bge.n	8011966 <__kernel_cos+0x26>
 8011956:	ee10 0a10 	vmov	r0, s0
 801195a:	4639      	mov	r1, r7
 801195c:	f7ef f8fc 	bl	8000b58 <__aeabi_d2iz>
 8011960:	2800      	cmp	r0, #0
 8011962:	f000 8088 	beq.w	8011a76 <__kernel_cos+0x136>
 8011966:	4632      	mov	r2, r6
 8011968:	463b      	mov	r3, r7
 801196a:	4630      	mov	r0, r6
 801196c:	4639      	mov	r1, r7
 801196e:	f7ee fe43 	bl	80005f8 <__aeabi_dmul>
 8011972:	4b51      	ldr	r3, [pc, #324]	; (8011ab8 <__kernel_cos+0x178>)
 8011974:	2200      	movs	r2, #0
 8011976:	4604      	mov	r4, r0
 8011978:	460d      	mov	r5, r1
 801197a:	f7ee fe3d 	bl	80005f8 <__aeabi_dmul>
 801197e:	a340      	add	r3, pc, #256	; (adr r3, 8011a80 <__kernel_cos+0x140>)
 8011980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011984:	4682      	mov	sl, r0
 8011986:	468b      	mov	fp, r1
 8011988:	4620      	mov	r0, r4
 801198a:	4629      	mov	r1, r5
 801198c:	f7ee fe34 	bl	80005f8 <__aeabi_dmul>
 8011990:	a33d      	add	r3, pc, #244	; (adr r3, 8011a88 <__kernel_cos+0x148>)
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	f7ee fc79 	bl	800028c <__adddf3>
 801199a:	4622      	mov	r2, r4
 801199c:	462b      	mov	r3, r5
 801199e:	f7ee fe2b 	bl	80005f8 <__aeabi_dmul>
 80119a2:	a33b      	add	r3, pc, #236	; (adr r3, 8011a90 <__kernel_cos+0x150>)
 80119a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a8:	f7ee fc6e 	bl	8000288 <__aeabi_dsub>
 80119ac:	4622      	mov	r2, r4
 80119ae:	462b      	mov	r3, r5
 80119b0:	f7ee fe22 	bl	80005f8 <__aeabi_dmul>
 80119b4:	a338      	add	r3, pc, #224	; (adr r3, 8011a98 <__kernel_cos+0x158>)
 80119b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ba:	f7ee fc67 	bl	800028c <__adddf3>
 80119be:	4622      	mov	r2, r4
 80119c0:	462b      	mov	r3, r5
 80119c2:	f7ee fe19 	bl	80005f8 <__aeabi_dmul>
 80119c6:	a336      	add	r3, pc, #216	; (adr r3, 8011aa0 <__kernel_cos+0x160>)
 80119c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119cc:	f7ee fc5c 	bl	8000288 <__aeabi_dsub>
 80119d0:	4622      	mov	r2, r4
 80119d2:	462b      	mov	r3, r5
 80119d4:	f7ee fe10 	bl	80005f8 <__aeabi_dmul>
 80119d8:	a333      	add	r3, pc, #204	; (adr r3, 8011aa8 <__kernel_cos+0x168>)
 80119da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119de:	f7ee fc55 	bl	800028c <__adddf3>
 80119e2:	4622      	mov	r2, r4
 80119e4:	462b      	mov	r3, r5
 80119e6:	f7ee fe07 	bl	80005f8 <__aeabi_dmul>
 80119ea:	4622      	mov	r2, r4
 80119ec:	462b      	mov	r3, r5
 80119ee:	f7ee fe03 	bl	80005f8 <__aeabi_dmul>
 80119f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119f6:	4604      	mov	r4, r0
 80119f8:	460d      	mov	r5, r1
 80119fa:	4630      	mov	r0, r6
 80119fc:	4639      	mov	r1, r7
 80119fe:	f7ee fdfb 	bl	80005f8 <__aeabi_dmul>
 8011a02:	460b      	mov	r3, r1
 8011a04:	4602      	mov	r2, r0
 8011a06:	4629      	mov	r1, r5
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f7ee fc3d 	bl	8000288 <__aeabi_dsub>
 8011a0e:	4b2b      	ldr	r3, [pc, #172]	; (8011abc <__kernel_cos+0x17c>)
 8011a10:	4598      	cmp	r8, r3
 8011a12:	4606      	mov	r6, r0
 8011a14:	460f      	mov	r7, r1
 8011a16:	dc10      	bgt.n	8011a3a <__kernel_cos+0xfa>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4650      	mov	r0, sl
 8011a1e:	4659      	mov	r1, fp
 8011a20:	f7ee fc32 	bl	8000288 <__aeabi_dsub>
 8011a24:	460b      	mov	r3, r1
 8011a26:	4926      	ldr	r1, [pc, #152]	; (8011ac0 <__kernel_cos+0x180>)
 8011a28:	4602      	mov	r2, r0
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	f7ee fc2c 	bl	8000288 <__aeabi_dsub>
 8011a30:	ec41 0b10 	vmov	d0, r0, r1
 8011a34:	b003      	add	sp, #12
 8011a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3a:	4b22      	ldr	r3, [pc, #136]	; (8011ac4 <__kernel_cos+0x184>)
 8011a3c:	4920      	ldr	r1, [pc, #128]	; (8011ac0 <__kernel_cos+0x180>)
 8011a3e:	4598      	cmp	r8, r3
 8011a40:	bfcc      	ite	gt
 8011a42:	4d21      	ldrgt	r5, [pc, #132]	; (8011ac8 <__kernel_cos+0x188>)
 8011a44:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011a48:	2400      	movs	r4, #0
 8011a4a:	4622      	mov	r2, r4
 8011a4c:	462b      	mov	r3, r5
 8011a4e:	2000      	movs	r0, #0
 8011a50:	f7ee fc1a 	bl	8000288 <__aeabi_dsub>
 8011a54:	4622      	mov	r2, r4
 8011a56:	4680      	mov	r8, r0
 8011a58:	4689      	mov	r9, r1
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	4650      	mov	r0, sl
 8011a5e:	4659      	mov	r1, fp
 8011a60:	f7ee fc12 	bl	8000288 <__aeabi_dsub>
 8011a64:	4632      	mov	r2, r6
 8011a66:	463b      	mov	r3, r7
 8011a68:	f7ee fc0e 	bl	8000288 <__aeabi_dsub>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	460b      	mov	r3, r1
 8011a70:	4640      	mov	r0, r8
 8011a72:	4649      	mov	r1, r9
 8011a74:	e7da      	b.n	8011a2c <__kernel_cos+0xec>
 8011a76:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011ab0 <__kernel_cos+0x170>
 8011a7a:	e7db      	b.n	8011a34 <__kernel_cos+0xf4>
 8011a7c:	f3af 8000 	nop.w
 8011a80:	be8838d4 	.word	0xbe8838d4
 8011a84:	bda8fae9 	.word	0xbda8fae9
 8011a88:	bdb4b1c4 	.word	0xbdb4b1c4
 8011a8c:	3e21ee9e 	.word	0x3e21ee9e
 8011a90:	809c52ad 	.word	0x809c52ad
 8011a94:	3e927e4f 	.word	0x3e927e4f
 8011a98:	19cb1590 	.word	0x19cb1590
 8011a9c:	3efa01a0 	.word	0x3efa01a0
 8011aa0:	16c15177 	.word	0x16c15177
 8011aa4:	3f56c16c 	.word	0x3f56c16c
 8011aa8:	5555554c 	.word	0x5555554c
 8011aac:	3fa55555 	.word	0x3fa55555
 8011ab0:	00000000 	.word	0x00000000
 8011ab4:	3ff00000 	.word	0x3ff00000
 8011ab8:	3fe00000 	.word	0x3fe00000
 8011abc:	3fd33332 	.word	0x3fd33332
 8011ac0:	3ff00000 	.word	0x3ff00000
 8011ac4:	3fe90000 	.word	0x3fe90000
 8011ac8:	3fd20000 	.word	0x3fd20000
 8011acc:	00000000 	.word	0x00000000

08011ad0 <__kernel_rem_pio2>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	ed2d 8b02 	vpush	{d8}
 8011ad8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011adc:	f112 0f14 	cmn.w	r2, #20
 8011ae0:	9308      	str	r3, [sp, #32]
 8011ae2:	9101      	str	r1, [sp, #4]
 8011ae4:	4bc4      	ldr	r3, [pc, #784]	; (8011df8 <__kernel_rem_pio2+0x328>)
 8011ae6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011ae8:	900b      	str	r0, [sp, #44]	; 0x2c
 8011aea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011aee:	9302      	str	r3, [sp, #8]
 8011af0:	9b08      	ldr	r3, [sp, #32]
 8011af2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011af6:	bfa8      	it	ge
 8011af8:	1ed4      	subge	r4, r2, #3
 8011afa:	9306      	str	r3, [sp, #24]
 8011afc:	bfb2      	itee	lt
 8011afe:	2400      	movlt	r4, #0
 8011b00:	2318      	movge	r3, #24
 8011b02:	fb94 f4f3 	sdivge	r4, r4, r3
 8011b06:	f06f 0317 	mvn.w	r3, #23
 8011b0a:	fb04 3303 	mla	r3, r4, r3, r3
 8011b0e:	eb03 0a02 	add.w	sl, r3, r2
 8011b12:	9b02      	ldr	r3, [sp, #8]
 8011b14:	9a06      	ldr	r2, [sp, #24]
 8011b16:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011de8 <__kernel_rem_pio2+0x318>
 8011b1a:	eb03 0802 	add.w	r8, r3, r2
 8011b1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011b20:	1aa7      	subs	r7, r4, r2
 8011b22:	ae22      	add	r6, sp, #136	; 0x88
 8011b24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011b28:	2500      	movs	r5, #0
 8011b2a:	4545      	cmp	r5, r8
 8011b2c:	dd13      	ble.n	8011b56 <__kernel_rem_pio2+0x86>
 8011b2e:	9b08      	ldr	r3, [sp, #32]
 8011b30:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011de8 <__kernel_rem_pio2+0x318>
 8011b34:	aa22      	add	r2, sp, #136	; 0x88
 8011b36:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011b3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011b3e:	f04f 0800 	mov.w	r8, #0
 8011b42:	9b02      	ldr	r3, [sp, #8]
 8011b44:	4598      	cmp	r8, r3
 8011b46:	dc2f      	bgt.n	8011ba8 <__kernel_rem_pio2+0xd8>
 8011b48:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011b4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011b50:	462f      	mov	r7, r5
 8011b52:	2600      	movs	r6, #0
 8011b54:	e01b      	b.n	8011b8e <__kernel_rem_pio2+0xbe>
 8011b56:	42ef      	cmn	r7, r5
 8011b58:	d407      	bmi.n	8011b6a <__kernel_rem_pio2+0x9a>
 8011b5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011b5e:	f7ee fce1 	bl	8000524 <__aeabi_i2d>
 8011b62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011b66:	3501      	adds	r5, #1
 8011b68:	e7df      	b.n	8011b2a <__kernel_rem_pio2+0x5a>
 8011b6a:	ec51 0b18 	vmov	r0, r1, d8
 8011b6e:	e7f8      	b.n	8011b62 <__kernel_rem_pio2+0x92>
 8011b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011b78:	f7ee fd3e 	bl	80005f8 <__aeabi_dmul>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	460b      	mov	r3, r1
 8011b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b84:	f7ee fb82 	bl	800028c <__adddf3>
 8011b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b8c:	3601      	adds	r6, #1
 8011b8e:	9b06      	ldr	r3, [sp, #24]
 8011b90:	429e      	cmp	r6, r3
 8011b92:	f1a7 0708 	sub.w	r7, r7, #8
 8011b96:	ddeb      	ble.n	8011b70 <__kernel_rem_pio2+0xa0>
 8011b98:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011b9c:	f108 0801 	add.w	r8, r8, #1
 8011ba0:	ecab 7b02 	vstmia	fp!, {d7}
 8011ba4:	3508      	adds	r5, #8
 8011ba6:	e7cc      	b.n	8011b42 <__kernel_rem_pio2+0x72>
 8011ba8:	9b02      	ldr	r3, [sp, #8]
 8011baa:	aa0e      	add	r2, sp, #56	; 0x38
 8011bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bb0:	930d      	str	r3, [sp, #52]	; 0x34
 8011bb2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011bb4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011bb8:	9c02      	ldr	r4, [sp, #8]
 8011bba:	930c      	str	r3, [sp, #48]	; 0x30
 8011bbc:	00e3      	lsls	r3, r4, #3
 8011bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8011bc0:	ab9a      	add	r3, sp, #616	; 0x268
 8011bc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011bc6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011bca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011bce:	ab72      	add	r3, sp, #456	; 0x1c8
 8011bd0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011bd4:	46c3      	mov	fp, r8
 8011bd6:	46a1      	mov	r9, r4
 8011bd8:	f1b9 0f00 	cmp.w	r9, #0
 8011bdc:	f1a5 0508 	sub.w	r5, r5, #8
 8011be0:	dc77      	bgt.n	8011cd2 <__kernel_rem_pio2+0x202>
 8011be2:	ec47 6b10 	vmov	d0, r6, r7
 8011be6:	4650      	mov	r0, sl
 8011be8:	f000 fc46 	bl	8012478 <scalbn>
 8011bec:	ec57 6b10 	vmov	r6, r7, d0
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011bf6:	ee10 0a10 	vmov	r0, s0
 8011bfa:	4639      	mov	r1, r7
 8011bfc:	f7ee fcfc 	bl	80005f8 <__aeabi_dmul>
 8011c00:	ec41 0b10 	vmov	d0, r0, r1
 8011c04:	f000 fbb8 	bl	8012378 <floor>
 8011c08:	4b7c      	ldr	r3, [pc, #496]	; (8011dfc <__kernel_rem_pio2+0x32c>)
 8011c0a:	ec51 0b10 	vmov	r0, r1, d0
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f7ee fcf2 	bl	80005f8 <__aeabi_dmul>
 8011c14:	4602      	mov	r2, r0
 8011c16:	460b      	mov	r3, r1
 8011c18:	4630      	mov	r0, r6
 8011c1a:	4639      	mov	r1, r7
 8011c1c:	f7ee fb34 	bl	8000288 <__aeabi_dsub>
 8011c20:	460f      	mov	r7, r1
 8011c22:	4606      	mov	r6, r0
 8011c24:	f7ee ff98 	bl	8000b58 <__aeabi_d2iz>
 8011c28:	9004      	str	r0, [sp, #16]
 8011c2a:	f7ee fc7b 	bl	8000524 <__aeabi_i2d>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4630      	mov	r0, r6
 8011c34:	4639      	mov	r1, r7
 8011c36:	f7ee fb27 	bl	8000288 <__aeabi_dsub>
 8011c3a:	f1ba 0f00 	cmp.w	sl, #0
 8011c3e:	4606      	mov	r6, r0
 8011c40:	460f      	mov	r7, r1
 8011c42:	dd6d      	ble.n	8011d20 <__kernel_rem_pio2+0x250>
 8011c44:	1e62      	subs	r2, r4, #1
 8011c46:	ab0e      	add	r3, sp, #56	; 0x38
 8011c48:	9d04      	ldr	r5, [sp, #16]
 8011c4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011c4e:	f1ca 0118 	rsb	r1, sl, #24
 8011c52:	fa40 f301 	asr.w	r3, r0, r1
 8011c56:	441d      	add	r5, r3
 8011c58:	408b      	lsls	r3, r1
 8011c5a:	1ac0      	subs	r0, r0, r3
 8011c5c:	ab0e      	add	r3, sp, #56	; 0x38
 8011c5e:	9504      	str	r5, [sp, #16]
 8011c60:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011c64:	f1ca 0317 	rsb	r3, sl, #23
 8011c68:	fa40 fb03 	asr.w	fp, r0, r3
 8011c6c:	f1bb 0f00 	cmp.w	fp, #0
 8011c70:	dd65      	ble.n	8011d3e <__kernel_rem_pio2+0x26e>
 8011c72:	9b04      	ldr	r3, [sp, #16]
 8011c74:	2200      	movs	r2, #0
 8011c76:	3301      	adds	r3, #1
 8011c78:	9304      	str	r3, [sp, #16]
 8011c7a:	4615      	mov	r5, r2
 8011c7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011c80:	4294      	cmp	r4, r2
 8011c82:	f300 809c 	bgt.w	8011dbe <__kernel_rem_pio2+0x2ee>
 8011c86:	f1ba 0f00 	cmp.w	sl, #0
 8011c8a:	dd07      	ble.n	8011c9c <__kernel_rem_pio2+0x1cc>
 8011c8c:	f1ba 0f01 	cmp.w	sl, #1
 8011c90:	f000 80c0 	beq.w	8011e14 <__kernel_rem_pio2+0x344>
 8011c94:	f1ba 0f02 	cmp.w	sl, #2
 8011c98:	f000 80c6 	beq.w	8011e28 <__kernel_rem_pio2+0x358>
 8011c9c:	f1bb 0f02 	cmp.w	fp, #2
 8011ca0:	d14d      	bne.n	8011d3e <__kernel_rem_pio2+0x26e>
 8011ca2:	4632      	mov	r2, r6
 8011ca4:	463b      	mov	r3, r7
 8011ca6:	4956      	ldr	r1, [pc, #344]	; (8011e00 <__kernel_rem_pio2+0x330>)
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f7ee faed 	bl	8000288 <__aeabi_dsub>
 8011cae:	4606      	mov	r6, r0
 8011cb0:	460f      	mov	r7, r1
 8011cb2:	2d00      	cmp	r5, #0
 8011cb4:	d043      	beq.n	8011d3e <__kernel_rem_pio2+0x26e>
 8011cb6:	4650      	mov	r0, sl
 8011cb8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011df0 <__kernel_rem_pio2+0x320>
 8011cbc:	f000 fbdc 	bl	8012478 <scalbn>
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	4639      	mov	r1, r7
 8011cc4:	ec53 2b10 	vmov	r2, r3, d0
 8011cc8:	f7ee fade 	bl	8000288 <__aeabi_dsub>
 8011ccc:	4606      	mov	r6, r0
 8011cce:	460f      	mov	r7, r1
 8011cd0:	e035      	b.n	8011d3e <__kernel_rem_pio2+0x26e>
 8011cd2:	4b4c      	ldr	r3, [pc, #304]	; (8011e04 <__kernel_rem_pio2+0x334>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	4630      	mov	r0, r6
 8011cd8:	4639      	mov	r1, r7
 8011cda:	f7ee fc8d 	bl	80005f8 <__aeabi_dmul>
 8011cde:	f7ee ff3b 	bl	8000b58 <__aeabi_d2iz>
 8011ce2:	f7ee fc1f 	bl	8000524 <__aeabi_i2d>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	ec43 2b18 	vmov	d8, r2, r3
 8011cee:	4b46      	ldr	r3, [pc, #280]	; (8011e08 <__kernel_rem_pio2+0x338>)
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	f7ee fc81 	bl	80005f8 <__aeabi_dmul>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	4639      	mov	r1, r7
 8011cfe:	f7ee fac3 	bl	8000288 <__aeabi_dsub>
 8011d02:	f7ee ff29 	bl	8000b58 <__aeabi_d2iz>
 8011d06:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d0a:	f84b 0b04 	str.w	r0, [fp], #4
 8011d0e:	ec51 0b18 	vmov	r0, r1, d8
 8011d12:	f7ee fabb 	bl	800028c <__adddf3>
 8011d16:	f109 39ff 	add.w	r9, r9, #4294967295
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	460f      	mov	r7, r1
 8011d1e:	e75b      	b.n	8011bd8 <__kernel_rem_pio2+0x108>
 8011d20:	d106      	bne.n	8011d30 <__kernel_rem_pio2+0x260>
 8011d22:	1e63      	subs	r3, r4, #1
 8011d24:	aa0e      	add	r2, sp, #56	; 0x38
 8011d26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011d2a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011d2e:	e79d      	b.n	8011c6c <__kernel_rem_pio2+0x19c>
 8011d30:	4b36      	ldr	r3, [pc, #216]	; (8011e0c <__kernel_rem_pio2+0x33c>)
 8011d32:	2200      	movs	r2, #0
 8011d34:	f7ee fee6 	bl	8000b04 <__aeabi_dcmpge>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d13d      	bne.n	8011db8 <__kernel_rem_pio2+0x2e8>
 8011d3c:	4683      	mov	fp, r0
 8011d3e:	2200      	movs	r2, #0
 8011d40:	2300      	movs	r3, #0
 8011d42:	4630      	mov	r0, r6
 8011d44:	4639      	mov	r1, r7
 8011d46:	f7ee febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f000 80c0 	beq.w	8011ed0 <__kernel_rem_pio2+0x400>
 8011d50:	1e65      	subs	r5, r4, #1
 8011d52:	462b      	mov	r3, r5
 8011d54:	2200      	movs	r2, #0
 8011d56:	9902      	ldr	r1, [sp, #8]
 8011d58:	428b      	cmp	r3, r1
 8011d5a:	da6c      	bge.n	8011e36 <__kernel_rem_pio2+0x366>
 8011d5c:	2a00      	cmp	r2, #0
 8011d5e:	f000 8089 	beq.w	8011e74 <__kernel_rem_pio2+0x3a4>
 8011d62:	ab0e      	add	r3, sp, #56	; 0x38
 8011d64:	f1aa 0a18 	sub.w	sl, sl, #24
 8011d68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f000 80ad 	beq.w	8011ecc <__kernel_rem_pio2+0x3fc>
 8011d72:	4650      	mov	r0, sl
 8011d74:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011df0 <__kernel_rem_pio2+0x320>
 8011d78:	f000 fb7e 	bl	8012478 <scalbn>
 8011d7c:	ab9a      	add	r3, sp, #616	; 0x268
 8011d7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011d82:	ec57 6b10 	vmov	r6, r7, d0
 8011d86:	00ec      	lsls	r4, r5, #3
 8011d88:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011d8c:	46aa      	mov	sl, r5
 8011d8e:	f1ba 0f00 	cmp.w	sl, #0
 8011d92:	f280 80d6 	bge.w	8011f42 <__kernel_rem_pio2+0x472>
 8011d96:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011de8 <__kernel_rem_pio2+0x318>
 8011d9a:	462e      	mov	r6, r5
 8011d9c:	2e00      	cmp	r6, #0
 8011d9e:	f2c0 8104 	blt.w	8011faa <__kernel_rem_pio2+0x4da>
 8011da2:	ab72      	add	r3, sp, #456	; 0x1c8
 8011da4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011da8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011e10 <__kernel_rem_pio2+0x340>
 8011dac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011db0:	f04f 0800 	mov.w	r8, #0
 8011db4:	1baf      	subs	r7, r5, r6
 8011db6:	e0ea      	b.n	8011f8e <__kernel_rem_pio2+0x4be>
 8011db8:	f04f 0b02 	mov.w	fp, #2
 8011dbc:	e759      	b.n	8011c72 <__kernel_rem_pio2+0x1a2>
 8011dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8011dc2:	b955      	cbnz	r5, 8011dda <__kernel_rem_pio2+0x30a>
 8011dc4:	b123      	cbz	r3, 8011dd0 <__kernel_rem_pio2+0x300>
 8011dc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011dca:	f8c8 3000 	str.w	r3, [r8]
 8011dce:	2301      	movs	r3, #1
 8011dd0:	3201      	adds	r2, #1
 8011dd2:	f108 0804 	add.w	r8, r8, #4
 8011dd6:	461d      	mov	r5, r3
 8011dd8:	e752      	b.n	8011c80 <__kernel_rem_pio2+0x1b0>
 8011dda:	1acb      	subs	r3, r1, r3
 8011ddc:	f8c8 3000 	str.w	r3, [r8]
 8011de0:	462b      	mov	r3, r5
 8011de2:	e7f5      	b.n	8011dd0 <__kernel_rem_pio2+0x300>
 8011de4:	f3af 8000 	nop.w
	...
 8011df4:	3ff00000 	.word	0x3ff00000
 8011df8:	0801f910 	.word	0x0801f910
 8011dfc:	40200000 	.word	0x40200000
 8011e00:	3ff00000 	.word	0x3ff00000
 8011e04:	3e700000 	.word	0x3e700000
 8011e08:	41700000 	.word	0x41700000
 8011e0c:	3fe00000 	.word	0x3fe00000
 8011e10:	0801f8d0 	.word	0x0801f8d0
 8011e14:	1e62      	subs	r2, r4, #1
 8011e16:	ab0e      	add	r3, sp, #56	; 0x38
 8011e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011e20:	a90e      	add	r1, sp, #56	; 0x38
 8011e22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011e26:	e739      	b.n	8011c9c <__kernel_rem_pio2+0x1cc>
 8011e28:	1e62      	subs	r2, r4, #1
 8011e2a:	ab0e      	add	r3, sp, #56	; 0x38
 8011e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011e34:	e7f4      	b.n	8011e20 <__kernel_rem_pio2+0x350>
 8011e36:	a90e      	add	r1, sp, #56	; 0x38
 8011e38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011e3c:	3b01      	subs	r3, #1
 8011e3e:	430a      	orrs	r2, r1
 8011e40:	e789      	b.n	8011d56 <__kernel_rem_pio2+0x286>
 8011e42:	3301      	adds	r3, #1
 8011e44:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011e48:	2900      	cmp	r1, #0
 8011e4a:	d0fa      	beq.n	8011e42 <__kernel_rem_pio2+0x372>
 8011e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e4e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011e52:	446a      	add	r2, sp
 8011e54:	3a98      	subs	r2, #152	; 0x98
 8011e56:	920a      	str	r2, [sp, #40]	; 0x28
 8011e58:	9a08      	ldr	r2, [sp, #32]
 8011e5a:	18e3      	adds	r3, r4, r3
 8011e5c:	18a5      	adds	r5, r4, r2
 8011e5e:	aa22      	add	r2, sp, #136	; 0x88
 8011e60:	f104 0801 	add.w	r8, r4, #1
 8011e64:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011e68:	9304      	str	r3, [sp, #16]
 8011e6a:	9b04      	ldr	r3, [sp, #16]
 8011e6c:	4543      	cmp	r3, r8
 8011e6e:	da04      	bge.n	8011e7a <__kernel_rem_pio2+0x3aa>
 8011e70:	461c      	mov	r4, r3
 8011e72:	e6a3      	b.n	8011bbc <__kernel_rem_pio2+0xec>
 8011e74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e76:	2301      	movs	r3, #1
 8011e78:	e7e4      	b.n	8011e44 <__kernel_rem_pio2+0x374>
 8011e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011e80:	f7ee fb50 	bl	8000524 <__aeabi_i2d>
 8011e84:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e8a:	46ab      	mov	fp, r5
 8011e8c:	461c      	mov	r4, r3
 8011e8e:	f04f 0900 	mov.w	r9, #0
 8011e92:	2600      	movs	r6, #0
 8011e94:	2700      	movs	r7, #0
 8011e96:	9b06      	ldr	r3, [sp, #24]
 8011e98:	4599      	cmp	r9, r3
 8011e9a:	dd06      	ble.n	8011eaa <__kernel_rem_pio2+0x3da>
 8011e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e9e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011ea2:	f108 0801 	add.w	r8, r8, #1
 8011ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ea8:	e7df      	b.n	8011e6a <__kernel_rem_pio2+0x39a>
 8011eaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011eae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011eb2:	f7ee fba1 	bl	80005f8 <__aeabi_dmul>
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	460b      	mov	r3, r1
 8011eba:	4630      	mov	r0, r6
 8011ebc:	4639      	mov	r1, r7
 8011ebe:	f7ee f9e5 	bl	800028c <__adddf3>
 8011ec2:	f109 0901 	add.w	r9, r9, #1
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	460f      	mov	r7, r1
 8011eca:	e7e4      	b.n	8011e96 <__kernel_rem_pio2+0x3c6>
 8011ecc:	3d01      	subs	r5, #1
 8011ece:	e748      	b.n	8011d62 <__kernel_rem_pio2+0x292>
 8011ed0:	ec47 6b10 	vmov	d0, r6, r7
 8011ed4:	f1ca 0000 	rsb	r0, sl, #0
 8011ed8:	f000 face 	bl	8012478 <scalbn>
 8011edc:	ec57 6b10 	vmov	r6, r7, d0
 8011ee0:	4ba0      	ldr	r3, [pc, #640]	; (8012164 <__kernel_rem_pio2+0x694>)
 8011ee2:	ee10 0a10 	vmov	r0, s0
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	4639      	mov	r1, r7
 8011eea:	f7ee fe0b 	bl	8000b04 <__aeabi_dcmpge>
 8011eee:	b1f8      	cbz	r0, 8011f30 <__kernel_rem_pio2+0x460>
 8011ef0:	4b9d      	ldr	r3, [pc, #628]	; (8012168 <__kernel_rem_pio2+0x698>)
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	4639      	mov	r1, r7
 8011ef8:	f7ee fb7e 	bl	80005f8 <__aeabi_dmul>
 8011efc:	f7ee fe2c 	bl	8000b58 <__aeabi_d2iz>
 8011f00:	4680      	mov	r8, r0
 8011f02:	f7ee fb0f 	bl	8000524 <__aeabi_i2d>
 8011f06:	4b97      	ldr	r3, [pc, #604]	; (8012164 <__kernel_rem_pio2+0x694>)
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f7ee fb75 	bl	80005f8 <__aeabi_dmul>
 8011f0e:	460b      	mov	r3, r1
 8011f10:	4602      	mov	r2, r0
 8011f12:	4639      	mov	r1, r7
 8011f14:	4630      	mov	r0, r6
 8011f16:	f7ee f9b7 	bl	8000288 <__aeabi_dsub>
 8011f1a:	f7ee fe1d 	bl	8000b58 <__aeabi_d2iz>
 8011f1e:	1c65      	adds	r5, r4, #1
 8011f20:	ab0e      	add	r3, sp, #56	; 0x38
 8011f22:	f10a 0a18 	add.w	sl, sl, #24
 8011f26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011f2a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011f2e:	e720      	b.n	8011d72 <__kernel_rem_pio2+0x2a2>
 8011f30:	4630      	mov	r0, r6
 8011f32:	4639      	mov	r1, r7
 8011f34:	f7ee fe10 	bl	8000b58 <__aeabi_d2iz>
 8011f38:	ab0e      	add	r3, sp, #56	; 0x38
 8011f3a:	4625      	mov	r5, r4
 8011f3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011f40:	e717      	b.n	8011d72 <__kernel_rem_pio2+0x2a2>
 8011f42:	ab0e      	add	r3, sp, #56	; 0x38
 8011f44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011f48:	f7ee faec 	bl	8000524 <__aeabi_i2d>
 8011f4c:	4632      	mov	r2, r6
 8011f4e:	463b      	mov	r3, r7
 8011f50:	f7ee fb52 	bl	80005f8 <__aeabi_dmul>
 8011f54:	4b84      	ldr	r3, [pc, #528]	; (8012168 <__kernel_rem_pio2+0x698>)
 8011f56:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	4639      	mov	r1, r7
 8011f60:	f7ee fb4a 	bl	80005f8 <__aeabi_dmul>
 8011f64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f68:	4606      	mov	r6, r0
 8011f6a:	460f      	mov	r7, r1
 8011f6c:	e70f      	b.n	8011d8e <__kernel_rem_pio2+0x2be>
 8011f6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011f72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011f76:	f7ee fb3f 	bl	80005f8 <__aeabi_dmul>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f82:	f7ee f983 	bl	800028c <__adddf3>
 8011f86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011f8a:	f108 0801 	add.w	r8, r8, #1
 8011f8e:	9b02      	ldr	r3, [sp, #8]
 8011f90:	4598      	cmp	r8, r3
 8011f92:	dc01      	bgt.n	8011f98 <__kernel_rem_pio2+0x4c8>
 8011f94:	45b8      	cmp	r8, r7
 8011f96:	ddea      	ble.n	8011f6e <__kernel_rem_pio2+0x49e>
 8011f98:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011f9c:	ab4a      	add	r3, sp, #296	; 0x128
 8011f9e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011fa2:	ed87 7b00 	vstr	d7, [r7]
 8011fa6:	3e01      	subs	r6, #1
 8011fa8:	e6f8      	b.n	8011d9c <__kernel_rem_pio2+0x2cc>
 8011faa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011fac:	2b02      	cmp	r3, #2
 8011fae:	dc0b      	bgt.n	8011fc8 <__kernel_rem_pio2+0x4f8>
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	dc35      	bgt.n	8012020 <__kernel_rem_pio2+0x550>
 8011fb4:	d059      	beq.n	801206a <__kernel_rem_pio2+0x59a>
 8011fb6:	9b04      	ldr	r3, [sp, #16]
 8011fb8:	f003 0007 	and.w	r0, r3, #7
 8011fbc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011fc0:	ecbd 8b02 	vpop	{d8}
 8011fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011fca:	2b03      	cmp	r3, #3
 8011fcc:	d1f3      	bne.n	8011fb6 <__kernel_rem_pio2+0x4e6>
 8011fce:	ab4a      	add	r3, sp, #296	; 0x128
 8011fd0:	4423      	add	r3, r4
 8011fd2:	9306      	str	r3, [sp, #24]
 8011fd4:	461c      	mov	r4, r3
 8011fd6:	469a      	mov	sl, r3
 8011fd8:	9502      	str	r5, [sp, #8]
 8011fda:	9b02      	ldr	r3, [sp, #8]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	f1aa 0a08 	sub.w	sl, sl, #8
 8011fe2:	dc6b      	bgt.n	80120bc <__kernel_rem_pio2+0x5ec>
 8011fe4:	46aa      	mov	sl, r5
 8011fe6:	f1ba 0f01 	cmp.w	sl, #1
 8011fea:	f1a4 0408 	sub.w	r4, r4, #8
 8011fee:	f300 8085 	bgt.w	80120fc <__kernel_rem_pio2+0x62c>
 8011ff2:	9c06      	ldr	r4, [sp, #24]
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	3408      	adds	r4, #8
 8011ff8:	2100      	movs	r1, #0
 8011ffa:	2d01      	cmp	r5, #1
 8011ffc:	f300 809d 	bgt.w	801213a <__kernel_rem_pio2+0x66a>
 8012000:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012004:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012008:	f1bb 0f00 	cmp.w	fp, #0
 801200c:	f040 809b 	bne.w	8012146 <__kernel_rem_pio2+0x676>
 8012010:	9b01      	ldr	r3, [sp, #4]
 8012012:	e9c3 5600 	strd	r5, r6, [r3]
 8012016:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801201a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801201e:	e7ca      	b.n	8011fb6 <__kernel_rem_pio2+0x4e6>
 8012020:	3408      	adds	r4, #8
 8012022:	ab4a      	add	r3, sp, #296	; 0x128
 8012024:	441c      	add	r4, r3
 8012026:	462e      	mov	r6, r5
 8012028:	2000      	movs	r0, #0
 801202a:	2100      	movs	r1, #0
 801202c:	2e00      	cmp	r6, #0
 801202e:	da36      	bge.n	801209e <__kernel_rem_pio2+0x5ce>
 8012030:	f1bb 0f00 	cmp.w	fp, #0
 8012034:	d039      	beq.n	80120aa <__kernel_rem_pio2+0x5da>
 8012036:	4602      	mov	r2, r0
 8012038:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801203c:	9c01      	ldr	r4, [sp, #4]
 801203e:	e9c4 2300 	strd	r2, r3, [r4]
 8012042:	4602      	mov	r2, r0
 8012044:	460b      	mov	r3, r1
 8012046:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801204a:	f7ee f91d 	bl	8000288 <__aeabi_dsub>
 801204e:	ae4c      	add	r6, sp, #304	; 0x130
 8012050:	2401      	movs	r4, #1
 8012052:	42a5      	cmp	r5, r4
 8012054:	da2c      	bge.n	80120b0 <__kernel_rem_pio2+0x5e0>
 8012056:	f1bb 0f00 	cmp.w	fp, #0
 801205a:	d002      	beq.n	8012062 <__kernel_rem_pio2+0x592>
 801205c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012060:	4619      	mov	r1, r3
 8012062:	9b01      	ldr	r3, [sp, #4]
 8012064:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012068:	e7a5      	b.n	8011fb6 <__kernel_rem_pio2+0x4e6>
 801206a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801206e:	eb0d 0403 	add.w	r4, sp, r3
 8012072:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012076:	2000      	movs	r0, #0
 8012078:	2100      	movs	r1, #0
 801207a:	2d00      	cmp	r5, #0
 801207c:	da09      	bge.n	8012092 <__kernel_rem_pio2+0x5c2>
 801207e:	f1bb 0f00 	cmp.w	fp, #0
 8012082:	d002      	beq.n	801208a <__kernel_rem_pio2+0x5ba>
 8012084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012088:	4619      	mov	r1, r3
 801208a:	9b01      	ldr	r3, [sp, #4]
 801208c:	e9c3 0100 	strd	r0, r1, [r3]
 8012090:	e791      	b.n	8011fb6 <__kernel_rem_pio2+0x4e6>
 8012092:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012096:	f7ee f8f9 	bl	800028c <__adddf3>
 801209a:	3d01      	subs	r5, #1
 801209c:	e7ed      	b.n	801207a <__kernel_rem_pio2+0x5aa>
 801209e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80120a2:	f7ee f8f3 	bl	800028c <__adddf3>
 80120a6:	3e01      	subs	r6, #1
 80120a8:	e7c0      	b.n	801202c <__kernel_rem_pio2+0x55c>
 80120aa:	4602      	mov	r2, r0
 80120ac:	460b      	mov	r3, r1
 80120ae:	e7c5      	b.n	801203c <__kernel_rem_pio2+0x56c>
 80120b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80120b4:	f7ee f8ea 	bl	800028c <__adddf3>
 80120b8:	3401      	adds	r4, #1
 80120ba:	e7ca      	b.n	8012052 <__kernel_rem_pio2+0x582>
 80120bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80120c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80120c4:	9b02      	ldr	r3, [sp, #8]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	9302      	str	r3, [sp, #8]
 80120ca:	4632      	mov	r2, r6
 80120cc:	463b      	mov	r3, r7
 80120ce:	4640      	mov	r0, r8
 80120d0:	4649      	mov	r1, r9
 80120d2:	f7ee f8db 	bl	800028c <__adddf3>
 80120d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80120da:	4602      	mov	r2, r0
 80120dc:	460b      	mov	r3, r1
 80120de:	4640      	mov	r0, r8
 80120e0:	4649      	mov	r1, r9
 80120e2:	f7ee f8d1 	bl	8000288 <__aeabi_dsub>
 80120e6:	4632      	mov	r2, r6
 80120e8:	463b      	mov	r3, r7
 80120ea:	f7ee f8cf 	bl	800028c <__adddf3>
 80120ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80120f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120f6:	ed8a 7b00 	vstr	d7, [sl]
 80120fa:	e76e      	b.n	8011fda <__kernel_rem_pio2+0x50a>
 80120fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012100:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012104:	4640      	mov	r0, r8
 8012106:	4632      	mov	r2, r6
 8012108:	463b      	mov	r3, r7
 801210a:	4649      	mov	r1, r9
 801210c:	f7ee f8be 	bl	800028c <__adddf3>
 8012110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	4640      	mov	r0, r8
 801211a:	4649      	mov	r1, r9
 801211c:	f7ee f8b4 	bl	8000288 <__aeabi_dsub>
 8012120:	4632      	mov	r2, r6
 8012122:	463b      	mov	r3, r7
 8012124:	f7ee f8b2 	bl	800028c <__adddf3>
 8012128:	ed9d 7b02 	vldr	d7, [sp, #8]
 801212c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012130:	ed84 7b00 	vstr	d7, [r4]
 8012134:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012138:	e755      	b.n	8011fe6 <__kernel_rem_pio2+0x516>
 801213a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801213e:	f7ee f8a5 	bl	800028c <__adddf3>
 8012142:	3d01      	subs	r5, #1
 8012144:	e759      	b.n	8011ffa <__kernel_rem_pio2+0x52a>
 8012146:	9b01      	ldr	r3, [sp, #4]
 8012148:	9a01      	ldr	r2, [sp, #4]
 801214a:	601d      	str	r5, [r3, #0]
 801214c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012150:	605c      	str	r4, [r3, #4]
 8012152:	609f      	str	r7, [r3, #8]
 8012154:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012158:	60d3      	str	r3, [r2, #12]
 801215a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801215e:	6110      	str	r0, [r2, #16]
 8012160:	6153      	str	r3, [r2, #20]
 8012162:	e728      	b.n	8011fb6 <__kernel_rem_pio2+0x4e6>
 8012164:	41700000 	.word	0x41700000
 8012168:	3e700000 	.word	0x3e700000
 801216c:	00000000 	.word	0x00000000

08012170 <__kernel_sin>:
 8012170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012174:	ed2d 8b04 	vpush	{d8-d9}
 8012178:	eeb0 8a41 	vmov.f32	s16, s2
 801217c:	eef0 8a61 	vmov.f32	s17, s3
 8012180:	ec55 4b10 	vmov	r4, r5, d0
 8012184:	b083      	sub	sp, #12
 8012186:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801218a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801218e:	9001      	str	r0, [sp, #4]
 8012190:	da06      	bge.n	80121a0 <__kernel_sin+0x30>
 8012192:	ee10 0a10 	vmov	r0, s0
 8012196:	4629      	mov	r1, r5
 8012198:	f7ee fcde 	bl	8000b58 <__aeabi_d2iz>
 801219c:	2800      	cmp	r0, #0
 801219e:	d051      	beq.n	8012244 <__kernel_sin+0xd4>
 80121a0:	4622      	mov	r2, r4
 80121a2:	462b      	mov	r3, r5
 80121a4:	4620      	mov	r0, r4
 80121a6:	4629      	mov	r1, r5
 80121a8:	f7ee fa26 	bl	80005f8 <__aeabi_dmul>
 80121ac:	4682      	mov	sl, r0
 80121ae:	468b      	mov	fp, r1
 80121b0:	4602      	mov	r2, r0
 80121b2:	460b      	mov	r3, r1
 80121b4:	4620      	mov	r0, r4
 80121b6:	4629      	mov	r1, r5
 80121b8:	f7ee fa1e 	bl	80005f8 <__aeabi_dmul>
 80121bc:	a341      	add	r3, pc, #260	; (adr r3, 80122c4 <__kernel_sin+0x154>)
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	4680      	mov	r8, r0
 80121c4:	4689      	mov	r9, r1
 80121c6:	4650      	mov	r0, sl
 80121c8:	4659      	mov	r1, fp
 80121ca:	f7ee fa15 	bl	80005f8 <__aeabi_dmul>
 80121ce:	a33f      	add	r3, pc, #252	; (adr r3, 80122cc <__kernel_sin+0x15c>)
 80121d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d4:	f7ee f858 	bl	8000288 <__aeabi_dsub>
 80121d8:	4652      	mov	r2, sl
 80121da:	465b      	mov	r3, fp
 80121dc:	f7ee fa0c 	bl	80005f8 <__aeabi_dmul>
 80121e0:	a33c      	add	r3, pc, #240	; (adr r3, 80122d4 <__kernel_sin+0x164>)
 80121e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e6:	f7ee f851 	bl	800028c <__adddf3>
 80121ea:	4652      	mov	r2, sl
 80121ec:	465b      	mov	r3, fp
 80121ee:	f7ee fa03 	bl	80005f8 <__aeabi_dmul>
 80121f2:	a33a      	add	r3, pc, #232	; (adr r3, 80122dc <__kernel_sin+0x16c>)
 80121f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f8:	f7ee f846 	bl	8000288 <__aeabi_dsub>
 80121fc:	4652      	mov	r2, sl
 80121fe:	465b      	mov	r3, fp
 8012200:	f7ee f9fa 	bl	80005f8 <__aeabi_dmul>
 8012204:	a337      	add	r3, pc, #220	; (adr r3, 80122e4 <__kernel_sin+0x174>)
 8012206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220a:	f7ee f83f 	bl	800028c <__adddf3>
 801220e:	9b01      	ldr	r3, [sp, #4]
 8012210:	4606      	mov	r6, r0
 8012212:	460f      	mov	r7, r1
 8012214:	b9eb      	cbnz	r3, 8012252 <__kernel_sin+0xe2>
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	4650      	mov	r0, sl
 801221c:	4659      	mov	r1, fp
 801221e:	f7ee f9eb 	bl	80005f8 <__aeabi_dmul>
 8012222:	a325      	add	r3, pc, #148	; (adr r3, 80122b8 <__kernel_sin+0x148>)
 8012224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012228:	f7ee f82e 	bl	8000288 <__aeabi_dsub>
 801222c:	4642      	mov	r2, r8
 801222e:	464b      	mov	r3, r9
 8012230:	f7ee f9e2 	bl	80005f8 <__aeabi_dmul>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	4620      	mov	r0, r4
 801223a:	4629      	mov	r1, r5
 801223c:	f7ee f826 	bl	800028c <__adddf3>
 8012240:	4604      	mov	r4, r0
 8012242:	460d      	mov	r5, r1
 8012244:	ec45 4b10 	vmov	d0, r4, r5
 8012248:	b003      	add	sp, #12
 801224a:	ecbd 8b04 	vpop	{d8-d9}
 801224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012252:	4b1b      	ldr	r3, [pc, #108]	; (80122c0 <__kernel_sin+0x150>)
 8012254:	ec51 0b18 	vmov	r0, r1, d8
 8012258:	2200      	movs	r2, #0
 801225a:	f7ee f9cd 	bl	80005f8 <__aeabi_dmul>
 801225e:	4632      	mov	r2, r6
 8012260:	ec41 0b19 	vmov	d9, r0, r1
 8012264:	463b      	mov	r3, r7
 8012266:	4640      	mov	r0, r8
 8012268:	4649      	mov	r1, r9
 801226a:	f7ee f9c5 	bl	80005f8 <__aeabi_dmul>
 801226e:	4602      	mov	r2, r0
 8012270:	460b      	mov	r3, r1
 8012272:	ec51 0b19 	vmov	r0, r1, d9
 8012276:	f7ee f807 	bl	8000288 <__aeabi_dsub>
 801227a:	4652      	mov	r2, sl
 801227c:	465b      	mov	r3, fp
 801227e:	f7ee f9bb 	bl	80005f8 <__aeabi_dmul>
 8012282:	ec53 2b18 	vmov	r2, r3, d8
 8012286:	f7ed ffff 	bl	8000288 <__aeabi_dsub>
 801228a:	a30b      	add	r3, pc, #44	; (adr r3, 80122b8 <__kernel_sin+0x148>)
 801228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012290:	4606      	mov	r6, r0
 8012292:	460f      	mov	r7, r1
 8012294:	4640      	mov	r0, r8
 8012296:	4649      	mov	r1, r9
 8012298:	f7ee f9ae 	bl	80005f8 <__aeabi_dmul>
 801229c:	4602      	mov	r2, r0
 801229e:	460b      	mov	r3, r1
 80122a0:	4630      	mov	r0, r6
 80122a2:	4639      	mov	r1, r7
 80122a4:	f7ed fff2 	bl	800028c <__adddf3>
 80122a8:	4602      	mov	r2, r0
 80122aa:	460b      	mov	r3, r1
 80122ac:	4620      	mov	r0, r4
 80122ae:	4629      	mov	r1, r5
 80122b0:	f7ed ffea 	bl	8000288 <__aeabi_dsub>
 80122b4:	e7c4      	b.n	8012240 <__kernel_sin+0xd0>
 80122b6:	bf00      	nop
 80122b8:	55555549 	.word	0x55555549
 80122bc:	3fc55555 	.word	0x3fc55555
 80122c0:	3fe00000 	.word	0x3fe00000
 80122c4:	5acfd57c 	.word	0x5acfd57c
 80122c8:	3de5d93a 	.word	0x3de5d93a
 80122cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80122d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80122d4:	57b1fe7d 	.word	0x57b1fe7d
 80122d8:	3ec71de3 	.word	0x3ec71de3
 80122dc:	19c161d5 	.word	0x19c161d5
 80122e0:	3f2a01a0 	.word	0x3f2a01a0
 80122e4:	1110f8a6 	.word	0x1110f8a6
 80122e8:	3f811111 	.word	0x3f811111

080122ec <with_errno>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	4604      	mov	r4, r0
 80122f0:	460d      	mov	r5, r1
 80122f2:	4616      	mov	r6, r2
 80122f4:	f7fd fd62 	bl	800fdbc <__errno>
 80122f8:	4629      	mov	r1, r5
 80122fa:	6006      	str	r6, [r0, #0]
 80122fc:	4620      	mov	r0, r4
 80122fe:	bd70      	pop	{r4, r5, r6, pc}

08012300 <xflow>:
 8012300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012302:	4614      	mov	r4, r2
 8012304:	461d      	mov	r5, r3
 8012306:	b108      	cbz	r0, 801230c <xflow+0xc>
 8012308:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801230c:	e9cd 2300 	strd	r2, r3, [sp]
 8012310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012314:	4620      	mov	r0, r4
 8012316:	4629      	mov	r1, r5
 8012318:	f7ee f96e 	bl	80005f8 <__aeabi_dmul>
 801231c:	2222      	movs	r2, #34	; 0x22
 801231e:	b003      	add	sp, #12
 8012320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012324:	f7ff bfe2 	b.w	80122ec <with_errno>

08012328 <__math_uflow>:
 8012328:	b508      	push	{r3, lr}
 801232a:	2200      	movs	r2, #0
 801232c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012330:	f7ff ffe6 	bl	8012300 <xflow>
 8012334:	ec41 0b10 	vmov	d0, r0, r1
 8012338:	bd08      	pop	{r3, pc}

0801233a <__math_oflow>:
 801233a:	b508      	push	{r3, lr}
 801233c:	2200      	movs	r2, #0
 801233e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012342:	f7ff ffdd 	bl	8012300 <xflow>
 8012346:	ec41 0b10 	vmov	d0, r0, r1
 801234a:	bd08      	pop	{r3, pc}

0801234c <fabs>:
 801234c:	ec51 0b10 	vmov	r0, r1, d0
 8012350:	ee10 2a10 	vmov	r2, s0
 8012354:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012358:	ec43 2b10 	vmov	d0, r2, r3
 801235c:	4770      	bx	lr

0801235e <finite>:
 801235e:	b082      	sub	sp, #8
 8012360:	ed8d 0b00 	vstr	d0, [sp]
 8012364:	9801      	ldr	r0, [sp, #4]
 8012366:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801236a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801236e:	0fc0      	lsrs	r0, r0, #31
 8012370:	b002      	add	sp, #8
 8012372:	4770      	bx	lr
 8012374:	0000      	movs	r0, r0
	...

08012378 <floor>:
 8012378:	ec51 0b10 	vmov	r0, r1, d0
 801237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012380:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012384:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012388:	2e13      	cmp	r6, #19
 801238a:	ee10 5a10 	vmov	r5, s0
 801238e:	ee10 8a10 	vmov	r8, s0
 8012392:	460c      	mov	r4, r1
 8012394:	dc32      	bgt.n	80123fc <floor+0x84>
 8012396:	2e00      	cmp	r6, #0
 8012398:	da14      	bge.n	80123c4 <floor+0x4c>
 801239a:	a333      	add	r3, pc, #204	; (adr r3, 8012468 <floor+0xf0>)
 801239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a0:	f7ed ff74 	bl	800028c <__adddf3>
 80123a4:	2200      	movs	r2, #0
 80123a6:	2300      	movs	r3, #0
 80123a8:	f7ee fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 80123ac:	b138      	cbz	r0, 80123be <floor+0x46>
 80123ae:	2c00      	cmp	r4, #0
 80123b0:	da57      	bge.n	8012462 <floor+0xea>
 80123b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80123b6:	431d      	orrs	r5, r3
 80123b8:	d001      	beq.n	80123be <floor+0x46>
 80123ba:	4c2d      	ldr	r4, [pc, #180]	; (8012470 <floor+0xf8>)
 80123bc:	2500      	movs	r5, #0
 80123be:	4621      	mov	r1, r4
 80123c0:	4628      	mov	r0, r5
 80123c2:	e025      	b.n	8012410 <floor+0x98>
 80123c4:	4f2b      	ldr	r7, [pc, #172]	; (8012474 <floor+0xfc>)
 80123c6:	4137      	asrs	r7, r6
 80123c8:	ea01 0307 	and.w	r3, r1, r7
 80123cc:	4303      	orrs	r3, r0
 80123ce:	d01f      	beq.n	8012410 <floor+0x98>
 80123d0:	a325      	add	r3, pc, #148	; (adr r3, 8012468 <floor+0xf0>)
 80123d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d6:	f7ed ff59 	bl	800028c <__adddf3>
 80123da:	2200      	movs	r2, #0
 80123dc:	2300      	movs	r3, #0
 80123de:	f7ee fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d0eb      	beq.n	80123be <floor+0x46>
 80123e6:	2c00      	cmp	r4, #0
 80123e8:	bfbe      	ittt	lt
 80123ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80123ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80123f2:	19a4      	addlt	r4, r4, r6
 80123f4:	ea24 0407 	bic.w	r4, r4, r7
 80123f8:	2500      	movs	r5, #0
 80123fa:	e7e0      	b.n	80123be <floor+0x46>
 80123fc:	2e33      	cmp	r6, #51	; 0x33
 80123fe:	dd0b      	ble.n	8012418 <floor+0xa0>
 8012400:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012404:	d104      	bne.n	8012410 <floor+0x98>
 8012406:	ee10 2a10 	vmov	r2, s0
 801240a:	460b      	mov	r3, r1
 801240c:	f7ed ff3e 	bl	800028c <__adddf3>
 8012410:	ec41 0b10 	vmov	d0, r0, r1
 8012414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012418:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801241c:	f04f 33ff 	mov.w	r3, #4294967295
 8012420:	fa23 f707 	lsr.w	r7, r3, r7
 8012424:	4207      	tst	r7, r0
 8012426:	d0f3      	beq.n	8012410 <floor+0x98>
 8012428:	a30f      	add	r3, pc, #60	; (adr r3, 8012468 <floor+0xf0>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	f7ed ff2d 	bl	800028c <__adddf3>
 8012432:	2200      	movs	r2, #0
 8012434:	2300      	movs	r3, #0
 8012436:	f7ee fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 801243a:	2800      	cmp	r0, #0
 801243c:	d0bf      	beq.n	80123be <floor+0x46>
 801243e:	2c00      	cmp	r4, #0
 8012440:	da02      	bge.n	8012448 <floor+0xd0>
 8012442:	2e14      	cmp	r6, #20
 8012444:	d103      	bne.n	801244e <floor+0xd6>
 8012446:	3401      	adds	r4, #1
 8012448:	ea25 0507 	bic.w	r5, r5, r7
 801244c:	e7b7      	b.n	80123be <floor+0x46>
 801244e:	2301      	movs	r3, #1
 8012450:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012454:	fa03 f606 	lsl.w	r6, r3, r6
 8012458:	4435      	add	r5, r6
 801245a:	4545      	cmp	r5, r8
 801245c:	bf38      	it	cc
 801245e:	18e4      	addcc	r4, r4, r3
 8012460:	e7f2      	b.n	8012448 <floor+0xd0>
 8012462:	2500      	movs	r5, #0
 8012464:	462c      	mov	r4, r5
 8012466:	e7aa      	b.n	80123be <floor+0x46>
 8012468:	8800759c 	.word	0x8800759c
 801246c:	7e37e43c 	.word	0x7e37e43c
 8012470:	bff00000 	.word	0xbff00000
 8012474:	000fffff 	.word	0x000fffff

08012478 <scalbn>:
 8012478:	b570      	push	{r4, r5, r6, lr}
 801247a:	ec55 4b10 	vmov	r4, r5, d0
 801247e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012482:	4606      	mov	r6, r0
 8012484:	462b      	mov	r3, r5
 8012486:	b99a      	cbnz	r2, 80124b0 <scalbn+0x38>
 8012488:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801248c:	4323      	orrs	r3, r4
 801248e:	d036      	beq.n	80124fe <scalbn+0x86>
 8012490:	4b39      	ldr	r3, [pc, #228]	; (8012578 <scalbn+0x100>)
 8012492:	4629      	mov	r1, r5
 8012494:	ee10 0a10 	vmov	r0, s0
 8012498:	2200      	movs	r2, #0
 801249a:	f7ee f8ad 	bl	80005f8 <__aeabi_dmul>
 801249e:	4b37      	ldr	r3, [pc, #220]	; (801257c <scalbn+0x104>)
 80124a0:	429e      	cmp	r6, r3
 80124a2:	4604      	mov	r4, r0
 80124a4:	460d      	mov	r5, r1
 80124a6:	da10      	bge.n	80124ca <scalbn+0x52>
 80124a8:	a32b      	add	r3, pc, #172	; (adr r3, 8012558 <scalbn+0xe0>)
 80124aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ae:	e03a      	b.n	8012526 <scalbn+0xae>
 80124b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80124b4:	428a      	cmp	r2, r1
 80124b6:	d10c      	bne.n	80124d2 <scalbn+0x5a>
 80124b8:	ee10 2a10 	vmov	r2, s0
 80124bc:	4620      	mov	r0, r4
 80124be:	4629      	mov	r1, r5
 80124c0:	f7ed fee4 	bl	800028c <__adddf3>
 80124c4:	4604      	mov	r4, r0
 80124c6:	460d      	mov	r5, r1
 80124c8:	e019      	b.n	80124fe <scalbn+0x86>
 80124ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80124ce:	460b      	mov	r3, r1
 80124d0:	3a36      	subs	r2, #54	; 0x36
 80124d2:	4432      	add	r2, r6
 80124d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80124d8:	428a      	cmp	r2, r1
 80124da:	dd08      	ble.n	80124ee <scalbn+0x76>
 80124dc:	2d00      	cmp	r5, #0
 80124de:	a120      	add	r1, pc, #128	; (adr r1, 8012560 <scalbn+0xe8>)
 80124e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124e4:	da1c      	bge.n	8012520 <scalbn+0xa8>
 80124e6:	a120      	add	r1, pc, #128	; (adr r1, 8012568 <scalbn+0xf0>)
 80124e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124ec:	e018      	b.n	8012520 <scalbn+0xa8>
 80124ee:	2a00      	cmp	r2, #0
 80124f0:	dd08      	ble.n	8012504 <scalbn+0x8c>
 80124f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80124fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80124fe:	ec45 4b10 	vmov	d0, r4, r5
 8012502:	bd70      	pop	{r4, r5, r6, pc}
 8012504:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012508:	da19      	bge.n	801253e <scalbn+0xc6>
 801250a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801250e:	429e      	cmp	r6, r3
 8012510:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012514:	dd0a      	ble.n	801252c <scalbn+0xb4>
 8012516:	a112      	add	r1, pc, #72	; (adr r1, 8012560 <scalbn+0xe8>)
 8012518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d1e2      	bne.n	80124e6 <scalbn+0x6e>
 8012520:	a30f      	add	r3, pc, #60	; (adr r3, 8012560 <scalbn+0xe8>)
 8012522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012526:	f7ee f867 	bl	80005f8 <__aeabi_dmul>
 801252a:	e7cb      	b.n	80124c4 <scalbn+0x4c>
 801252c:	a10a      	add	r1, pc, #40	; (adr r1, 8012558 <scalbn+0xe0>)
 801252e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d0b8      	beq.n	80124a8 <scalbn+0x30>
 8012536:	a10e      	add	r1, pc, #56	; (adr r1, 8012570 <scalbn+0xf8>)
 8012538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801253c:	e7b4      	b.n	80124a8 <scalbn+0x30>
 801253e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012542:	3236      	adds	r2, #54	; 0x36
 8012544:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012548:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801254c:	4620      	mov	r0, r4
 801254e:	4b0c      	ldr	r3, [pc, #48]	; (8012580 <scalbn+0x108>)
 8012550:	2200      	movs	r2, #0
 8012552:	e7e8      	b.n	8012526 <scalbn+0xae>
 8012554:	f3af 8000 	nop.w
 8012558:	c2f8f359 	.word	0xc2f8f359
 801255c:	01a56e1f 	.word	0x01a56e1f
 8012560:	8800759c 	.word	0x8800759c
 8012564:	7e37e43c 	.word	0x7e37e43c
 8012568:	8800759c 	.word	0x8800759c
 801256c:	fe37e43c 	.word	0xfe37e43c
 8012570:	c2f8f359 	.word	0xc2f8f359
 8012574:	81a56e1f 	.word	0x81a56e1f
 8012578:	43500000 	.word	0x43500000
 801257c:	ffff3cb0 	.word	0xffff3cb0
 8012580:	3c900000 	.word	0x3c900000

08012584 <_init>:
 8012584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012586:	bf00      	nop
 8012588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801258a:	bc08      	pop	{r3}
 801258c:	469e      	mov	lr, r3
 801258e:	4770      	bx	lr

08012590 <_fini>:
 8012590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012592:	bf00      	nop
 8012594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012596:	bc08      	pop	{r3}
 8012598:	469e      	mov	lr, r3
 801259a:	4770      	bx	lr
